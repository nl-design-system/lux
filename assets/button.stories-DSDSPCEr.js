var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t2, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J;
import { j as jsxRuntimeExports } from "./jsx-runtime-DnIIMar6.js";
import { t as tokens, f as LuxIconChevronLeft, h as LuxIconChevronRight, c as createDesignTokensStory, d as LuxButton$1 } from "./components-B7qx21nb.js";
import { i as instrument } from "./index-DbgQBs_-.js";
import { g as getDefaultExportFromCjs } from "./_commonjsHelpers-CcAunmGO.js";
import "./createVisualRegressionStory-CMDMpfq0.js";
var define_process_env_default$1 = {};
const { once } = __STORYBOOK_MODULE_CLIENT_LOGGER__;
var __create = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = ((x2) => typeof require < "u" ? require : typeof Proxy < "u" ? new Proxy(x2, { get: (a, b2) => (typeof require < "u" ? require : a)[b2] }) : x2)(function(x2) {
  if (typeof require < "u") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x2 + '" is not supported');
});
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
}, __copyProps = (to2, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to2, key) && key !== except && __defProp2(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
var require_assertion_error = __commonJS({ "../../node_modules/assertion-error/index.js"(exports, module2) {
  function exclude() {
    var excludes = [].slice.call(arguments);
    function excludeProps(res, obj) {
      Object.keys(obj).forEach(function(key) {
        ~excludes.indexOf(key) || (res[key] = obj[key]);
      });
    }
    return function() {
      for (var args = [].slice.call(arguments), i2 = 0, res = {}; i2 < args.length; i2++) excludeProps(res, args[i2]);
      return res;
    };
  }
  module2.exports = AssertionError2;
  function AssertionError2(message, _props, ssf) {
    var extend = exclude("name", "message", "stack", "constructor", "toJSON"), props = extend(_props || {});
    this.message = message || "Unspecified AssertionError", this.showDiff = false;
    for (var key in props) this[key] = props[key];
    if (ssf = ssf || AssertionError2, Error.captureStackTrace) Error.captureStackTrace(this, ssf);
    else try {
      throw new Error();
    } catch (e2) {
      this.stack = e2.stack;
    }
  }
  AssertionError2.prototype = Object.create(Error.prototype);
  AssertionError2.prototype.name = "AssertionError";
  AssertionError2.prototype.constructor = AssertionError2;
  AssertionError2.prototype.toJSON = function(stack) {
    var extend = exclude("constructor", "toJSON", "stack"), props = extend({ name: this.name }, this);
    return stack !== false && this.stack && (props.stack = this.stack), props;
  };
} });
var require_pathval = __commonJS({ "../../node_modules/pathval/index.js"(exports, module2) {
  function hasProperty(obj, name) {
    return typeof obj > "u" || obj === null ? false : name in Object(obj);
  }
  function parsePath(path) {
    var str = path.replace(/([^\\])\[/g, "$1.["), parts = str.match(/(\\\.|[^.]+?)+/g);
    return parts.map(function(value) {
      if (value === "constructor" || value === "__proto__" || value === "prototype") return {};
      var regexp = /^\[(\d+)\]$/, mArr = regexp.exec(value), parsed = null;
      return mArr ? parsed = { i: parseFloat(mArr[1]) } : parsed = { p: value.replace(/\\([.[\]])/g, "$1") }, parsed;
    });
  }
  function internalGetPathValue(obj, parsed, pathDepth) {
    var temporaryValue = obj, res = null;
    pathDepth = typeof pathDepth > "u" ? parsed.length : pathDepth;
    for (var i2 = 0; i2 < pathDepth; i2++) {
      var part = parsed[i2];
      temporaryValue && (typeof part.p > "u" ? temporaryValue = temporaryValue[part.i] : temporaryValue = temporaryValue[part.p], i2 === pathDepth - 1 && (res = temporaryValue));
    }
    return res;
  }
  function internalSetPathValue(obj, val, parsed) {
    for (var tempObj = obj, pathDepth = parsed.length, part = null, i2 = 0; i2 < pathDepth; i2++) {
      var propName = null, propVal = null;
      if (part = parsed[i2], i2 === pathDepth - 1) propName = typeof part.p > "u" ? part.i : part.p, tempObj[propName] = val;
      else if (typeof part.p < "u" && tempObj[part.p]) tempObj = tempObj[part.p];
      else if (typeof part.i < "u" && tempObj[part.i]) tempObj = tempObj[part.i];
      else {
        var next = parsed[i2 + 1];
        propName = typeof part.p > "u" ? part.i : part.p, propVal = typeof next.p > "u" ? [] : {}, tempObj[propName] = propVal, tempObj = tempObj[propName];
      }
    }
  }
  function getPathInfo(obj, path) {
    var parsed = parsePath(path), last = parsed[parsed.length - 1], info = { parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj, name: last.p || last.i, value: internalGetPathValue(obj, parsed) };
    return info.exists = hasProperty(info.parent, info.name), info;
  }
  function getPathValue(obj, path) {
    var info = getPathInfo(obj, path);
    return info.value;
  }
  function setPathValue(obj, path, val) {
    var parsed = parsePath(path);
    return internalSetPathValue(obj, val, parsed), obj;
  }
  module2.exports = { hasProperty, getPathInfo, getPathValue, setPathValue };
} });
var require_flag = __commonJS({ "../../node_modules/chai/lib/chai/utils/flag.js"(exports, module2) {
  module2.exports = function(obj, key, value) {
    var flags = obj.__flags || (obj.__flags = /* @__PURE__ */ Object.create(null));
    if (arguments.length === 3) flags[key] = value;
    else return flags[key];
  };
} });
var require_test = __commonJS({ "../../node_modules/chai/lib/chai/utils/test.js"(exports, module2) {
  var flag = require_flag();
  module2.exports = function(obj, args) {
    var negate = flag(obj, "negate"), expr = args[0];
    return negate ? !expr : expr;
  };
} });
var require_type_detect = __commonJS({ "../../node_modules/type-detect/type-detect.js"(exports, module2) {
  (function(global2, factory) {
    typeof exports == "object" && typeof module2 < "u" ? module2.exports = factory() : typeof define == "function" && define.amd ? define(factory) : global2.typeDetect = factory();
  })(exports, function() {
    var promiseExists = typeof Promise == "function", globalObject = typeof self == "object" ? self : global, symbolExists = typeof Symbol < "u", mapExists = typeof Map < "u", setExists = typeof Set < "u", weakMapExists = typeof WeakMap < "u", weakSetExists = typeof WeakSet < "u", dataViewExists = typeof DataView < "u", symbolIteratorExists = symbolExists && typeof Symbol.iterator < "u", symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag < "u", setEntriesExists = setExists && typeof Set.prototype.entries == "function", mapEntriesExists = mapExists && typeof Map.prototype.entries == "function", setIteratorPrototype = setEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Set()).entries()), mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Map()).entries()), arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] == "function", arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]()), stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] == "function", stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(""[Symbol.iterator]()), toStringLeftSliceLength = 8, toStringRightSliceLength = -1;
    function typeDetect(obj) {
      var typeofObj = typeof obj;
      if (typeofObj !== "object") return typeofObj;
      if (obj === null) return "null";
      if (obj === globalObject) return "global";
      if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) return "Array";
      if (typeof window == "object" && window !== null) {
        if (typeof window.location == "object" && obj === window.location) return "Location";
        if (typeof window.document == "object" && obj === window.document) return "Document";
        if (typeof window.navigator == "object") {
          if (typeof window.navigator.mimeTypes == "object" && obj === window.navigator.mimeTypes) return "MimeTypeArray";
          if (typeof window.navigator.plugins == "object" && obj === window.navigator.plugins) return "PluginArray";
        }
        if ((typeof window.HTMLElement == "function" || typeof window.HTMLElement == "object") && obj instanceof window.HTMLElement) {
          if (obj.tagName === "BLOCKQUOTE") return "HTMLQuoteElement";
          if (obj.tagName === "TD") return "HTMLTableDataCellElement";
          if (obj.tagName === "TH") return "HTMLTableHeaderCellElement";
        }
      }
      var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];
      if (typeof stringTag == "string") return stringTag;
      var objPrototype = Object.getPrototypeOf(obj);
      return objPrototype === RegExp.prototype ? "RegExp" : objPrototype === Date.prototype ? "Date" : promiseExists && objPrototype === Promise.prototype ? "Promise" : setExists && objPrototype === Set.prototype ? "Set" : mapExists && objPrototype === Map.prototype ? "Map" : weakSetExists && objPrototype === WeakSet.prototype ? "WeakSet" : weakMapExists && objPrototype === WeakMap.prototype ? "WeakMap" : dataViewExists && objPrototype === DataView.prototype ? "DataView" : mapExists && objPrototype === mapIteratorPrototype ? "Map Iterator" : setExists && objPrototype === setIteratorPrototype ? "Set Iterator" : arrayIteratorExists && objPrototype === arrayIteratorPrototype ? "Array Iterator" : stringIteratorExists && objPrototype === stringIteratorPrototype ? "String Iterator" : objPrototype === null ? "Object" : Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
    }
    return typeDetect;
  });
} });
var require_expectTypes = __commonJS({ "../../node_modules/chai/lib/chai/utils/expectTypes.js"(exports, module2) {
  var AssertionError2 = require_assertion_error(), flag = require_flag(), type3 = require_type_detect();
  module2.exports = function(obj, types) {
    var flagMsg = flag(obj, "message"), ssfi = flag(obj, "ssfi");
    flagMsg = flagMsg ? flagMsg + ": " : "", obj = flag(obj, "object"), types = types.map(function(t) {
      return t.toLowerCase();
    }), types.sort();
    var str = types.map(function(t, index) {
      var art = ~["a", "e", "i", "o", "u"].indexOf(t.charAt(0)) ? "an" : "a", or = types.length > 1 && index === types.length - 1 ? "or " : "";
      return or + art + " " + t;
    }).join(", "), objType = type3(obj).toLowerCase();
    if (!types.some(function(expected) {
      return objType === expected;
    })) throw new AssertionError2(flagMsg + "object tested must be " + str + ", but " + objType + " given", void 0, ssfi);
  };
} });
var require_getActual = __commonJS({ "../../node_modules/chai/lib/chai/utils/getActual.js"(exports, module2) {
  module2.exports = function(obj, args) {
    return args.length > 4 ? args[4] : obj._obj;
  };
} });
var require_get_func_name = __commonJS({ "../../node_modules/get-func-name/index.js"(exports, module2) {
  var toString2 = Function.prototype.toString, functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/, maxFunctionSourceLength = 512;
  function getFuncName(aFunc) {
    if (typeof aFunc != "function") return null;
    var name = "";
    if (typeof Function.prototype.name > "u" && typeof aFunc.name > "u") {
      var functionSource = toString2.call(aFunc);
      if (functionSource.indexOf("(") > maxFunctionSourceLength) return name;
      var match = functionSource.match(functionNameMatch);
      match && (name = match[1]);
    } else name = aFunc.name;
    return name;
  }
  module2.exports = getFuncName;
} });
var require_loupe = __commonJS({ "../../node_modules/loupe/loupe.js"(exports, module2) {
  (function(global2, factory) {
    typeof exports == "object" && typeof module2 < "u" ? factory(exports) : typeof define == "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis < "u" ? globalThis : global2 || self, factory(global2.loupe = {}));
  })(exports, function(exports2) {
    function _typeof5(obj) {
      "@babel/helpers - typeof";
      return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? _typeof5 = function(obj2) {
        return typeof obj2;
      } : _typeof5 = function(obj2) {
        return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof5(obj);
    }
    function _slicedToArray2(arr, i2) {
      return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
    }
    function _arrayWithHoles2(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _iterableToArrayLimit2(arr, i2) {
      if (!(typeof Symbol > "u" || !(Symbol.iterator in Object(arr)))) {
        var _arr = [], _n2 = true, _d2 = false, _e2 = void 0;
        try {
          for (var _i2 = arr[Symbol.iterator](), _s2; !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i2 && _arr.length === i2)); _n2 = true) ;
        } catch (err) {
          _d2 = true, _e2 = err;
        } finally {
          try {
            !_n2 && _i2.return != null && _i2.return();
          } finally {
            if (_d2) throw _e2;
          }
        }
        return _arr;
      }
    }
    function _unsupportedIterableToArray2(o, minLen) {
      if (o) {
        if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
        var n2 = Object.prototype.toString.call(o).slice(8, -1);
        if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
        if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
      }
    }
    function _arrayLikeToArray2(arr, len) {
      (len == null || len > arr.length) && (len = arr.length);
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _nonIterableRest2() {
      throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var ansiColors = { bold: ["1", "22"], dim: ["2", "22"], italic: ["3", "23"], underline: ["4", "24"], inverse: ["7", "27"], hidden: ["8", "28"], strike: ["9", "29"], black: ["30", "39"], red: ["31", "39"], green: ["32", "39"], yellow: ["33", "39"], blue: ["34", "39"], magenta: ["35", "39"], cyan: ["36", "39"], white: ["37", "39"], brightblack: ["30;1", "39"], brightred: ["31;1", "39"], brightgreen: ["32;1", "39"], brightyellow: ["33;1", "39"], brightblue: ["34;1", "39"], brightmagenta: ["35;1", "39"], brightcyan: ["36;1", "39"], brightwhite: ["37;1", "39"], grey: ["90", "39"] }, styles = { special: "cyan", number: "yellow", bigint: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", symbol: "green", date: "magenta", regexp: "red" }, truncator = "…";
    function colorise(value, styleType) {
      var color = ansiColors[styles[styleType]] || ansiColors[styleType];
      return color ? "\x1B[".concat(color[0], "m").concat(String(value), "\x1B[").concat(color[1], "m") : String(value);
    }
    function normaliseOptions() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$showHidden = _ref.showHidden, showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden, _ref$depth = _ref.depth, depth = _ref$depth === void 0 ? 2 : _ref$depth, _ref$colors = _ref.colors, colors = _ref$colors === void 0 ? false : _ref$colors, _ref$customInspect = _ref.customInspect, customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect, _ref$showProxy = _ref.showProxy, showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy, _ref$maxArrayLength = _ref.maxArrayLength, maxArrayLength = _ref$maxArrayLength === void 0 ? 1 / 0 : _ref$maxArrayLength, _ref$breakLength = _ref.breakLength, breakLength = _ref$breakLength === void 0 ? 1 / 0 : _ref$breakLength, _ref$seen = _ref.seen, seen = _ref$seen === void 0 ? [] : _ref$seen, _ref$truncate = _ref.truncate, truncate2 = _ref$truncate === void 0 ? 1 / 0 : _ref$truncate, _ref$stylize = _ref.stylize, stylize = _ref$stylize === void 0 ? String : _ref$stylize, options = { showHidden: !!showHidden, depth: Number(depth), colors: !!colors, customInspect: !!customInspect, showProxy: !!showProxy, maxArrayLength: Number(maxArrayLength), breakLength: Number(breakLength), truncate: Number(truncate2), seen, stylize };
      return options.colors && (options.stylize = colorise), options;
    }
    function truncate(string2, length) {
      var tail = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : truncator;
      string2 = String(string2);
      var tailLength = tail.length, stringLength = string2.length;
      return tailLength > length && stringLength > tailLength ? tail : stringLength > length && stringLength > tailLength ? "".concat(string2.slice(0, length - tailLength)).concat(tail) : string2;
    }
    function inspectList(list, options, inspectItem) {
      var separator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ", ";
      inspectItem = inspectItem || options.inspect;
      var size = list.length;
      if (size === 0) return "";
      for (var originalLength = options.truncate, output = "", peek = "", truncated = "", i2 = 0; i2 < size; i2 += 1) {
        var last = i2 + 1 === list.length, secondToLast = i2 + 2 === list.length;
        truncated = "".concat(truncator, "(").concat(list.length - i2, ")");
        var value = list[i2];
        options.truncate = originalLength - output.length - (last ? 0 : separator.length);
        var string2 = peek || inspectItem(value, options) + (last ? "" : separator), nextLength = output.length + string2.length, truncatedLength = nextLength + truncated.length;
        if (last && nextLength > originalLength && output.length + truncated.length <= originalLength || !last && !secondToLast && truncatedLength > originalLength || (peek = last ? "" : inspectItem(list[i2 + 1], options) + (secondToLast ? "" : separator), !last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength)) break;
        if (output += string2, !last && !secondToLast && nextLength + peek.length >= originalLength) {
          truncated = "".concat(truncator, "(").concat(list.length - i2 - 1, ")");
          break;
        }
        truncated = "";
      }
      return "".concat(output).concat(truncated);
    }
    function quoteComplexKey(key) {
      return key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/) ? key : JSON.stringify(key).replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
    }
    function inspectProperty(_ref2, options) {
      var _ref3 = _slicedToArray2(_ref2, 2), key = _ref3[0], value = _ref3[1];
      return options.truncate -= 2, typeof key == "string" ? key = quoteComplexKey(key) : typeof key != "number" && (key = "[".concat(options.inspect(key, options), "]")), options.truncate -= key.length, value = options.inspect(value, options), "".concat(key, ": ").concat(value);
    }
    function inspectArray(array, options) {
      var nonIndexProperties = Object.keys(array).slice(array.length);
      if (!array.length && !nonIndexProperties.length) return "[]";
      options.truncate -= 4;
      var listContents = inspectList(array, options);
      options.truncate -= listContents.length;
      var propertyContents = "";
      return nonIndexProperties.length && (propertyContents = inspectList(nonIndexProperties.map(function(key) {
        return [key, array[key]];
      }), options, inspectProperty)), "[ ".concat(listContents).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
    }
    var toString2 = Function.prototype.toString, functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/, maxFunctionSourceLength = 512;
    function getFuncName(aFunc) {
      if (typeof aFunc != "function") return null;
      var name = "";
      if (typeof Function.prototype.name > "u" && typeof aFunc.name > "u") {
        var functionSource = toString2.call(aFunc);
        if (functionSource.indexOf("(") > maxFunctionSourceLength) return name;
        var match = functionSource.match(functionNameMatch);
        match && (name = match[1]);
      } else name = aFunc.name;
      return name;
    }
    var getFuncName_1 = getFuncName, getArrayName = function(array) {
      return typeof Buffer == "function" && array instanceof Buffer ? "Buffer" : array[Symbol.toStringTag] ? array[Symbol.toStringTag] : getFuncName_1(array.constructor);
    };
    function inspectTypedArray(array, options) {
      var name = getArrayName(array);
      options.truncate -= name.length + 4;
      var nonIndexProperties = Object.keys(array).slice(array.length);
      if (!array.length && !nonIndexProperties.length) return "".concat(name, "[]");
      for (var output = "", i2 = 0; i2 < array.length; i2++) {
        var string2 = "".concat(options.stylize(truncate(array[i2], options.truncate), "number")).concat(i2 === array.length - 1 ? "" : ", ");
        if (options.truncate -= string2.length, array[i2] !== array.length && options.truncate <= 3) {
          output += "".concat(truncator, "(").concat(array.length - array[i2] + 1, ")");
          break;
        }
        output += string2;
      }
      var propertyContents = "";
      return nonIndexProperties.length && (propertyContents = inspectList(nonIndexProperties.map(function(key) {
        return [key, array[key]];
      }), options, inspectProperty)), "".concat(name, "[ ").concat(output).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
    }
    function inspectDate(dateObject, options) {
      var stringRepresentation = dateObject.toJSON();
      if (stringRepresentation === null) return "Invalid Date";
      var split = stringRepresentation.split("T"), date = split[0];
      return options.stylize("".concat(date, "T").concat(truncate(split[1], options.truncate - date.length - 1)), "date");
    }
    function inspectFunction(func, options) {
      var name = getFuncName_1(func);
      return name ? options.stylize("[Function ".concat(truncate(name, options.truncate - 11), "]"), "special") : options.stylize("[Function]", "special");
    }
    function inspectMapEntry(_ref, options) {
      var _ref2 = _slicedToArray2(_ref, 2), key = _ref2[0], value = _ref2[1];
      return options.truncate -= 4, key = options.inspect(key, options), options.truncate -= key.length, value = options.inspect(value, options), "".concat(key, " => ").concat(value);
    }
    function mapToEntries(map) {
      var entries6 = [];
      return map.forEach(function(value, key) {
        entries6.push([key, value]);
      }), entries6;
    }
    function inspectMap(map, options) {
      var size = map.size - 1;
      return size <= 0 ? "Map{}" : (options.truncate -= 7, "Map{ ".concat(inspectList(mapToEntries(map), options, inspectMapEntry), " }"));
    }
    var isNaN2 = Number.isNaN || function(i2) {
      return i2 !== i2;
    };
    function inspectNumber(number, options) {
      return isNaN2(number) ? options.stylize("NaN", "number") : number === 1 / 0 ? options.stylize("Infinity", "number") : number === -1 / 0 ? options.stylize("-Infinity", "number") : number === 0 ? options.stylize(1 / number === 1 / 0 ? "+0" : "-0", "number") : options.stylize(truncate(number, options.truncate), "number");
    }
    function inspectBigInt(number, options) {
      var nums = truncate(number.toString(), options.truncate - 1);
      return nums !== truncator && (nums += "n"), options.stylize(nums, "bigint");
    }
    function inspectRegExp(value, options) {
      var flags = value.toString().split("/")[2], sourceLength = options.truncate - (2 + flags.length), source = value.source;
      return options.stylize("/".concat(truncate(source, sourceLength), "/").concat(flags), "regexp");
    }
    function arrayFromSet(set) {
      var values6 = [];
      return set.forEach(function(value) {
        values6.push(value);
      }), values6;
    }
    function inspectSet(set, options) {
      return set.size === 0 ? "Set{}" : (options.truncate -= 7, "Set{ ".concat(inspectList(arrayFromSet(set), options), " }"));
    }
    var stringEscapeChars = new RegExp("['\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]", "g"), escapeCharacters = { "\b": "\\b", "	": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", "'": "\\'", "\\": "\\\\" }, hex = 16, unicodeLength = 4;
    function escape2(char) {
      return escapeCharacters[char] || "\\u".concat("0000".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));
    }
    function inspectString(string2, options) {
      return stringEscapeChars.test(string2) && (string2 = string2.replace(stringEscapeChars, escape2)), options.stylize("'".concat(truncate(string2, options.truncate - 2), "'"), "string");
    }
    function inspectSymbol(value) {
      return "description" in Symbol.prototype ? value.description ? "Symbol(".concat(value.description, ")") : "Symbol()" : value.toString();
    }
    var getPromiseValue = function() {
      return "Promise{…}";
    };
    try {
      var _process$binding = process.binding("util"), getPromiseDetails = _process$binding.getPromiseDetails, kPending = _process$binding.kPending, kRejected = _process$binding.kRejected;
      Array.isArray(getPromiseDetails(Promise.resolve())) && (getPromiseValue = function(value, options) {
        var _getPromiseDetails = getPromiseDetails(value), _getPromiseDetails2 = _slicedToArray2(_getPromiseDetails, 2), state = _getPromiseDetails2[0], innerValue = _getPromiseDetails2[1];
        return state === kPending ? "Promise{<pending>}" : "Promise".concat(state === kRejected ? "!" : "", "{").concat(options.inspect(innerValue, options), "}");
      });
    } catch {
    }
    var inspectPromise = getPromiseValue;
    function inspectObject(object, options) {
      var properties2 = Object.getOwnPropertyNames(object), symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];
      if (properties2.length === 0 && symbols.length === 0) return "{}";
      if (options.truncate -= 4, options.seen = options.seen || [], options.seen.indexOf(object) >= 0) return "[Circular]";
      options.seen.push(object);
      var propertyContents = inspectList(properties2.map(function(key) {
        return [key, object[key]];
      }), options, inspectProperty), symbolContents = inspectList(symbols.map(function(key) {
        return [key, object[key]];
      }), options, inspectProperty);
      options.seen.pop();
      var sep = "";
      return propertyContents && symbolContents && (sep = ", "), "{ ".concat(propertyContents).concat(sep).concat(symbolContents, " }");
    }
    var toStringTag = typeof Symbol < "u" && Symbol.toStringTag ? Symbol.toStringTag : false;
    function inspectClass(value, options) {
      var name = "";
      return toStringTag && toStringTag in value && (name = value[toStringTag]), name = name || getFuncName_1(value.constructor), (!name || name === "_class") && (name = "<Anonymous Class>"), options.truncate -= name.length, "".concat(name).concat(inspectObject(value, options));
    }
    function inspectArguments(args, options) {
      return args.length === 0 ? "Arguments[]" : (options.truncate -= 13, "Arguments[ ".concat(inspectList(args, options), " ]"));
    }
    var errorKeys = ["stack", "line", "column", "name", "message", "fileName", "lineNumber", "columnNumber", "number", "description"];
    function inspectObject$1(error, options) {
      var properties2 = Object.getOwnPropertyNames(error).filter(function(key) {
        return errorKeys.indexOf(key) === -1;
      }), name = error.name;
      options.truncate -= name.length;
      var message = "";
      typeof error.message == "string" ? message = truncate(error.message, options.truncate) : properties2.unshift("message"), message = message ? ": ".concat(message) : "", options.truncate -= message.length + 5;
      var propertyContents = inspectList(properties2.map(function(key) {
        return [key, error[key]];
      }), options, inspectProperty);
      return "".concat(name).concat(message).concat(propertyContents ? " { ".concat(propertyContents, " }") : "");
    }
    function inspectAttribute(_ref, options) {
      var _ref2 = _slicedToArray2(_ref, 2), key = _ref2[0], value = _ref2[1];
      return options.truncate -= 3, value ? "".concat(options.stylize(key, "yellow"), "=").concat(options.stylize('"'.concat(value, '"'), "string")) : "".concat(options.stylize(key, "yellow"));
    }
    function inspectHTMLCollection(collection, options) {
      return inspectList(collection, options, inspectHTML, `
`);
    }
    function inspectHTML(element, options) {
      var properties2 = element.getAttributeNames(), name = element.tagName.toLowerCase(), head = options.stylize("<".concat(name), "special"), headClose = options.stylize(">", "special"), tail = options.stylize("</".concat(name, ">"), "special");
      options.truncate -= name.length * 2 + 5;
      var propertyContents = "";
      properties2.length > 0 && (propertyContents += " ", propertyContents += inspectList(properties2.map(function(key) {
        return [key, element.getAttribute(key)];
      }), options, inspectAttribute, " ")), options.truncate -= propertyContents.length;
      var truncate2 = options.truncate, children = inspectHTMLCollection(element.children, options);
      return children && children.length > truncate2 && (children = "".concat(truncator, "(").concat(element.children.length, ")")), "".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);
    }
    var symbolsSupported = typeof Symbol == "function" && typeof Symbol.for == "function", chaiInspect = symbolsSupported ? Symbol.for("chai/inspect") : "@@chai/inspect", nodeInspect = false;
    try {
      var nodeUtil = __require("util");
      nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;
    } catch {
      nodeInspect = false;
    }
    function FakeMap() {
      this.key = "chai/loupe__" + Math.random() + Date.now();
    }
    FakeMap.prototype = { get: function(key) {
      return key[this.key];
    }, has: function(key) {
      return this.key in key;
    }, set: function(key, value) {
      Object.isExtensible(key) && Object.defineProperty(key, this.key, { value, configurable: true });
    } };
    var constructorMap = new (typeof WeakMap == "function" ? WeakMap : FakeMap)(), stringTagMap = {}, baseTypesMap = { undefined: function(value, options) {
      return options.stylize("undefined", "undefined");
    }, null: function(value, options) {
      return options.stylize(null, "null");
    }, boolean: function(value, options) {
      return options.stylize(value, "boolean");
    }, Boolean: function(value, options) {
      return options.stylize(value, "boolean");
    }, number: inspectNumber, Number: inspectNumber, bigint: inspectBigInt, BigInt: inspectBigInt, string: inspectString, String: inspectString, function: inspectFunction, Function: inspectFunction, symbol: inspectSymbol, Symbol: inspectSymbol, Array: inspectArray, Date: inspectDate, Map: inspectMap, Set: inspectSet, RegExp: inspectRegExp, Promise: inspectPromise, WeakSet: function(value, options) {
      return options.stylize("WeakSet{…}", "special");
    }, WeakMap: function(value, options) {
      return options.stylize("WeakMap{…}", "special");
    }, Arguments: inspectArguments, Int8Array: inspectTypedArray, Uint8Array: inspectTypedArray, Uint8ClampedArray: inspectTypedArray, Int16Array: inspectTypedArray, Uint16Array: inspectTypedArray, Int32Array: inspectTypedArray, Uint32Array: inspectTypedArray, Float32Array: inspectTypedArray, Float64Array: inspectTypedArray, Generator: function() {
      return "";
    }, DataView: function() {
      return "";
    }, ArrayBuffer: function() {
      return "";
    }, Error: inspectObject$1, HTMLCollection: inspectHTMLCollection, NodeList: inspectHTMLCollection }, inspectCustom = function(value, options, type3) {
      return chaiInspect in value && typeof value[chaiInspect] == "function" ? value[chaiInspect](options) : nodeInspect && nodeInspect in value && typeof value[nodeInspect] == "function" ? value[nodeInspect](options.depth, options) : "inspect" in value && typeof value.inspect == "function" ? value.inspect(options.depth, options) : "constructor" in value && constructorMap.has(value.constructor) ? constructorMap.get(value.constructor)(value, options) : stringTagMap[type3] ? stringTagMap[type3](value, options) : "";
    }, toString$1 = Object.prototype.toString;
    function inspect3(value, options) {
      options = normaliseOptions(options), options.inspect = inspect3;
      var _options = options, customInspect = _options.customInspect, type3 = value === null ? "null" : _typeof5(value);
      if (type3 === "object" && (type3 = toString$1.call(value).slice(8, -1)), baseTypesMap[type3]) return baseTypesMap[type3](value, options);
      if (customInspect && value) {
        var output = inspectCustom(value, options, type3);
        if (output) return typeof output == "string" ? output : inspect3(output, options);
      }
      var proto = value ? Object.getPrototypeOf(value) : false;
      return proto === Object.prototype || proto === null ? inspectObject(value, options) : value && typeof HTMLElement == "function" && value instanceof HTMLElement ? inspectHTML(value, options) : "constructor" in value ? value.constructor !== Object ? inspectClass(value, options) : inspectObject(value, options) : value === Object(value) ? inspectObject(value, options) : options.stylize(String(value), type3);
    }
    function registerConstructor(constructor, inspector) {
      return constructorMap.has(constructor) ? false : (constructorMap.set(constructor, inspector), true);
    }
    function registerStringTag(stringTag, inspector) {
      return stringTag in stringTagMap ? false : (stringTagMap[stringTag] = inspector, true);
    }
    var custom = chaiInspect;
    exports2.custom = custom, exports2.default = inspect3, exports2.inspect = inspect3, exports2.registerConstructor = registerConstructor, exports2.registerStringTag = registerStringTag, Object.defineProperty(exports2, "__esModule", { value: true });
  });
} });
var require_config = __commonJS({ "../../node_modules/chai/lib/chai/config.js"(exports, module2) {
  module2.exports = { includeStack: false, showDiff: true, truncateThreshold: 40, useProxy: true, proxyExcludedKeys: ["then", "catch", "inspect", "toJSON"], deepEqual: null };
} });
var require_inspect = __commonJS({ "../../node_modules/chai/lib/chai/utils/inspect.js"(exports, module2) {
  require_get_func_name();
  var loupe2 = require_loupe(), config3 = require_config();
  module2.exports = inspect3;
  function inspect3(obj, showHidden, depth, colors) {
    var options = { colors, depth: typeof depth > "u" ? 2 : depth, showHidden, truncate: config3.truncateThreshold ? config3.truncateThreshold : 1 / 0 };
    return loupe2.inspect(obj, options);
  }
} });
var require_objDisplay = __commonJS({ "../../node_modules/chai/lib/chai/utils/objDisplay.js"(exports, module2) {
  var inspect3 = require_inspect(), config3 = require_config();
  module2.exports = function(obj) {
    var str = inspect3(obj), type3 = Object.prototype.toString.call(obj);
    if (config3.truncateThreshold && str.length >= config3.truncateThreshold) {
      if (type3 === "[object Function]") return !obj.name || obj.name === "" ? "[Function]" : "[Function: " + obj.name + "]";
      if (type3 === "[object Array]") return "[ Array(" + obj.length + ") ]";
      if (type3 === "[object Object]") {
        var keys22 = Object.keys(obj), kstr = keys22.length > 2 ? keys22.splice(0, 2).join(", ") + ", ..." : keys22.join(", ");
        return "{ Object (" + kstr + ") }";
      } else return str;
    } else return str;
  };
} });
var require_getMessage = __commonJS({ "../../node_modules/chai/lib/chai/utils/getMessage.js"(exports, module2) {
  var flag = require_flag(), getActual = require_getActual(), objDisplay2 = require_objDisplay();
  module2.exports = function(obj, args) {
    var negate = flag(obj, "negate"), val = flag(obj, "object"), expected = args[3], actual = getActual(obj, args), msg = negate ? args[2] : args[1], flagMsg = flag(obj, "message");
    return typeof msg == "function" && (msg = msg()), msg = msg || "", msg = msg.replace(/#\{this\}/g, function() {
      return objDisplay2(val);
    }).replace(/#\{act\}/g, function() {
      return objDisplay2(actual);
    }).replace(/#\{exp\}/g, function() {
      return objDisplay2(expected);
    }), flagMsg ? flagMsg + ": " + msg : msg;
  };
} });
var require_transferFlags = __commonJS({ "../../node_modules/chai/lib/chai/utils/transferFlags.js"(exports, module2) {
  module2.exports = function(assertion, object, includeAll) {
    var flags = assertion.__flags || (assertion.__flags = /* @__PURE__ */ Object.create(null));
    object.__flags || (object.__flags = /* @__PURE__ */ Object.create(null)), includeAll = arguments.length === 3 ? includeAll : true;
    for (var flag in flags) (includeAll || flag !== "object" && flag !== "ssfi" && flag !== "lockSsfi" && flag != "message") && (object.__flags[flag] = flags[flag]);
  };
} });
var require_deep_eql = __commonJS({ "../../node_modules/deep-eql/index.js"(exports, module2) {
  var type3 = require_type_detect();
  function FakeMap() {
    this._key = "chai/deep-eql__" + Math.random() + Date.now();
  }
  FakeMap.prototype = { get: function(key) {
    return key[this._key];
  }, set: function(key, value) {
    Object.isExtensible(key) && Object.defineProperty(key, this._key, { value, configurable: true });
  } };
  var MemoizeMap = typeof WeakMap == "function" ? WeakMap : FakeMap;
  function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
    if (!memoizeMap || isPrimitive2(leftHandOperand) || isPrimitive2(rightHandOperand)) return null;
    var leftHandMap = memoizeMap.get(leftHandOperand);
    if (leftHandMap) {
      var result = leftHandMap.get(rightHandOperand);
      if (typeof result == "boolean") return result;
    }
    return null;
  }
  function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
    if (!(!memoizeMap || isPrimitive2(leftHandOperand) || isPrimitive2(rightHandOperand))) {
      var leftHandMap = memoizeMap.get(leftHandOperand);
      leftHandMap ? leftHandMap.set(rightHandOperand, result) : (leftHandMap = new MemoizeMap(), leftHandMap.set(rightHandOperand, result), memoizeMap.set(leftHandOperand, leftHandMap));
    }
  }
  module2.exports = deepEqual;
  module2.exports.MemoizeMap = MemoizeMap;
  function deepEqual(leftHandOperand, rightHandOperand, options) {
    if (options && options.comparator) return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    return simpleResult !== null ? simpleResult : extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }
  function simpleEqual(leftHandOperand, rightHandOperand) {
    return leftHandOperand === rightHandOperand ? leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand : leftHandOperand !== leftHandOperand && rightHandOperand !== rightHandOperand ? true : isPrimitive2(leftHandOperand) || isPrimitive2(rightHandOperand) ? false : null;
  }
  function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
    options = options || {}, options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
    var comparator = options && options.comparator, memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
    if (memoizeResultLeft !== null) return memoizeResultLeft;
    var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
    if (memoizeResultRight !== null) return memoizeResultRight;
    if (comparator) {
      var comparatorResult = comparator(leftHandOperand, rightHandOperand);
      if (comparatorResult === false || comparatorResult === true) return memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult), comparatorResult;
      var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
      if (simpleResult !== null) return simpleResult;
    }
    var leftHandType = type3(leftHandOperand);
    if (leftHandType !== type3(rightHandOperand)) return memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false), false;
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
    var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
    return memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result), result;
  }
  function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
    switch (leftHandType) {
      case "String":
      case "Number":
      case "Boolean":
      case "Date":
        return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
      case "Promise":
      case "Symbol":
      case "function":
      case "WeakMap":
      case "WeakSet":
        return leftHandOperand === rightHandOperand;
      case "Error":
        return keysEqual(leftHandOperand, rightHandOperand, ["name", "message", "code"], options);
      case "Arguments":
      case "Int8Array":
      case "Uint8Array":
      case "Uint8ClampedArray":
      case "Int16Array":
      case "Uint16Array":
      case "Int32Array":
      case "Uint32Array":
      case "Float32Array":
      case "Float64Array":
      case "Array":
        return iterableEqual(leftHandOperand, rightHandOperand, options);
      case "RegExp":
        return regexpEqual(leftHandOperand, rightHandOperand);
      case "Generator":
        return generatorEqual(leftHandOperand, rightHandOperand, options);
      case "DataView":
        return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
      case "ArrayBuffer":
        return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
      case "Set":
        return entriesEqual(leftHandOperand, rightHandOperand, options);
      case "Map":
        return entriesEqual(leftHandOperand, rightHandOperand, options);
      case "Temporal.PlainDate":
      case "Temporal.PlainTime":
      case "Temporal.PlainDateTime":
      case "Temporal.Instant":
      case "Temporal.ZonedDateTime":
      case "Temporal.PlainYearMonth":
      case "Temporal.PlainMonthDay":
        return leftHandOperand.equals(rightHandOperand);
      case "Temporal.Duration":
        return leftHandOperand.total("nanoseconds") === rightHandOperand.total("nanoseconds");
      case "Temporal.TimeZone":
      case "Temporal.Calendar":
        return leftHandOperand.toString() === rightHandOperand.toString();
      default:
        return objectEqual(leftHandOperand, rightHandOperand, options);
    }
  }
  function regexpEqual(leftHandOperand, rightHandOperand) {
    return leftHandOperand.toString() === rightHandOperand.toString();
  }
  function entriesEqual(leftHandOperand, rightHandOperand, options) {
    if (leftHandOperand.size !== rightHandOperand.size) return false;
    if (leftHandOperand.size === 0) return true;
    var leftHandItems = [], rightHandItems = [];
    return leftHandOperand.forEach(function(key, value) {
      leftHandItems.push([key, value]);
    }), rightHandOperand.forEach(function(key, value) {
      rightHandItems.push([key, value]);
    }), iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
  }
  function iterableEqual(leftHandOperand, rightHandOperand, options) {
    var length = leftHandOperand.length;
    if (length !== rightHandOperand.length) return false;
    if (length === 0) return true;
    for (var index = -1; ++index < length; ) if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) return false;
    return true;
  }
  function generatorEqual(leftHandOperand, rightHandOperand, options) {
    return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
  }
  function hasIteratorFunction(target) {
    return typeof Symbol < "u" && typeof target == "object" && typeof Symbol.iterator < "u" && typeof target[Symbol.iterator] == "function";
  }
  function getIteratorEntries(target) {
    if (hasIteratorFunction(target)) try {
      return getGeneratorEntries(target[Symbol.iterator]());
    } catch {
      return [];
    }
    return [];
  }
  function getGeneratorEntries(generator) {
    for (var generatorResult = generator.next(), accumulator = [generatorResult.value]; generatorResult.done === false; ) generatorResult = generator.next(), accumulator.push(generatorResult.value);
    return accumulator;
  }
  function getEnumerableKeys(target) {
    var keys22 = [];
    for (var key in target) keys22.push(key);
    return keys22;
  }
  function getEnumerableSymbols(target) {
    for (var keys22 = [], allKeys = Object.getOwnPropertySymbols(target), i2 = 0; i2 < allKeys.length; i2 += 1) {
      var key = allKeys[i2];
      Object.getOwnPropertyDescriptor(target, key).enumerable && keys22.push(key);
    }
    return keys22;
  }
  function keysEqual(leftHandOperand, rightHandOperand, keys22, options) {
    var length = keys22.length;
    if (length === 0) return true;
    for (var i2 = 0; i2 < length; i2 += 1) if (deepEqual(leftHandOperand[keys22[i2]], rightHandOperand[keys22[i2]], options) === false) return false;
    return true;
  }
  function objectEqual(leftHandOperand, rightHandOperand, options) {
    var leftHandKeys = getEnumerableKeys(leftHandOperand), rightHandKeys = getEnumerableKeys(rightHandOperand), leftHandSymbols = getEnumerableSymbols(leftHandOperand), rightHandSymbols = getEnumerableSymbols(rightHandOperand);
    if (leftHandKeys = leftHandKeys.concat(leftHandSymbols), rightHandKeys = rightHandKeys.concat(rightHandSymbols), leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) return iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false ? false : keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
    var leftHandEntries = getIteratorEntries(leftHandOperand), rightHandEntries = getIteratorEntries(rightHandOperand);
    return leftHandEntries.length && leftHandEntries.length === rightHandEntries.length ? (leftHandEntries.sort(), rightHandEntries.sort(), iterableEqual(leftHandEntries, rightHandEntries, options)) : leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0;
  }
  function isPrimitive2(value) {
    return value === null || typeof value != "object";
  }
  function mapSymbols(arr) {
    return arr.map(function(entry) {
      return typeof entry == "symbol" ? entry.toString() : entry;
    });
  }
} });
var require_isProxyEnabled = __commonJS({ "../../node_modules/chai/lib/chai/utils/isProxyEnabled.js"(exports, module2) {
  var config3 = require_config();
  module2.exports = function() {
    return config3.useProxy && typeof Proxy < "u" && typeof Reflect < "u";
  };
} });
var require_addProperty = __commonJS({ "../../node_modules/chai/lib/chai/utils/addProperty.js"(exports, module2) {
  var chai2 = require_chai(), flag = require_flag(), isProxyEnabled = require_isProxyEnabled(), transferFlags = require_transferFlags();
  module2.exports = function(ctx, name, getter) {
    getter = getter === void 0 ? function() {
    } : getter, Object.defineProperty(ctx, name, { get: function propertyGetter() {
      !isProxyEnabled() && !flag(this, "lockSsfi") && flag(this, "ssfi", propertyGetter);
      var result = getter.call(this);
      if (result !== void 0) return result;
      var newAssertion = new chai2.Assertion();
      return transferFlags(this, newAssertion), newAssertion;
    }, configurable: true });
  };
} });
var require_addLengthGuard = __commonJS({ "../../node_modules/chai/lib/chai/utils/addLengthGuard.js"(exports, module2) {
  var fnLengthDesc = Object.getOwnPropertyDescriptor(function() {
  }, "length");
  module2.exports = function(fn3, assertionName, isChainable) {
    return fnLengthDesc.configurable && Object.defineProperty(fn3, "length", { get: function() {
      throw Error(isChainable ? "Invalid Chai property: " + assertionName + '.length. Due to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.' : "Invalid Chai property: " + assertionName + '.length. See docs for proper usage of "' + assertionName + '".');
    } }), fn3;
  };
} });
var require_getProperties = __commonJS({ "../../node_modules/chai/lib/chai/utils/getProperties.js"(exports, module2) {
  module2.exports = function(object) {
    var result = Object.getOwnPropertyNames(object);
    function addProperty(property) {
      result.indexOf(property) === -1 && result.push(property);
    }
    for (var proto = Object.getPrototypeOf(object); proto !== null; ) Object.getOwnPropertyNames(proto).forEach(addProperty), proto = Object.getPrototypeOf(proto);
    return result;
  };
} });
var require_proxify = __commonJS({ "../../node_modules/chai/lib/chai/utils/proxify.js"(exports, module2) {
  var config3 = require_config(), flag = require_flag(), getProperties = require_getProperties(), isProxyEnabled = require_isProxyEnabled();
  var builtins = ["__flags", "__methods", "_obj", "assert"];
  module2.exports = function(obj, nonChainableMethodName) {
    return isProxyEnabled() ? new Proxy(obj, { get: function proxyGetter(target, property) {
      if (typeof property == "string" && config3.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
        if (nonChainableMethodName) throw Error("Invalid Chai property: " + nonChainableMethodName + "." + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
        var suggestion = null, suggestionDistance = 4;
        throw getProperties(target).forEach(function(prop) {
          if (!Object.prototype.hasOwnProperty(prop) && builtins.indexOf(prop) === -1) {
            var dist = stringDistanceCapped(property, prop, suggestionDistance);
            dist < suggestionDistance && (suggestion = prop, suggestionDistance = dist);
          }
        }), Error(suggestion !== null ? "Invalid Chai property: " + property + '. Did you mean "' + suggestion + '"?' : "Invalid Chai property: " + property);
      }
      return builtins.indexOf(property) === -1 && !flag(target, "lockSsfi") && flag(target, "ssfi", proxyGetter), Reflect.get(target, property);
    } }) : obj;
  };
  function stringDistanceCapped(strA, strB, cap) {
    if (Math.abs(strA.length - strB.length) >= cap) return cap;
    for (var memo = [], i2 = 0; i2 <= strA.length; i2++) memo[i2] = Array(strB.length + 1).fill(0), memo[i2][0] = i2;
    for (var j2 = 0; j2 < strB.length; j2++) memo[0][j2] = j2;
    for (var i2 = 1; i2 <= strA.length; i2++) for (var ch = strA.charCodeAt(i2 - 1), j2 = 1; j2 <= strB.length; j2++) {
      if (Math.abs(i2 - j2) >= cap) {
        memo[i2][j2] = cap;
        continue;
      }
      memo[i2][j2] = Math.min(memo[i2 - 1][j2] + 1, memo[i2][j2 - 1] + 1, memo[i2 - 1][j2 - 1] + (ch === strB.charCodeAt(j2 - 1) ? 0 : 1));
    }
    return memo[strA.length][strB.length];
  }
} });
var require_addMethod = __commonJS({ "../../node_modules/chai/lib/chai/utils/addMethod.js"(exports, module2) {
  var addLengthGuard = require_addLengthGuard(), chai2 = require_chai(), flag = require_flag(), proxify = require_proxify(), transferFlags = require_transferFlags();
  module2.exports = function(ctx, name, method) {
    var methodWrapper = function() {
      flag(this, "lockSsfi") || flag(this, "ssfi", methodWrapper);
      var result = method.apply(this, arguments);
      if (result !== void 0) return result;
      var newAssertion = new chai2.Assertion();
      return transferFlags(this, newAssertion), newAssertion;
    };
    addLengthGuard(methodWrapper, name, false), ctx[name] = proxify(methodWrapper, name);
  };
} });
var require_overwriteProperty = __commonJS({ "../../node_modules/chai/lib/chai/utils/overwriteProperty.js"(exports, module2) {
  var chai2 = require_chai(), flag = require_flag(), isProxyEnabled = require_isProxyEnabled(), transferFlags = require_transferFlags();
  module2.exports = function(ctx, name, getter) {
    var _get = Object.getOwnPropertyDescriptor(ctx, name), _super = function() {
    };
    _get && typeof _get.get == "function" && (_super = _get.get), Object.defineProperty(ctx, name, { get: function overwritingPropertyGetter() {
      !isProxyEnabled() && !flag(this, "lockSsfi") && flag(this, "ssfi", overwritingPropertyGetter);
      var origLockSsfi = flag(this, "lockSsfi");
      flag(this, "lockSsfi", true);
      var result = getter(_super).call(this);
      if (flag(this, "lockSsfi", origLockSsfi), result !== void 0) return result;
      var newAssertion = new chai2.Assertion();
      return transferFlags(this, newAssertion), newAssertion;
    }, configurable: true });
  };
} });
var require_overwriteMethod = __commonJS({ "../../node_modules/chai/lib/chai/utils/overwriteMethod.js"(exports, module2) {
  var addLengthGuard = require_addLengthGuard(), chai2 = require_chai(), flag = require_flag(), proxify = require_proxify(), transferFlags = require_transferFlags();
  module2.exports = function(ctx, name, method) {
    var _method = ctx[name], _super = function() {
      throw new Error(name + " is not a function");
    };
    _method && typeof _method == "function" && (_super = _method);
    var overwritingMethodWrapper = function() {
      flag(this, "lockSsfi") || flag(this, "ssfi", overwritingMethodWrapper);
      var origLockSsfi = flag(this, "lockSsfi");
      flag(this, "lockSsfi", true);
      var result = method(_super).apply(this, arguments);
      if (flag(this, "lockSsfi", origLockSsfi), result !== void 0) return result;
      var newAssertion = new chai2.Assertion();
      return transferFlags(this, newAssertion), newAssertion;
    };
    addLengthGuard(overwritingMethodWrapper, name, false), ctx[name] = proxify(overwritingMethodWrapper, name);
  };
} });
var require_addChainableMethod = __commonJS({ "../../node_modules/chai/lib/chai/utils/addChainableMethod.js"(exports, module2) {
  var addLengthGuard = require_addLengthGuard(), chai2 = require_chai(), flag = require_flag(), proxify = require_proxify(), transferFlags = require_transferFlags();
  var canSetPrototype = typeof Object.setPrototypeOf == "function", testFn = function() {
  }, excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {
    var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
    return typeof propDesc != "object" ? true : !propDesc.configurable;
  }), call = Function.prototype.call, apply = Function.prototype.apply;
  module2.exports = function(ctx, name, method, chainingBehavior) {
    typeof chainingBehavior != "function" && (chainingBehavior = function() {
    });
    var chainableBehavior = { method, chainingBehavior };
    ctx.__methods || (ctx.__methods = {}), ctx.__methods[name] = chainableBehavior, Object.defineProperty(ctx, name, { get: function() {
      chainableBehavior.chainingBehavior.call(this);
      var chainableMethodWrapper = function() {
        flag(this, "lockSsfi") || flag(this, "ssfi", chainableMethodWrapper);
        var result = chainableBehavior.method.apply(this, arguments);
        if (result !== void 0) return result;
        var newAssertion = new chai2.Assertion();
        return transferFlags(this, newAssertion), newAssertion;
      };
      if (addLengthGuard(chainableMethodWrapper, name, true), canSetPrototype) {
        var prototype = Object.create(this);
        prototype.call = call, prototype.apply = apply, Object.setPrototypeOf(chainableMethodWrapper, prototype);
      } else {
        var asserterNames = Object.getOwnPropertyNames(ctx);
        asserterNames.forEach(function(asserterName) {
          if (excludeNames.indexOf(asserterName) === -1) {
            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
            Object.defineProperty(chainableMethodWrapper, asserterName, pd);
          }
        });
      }
      return transferFlags(this, chainableMethodWrapper), proxify(chainableMethodWrapper);
    }, configurable: true });
  };
} });
var require_overwriteChainableMethod = __commonJS({ "../../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js"(exports, module2) {
  var chai2 = require_chai(), transferFlags = require_transferFlags();
  module2.exports = function(ctx, name, method, chainingBehavior) {
    var chainableBehavior = ctx.__methods[name], _chainingBehavior = chainableBehavior.chainingBehavior;
    chainableBehavior.chainingBehavior = function() {
      var result = chainingBehavior(_chainingBehavior).call(this);
      if (result !== void 0) return result;
      var newAssertion = new chai2.Assertion();
      return transferFlags(this, newAssertion), newAssertion;
    };
    var _method = chainableBehavior.method;
    chainableBehavior.method = function() {
      var result = method(_method).apply(this, arguments);
      if (result !== void 0) return result;
      var newAssertion = new chai2.Assertion();
      return transferFlags(this, newAssertion), newAssertion;
    };
  };
} });
var require_compareByInspect = __commonJS({ "../../node_modules/chai/lib/chai/utils/compareByInspect.js"(exports, module2) {
  var inspect3 = require_inspect();
  module2.exports = function(a, b2) {
    return inspect3(a) < inspect3(b2) ? -1 : 1;
  };
} });
var require_getOwnEnumerablePropertySymbols = __commonJS({ "../../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js"(exports, module2) {
  module2.exports = function(obj) {
    return typeof Object.getOwnPropertySymbols != "function" ? [] : Object.getOwnPropertySymbols(obj).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
    });
  };
} });
var require_getOwnEnumerableProperties = __commonJS({ "../../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js"(exports, module2) {
  var getOwnEnumerablePropertySymbols = require_getOwnEnumerablePropertySymbols();
  module2.exports = function(obj) {
    return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
  };
} });
var require_check_error = __commonJS({ "../../node_modules/check-error/index.js"(exports, module2) {
  var getFunctionName = require_get_func_name();
  function compatibleInstance(thrown, errorLike) {
    return errorLike instanceof Error && thrown === errorLike;
  }
  function compatibleConstructor(thrown, errorLike) {
    return errorLike instanceof Error ? thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor : errorLike.prototype instanceof Error || errorLike === Error ? thrown.constructor === errorLike || thrown instanceof errorLike : false;
  }
  function compatibleMessage(thrown, errMatcher) {
    var comparisonString = typeof thrown == "string" ? thrown : thrown.message;
    return errMatcher instanceof RegExp ? errMatcher.test(comparisonString) : typeof errMatcher == "string" ? comparisonString.indexOf(errMatcher) !== -1 : false;
  }
  function getConstructorName2(errorLike) {
    var constructorName = errorLike;
    if (errorLike instanceof Error) constructorName = getFunctionName(errorLike.constructor);
    else if (typeof errorLike == "function" && (constructorName = getFunctionName(errorLike), constructorName === "")) {
      var newConstructorName = getFunctionName(new errorLike());
      constructorName = newConstructorName || constructorName;
    }
    return constructorName;
  }
  function getMessage2(errorLike) {
    var msg = "";
    return errorLike && errorLike.message ? msg = errorLike.message : typeof errorLike == "string" && (msg = errorLike), msg;
  }
  module2.exports = { compatibleInstance, compatibleConstructor, compatibleMessage, getMessage: getMessage2, getConstructorName: getConstructorName2 };
} });
var require_isNaN = __commonJS({ "../../node_modules/chai/lib/chai/utils/isNaN.js"(exports, module2) {
  function isNaN2(value) {
    return value !== value;
  }
  module2.exports = Number.isNaN || isNaN2;
} });
var require_getOperator = __commonJS({ "../../node_modules/chai/lib/chai/utils/getOperator.js"(exports, module2) {
  var type3 = require_type_detect(), flag = require_flag();
  function isObjectType(obj) {
    var objectType = type3(obj), objectTypes = ["Array", "Object", "function"];
    return objectTypes.indexOf(objectType) !== -1;
  }
  module2.exports = function(obj, args) {
    var operator = flag(obj, "operator"), negate = flag(obj, "negate"), expected = args[3], msg = negate ? args[2] : args[1];
    if (operator) return operator;
    if (typeof msg == "function" && (msg = msg()), msg = msg || "", !!msg && !/\shave\s/.test(msg)) {
      var isObject2 = isObjectType(expected);
      return /\snot\s/.test(msg) ? isObject2 ? "notDeepStrictEqual" : "notStrictEqual" : isObject2 ? "deepStrictEqual" : "strictEqual";
    }
  };
} });
var require_utils = __commonJS({ "../../node_modules/chai/lib/chai/utils/index.js"(exports) {
  var pathval = require_pathval();
  exports.test = require_test();
  exports.type = require_type_detect();
  exports.expectTypes = require_expectTypes();
  exports.getMessage = require_getMessage();
  exports.getActual = require_getActual();
  exports.inspect = require_inspect();
  exports.objDisplay = require_objDisplay();
  exports.flag = require_flag();
  exports.transferFlags = require_transferFlags();
  exports.eql = require_deep_eql();
  exports.getPathInfo = pathval.getPathInfo;
  exports.hasProperty = pathval.hasProperty;
  exports.getName = require_get_func_name();
  exports.addProperty = require_addProperty();
  exports.addMethod = require_addMethod();
  exports.overwriteProperty = require_overwriteProperty();
  exports.overwriteMethod = require_overwriteMethod();
  exports.addChainableMethod = require_addChainableMethod();
  exports.overwriteChainableMethod = require_overwriteChainableMethod();
  exports.compareByInspect = require_compareByInspect();
  exports.getOwnEnumerablePropertySymbols = require_getOwnEnumerablePropertySymbols();
  exports.getOwnEnumerableProperties = require_getOwnEnumerableProperties();
  exports.checkError = require_check_error();
  exports.proxify = require_proxify();
  exports.addLengthGuard = require_addLengthGuard();
  exports.isProxyEnabled = require_isProxyEnabled();
  exports.isNaN = require_isNaN();
  exports.getOperator = require_getOperator();
} });
var require_assertion = __commonJS({ "../../node_modules/chai/lib/chai/assertion.js"(exports, module2) {
  var config3 = require_config();
  module2.exports = function(_chai, util2) {
    var AssertionError2 = _chai.AssertionError, flag = util2.flag;
    _chai.Assertion = Assertion2;
    function Assertion2(obj, msg, ssfi, lockSsfi) {
      return flag(this, "ssfi", ssfi || Assertion2), flag(this, "lockSsfi", lockSsfi), flag(this, "object", obj), flag(this, "message", msg), flag(this, "eql", config3.deepEqual || util2.eql), util2.proxify(this);
    }
    Object.defineProperty(Assertion2, "includeStack", { get: function() {
      return console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."), config3.includeStack;
    }, set: function(value) {
      console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."), config3.includeStack = value;
    } }), Object.defineProperty(Assertion2, "showDiff", { get: function() {
      return console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."), config3.showDiff;
    }, set: function(value) {
      console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."), config3.showDiff = value;
    } }), Assertion2.addProperty = function(name, fn3) {
      util2.addProperty(this.prototype, name, fn3);
    }, Assertion2.addMethod = function(name, fn3) {
      util2.addMethod(this.prototype, name, fn3);
    }, Assertion2.addChainableMethod = function(name, fn3, chainingBehavior) {
      util2.addChainableMethod(this.prototype, name, fn3, chainingBehavior);
    }, Assertion2.overwriteProperty = function(name, fn3) {
      util2.overwriteProperty(this.prototype, name, fn3);
    }, Assertion2.overwriteMethod = function(name, fn3) {
      util2.overwriteMethod(this.prototype, name, fn3);
    }, Assertion2.overwriteChainableMethod = function(name, fn3, chainingBehavior) {
      util2.overwriteChainableMethod(this.prototype, name, fn3, chainingBehavior);
    }, Assertion2.prototype.assert = function(expr, msg, negateMsg, expected, _actual, showDiff) {
      var ok = util2.test(this, arguments);
      if (showDiff !== false && (showDiff = true), expected === void 0 && _actual === void 0 && (showDiff = false), config3.showDiff !== true && (showDiff = false), !ok) {
        msg = util2.getMessage(this, arguments);
        var actual = util2.getActual(this, arguments), assertionErrorObjectProperties = { actual, expected, showDiff }, operator = util2.getOperator(this, arguments);
        throw operator && (assertionErrorObjectProperties.operator = operator), new AssertionError2(msg, assertionErrorObjectProperties, config3.includeStack ? this.assert : flag(this, "ssfi"));
      }
    };
    Object.defineProperty(Assertion2.prototype, "_obj", { get: function() {
      return flag(this, "object");
    }, set: function(val) {
      flag(this, "object", val);
    } });
  };
} });
var require_assertions = __commonJS({ "../../node_modules/chai/lib/chai/core/assertions.js"(exports, module2) {
  module2.exports = function(chai2, _2) {
    var Assertion2 = chai2.Assertion, AssertionError2 = chai2.AssertionError, flag = _2.flag;
    ["to", "be", "been", "is", "and", "has", "have", "with", "that", "which", "at", "of", "same", "but", "does", "still", "also"].forEach(function(chain) {
      Assertion2.addProperty(chain);
    }), Assertion2.addProperty("not", function() {
      flag(this, "negate", true);
    }), Assertion2.addProperty("deep", function() {
      flag(this, "deep", true);
    }), Assertion2.addProperty("nested", function() {
      flag(this, "nested", true);
    }), Assertion2.addProperty("own", function() {
      flag(this, "own", true);
    }), Assertion2.addProperty("ordered", function() {
      flag(this, "ordered", true);
    }), Assertion2.addProperty("any", function() {
      flag(this, "any", true), flag(this, "all", false);
    }), Assertion2.addProperty("all", function() {
      flag(this, "all", true), flag(this, "any", false);
    });
    function an(type3, msg) {
      msg && flag(this, "message", msg), type3 = type3.toLowerCase();
      var obj = flag(this, "object"), article = ~["a", "e", "i", "o", "u"].indexOf(type3.charAt(0)) ? "an " : "a ";
      this.assert(type3 === _2.type(obj).toLowerCase(), "expected #{this} to be " + article + type3, "expected #{this} not to be " + article + type3);
    }
    Assertion2.addChainableMethod("an", an), Assertion2.addChainableMethod("a", an);
    function SameValueZero(a, b2) {
      return _2.isNaN(a) && _2.isNaN(b2) || a === b2;
    }
    function includeChainingBehavior() {
      flag(this, "contains", true);
    }
    function include(val, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), objType = _2.type(obj).toLowerCase(), flagMsg = flag(this, "message"), negate = flag(this, "negate"), ssfi = flag(this, "ssfi"), isDeep = flag(this, "deep"), descriptor = isDeep ? "deep " : "", isEql = isDeep ? flag(this, "eql") : SameValueZero;
      flagMsg = flagMsg ? flagMsg + ": " : "";
      var included = false;
      switch (objType) {
        case "string":
          included = obj.indexOf(val) !== -1;
          break;
        case "weakset":
          if (isDeep) throw new AssertionError2(flagMsg + "unable to use .deep.include with WeakSet", void 0, ssfi);
          included = obj.has(val);
          break;
        case "map":
          obj.forEach(function(item) {
            included = included || isEql(item, val);
          });
          break;
        case "set":
          isDeep ? obj.forEach(function(item) {
            included = included || isEql(item, val);
          }) : included = obj.has(val);
          break;
        case "array":
          isDeep ? included = obj.some(function(item) {
            return isEql(item, val);
          }) : included = obj.indexOf(val) !== -1;
          break;
        default:
          if (val !== Object(val)) throw new AssertionError2(flagMsg + "the given combination of arguments (" + objType + " and " + _2.type(val).toLowerCase() + ") is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a " + _2.type(val).toLowerCase(), void 0, ssfi);
          var props = Object.keys(val), firstErr = null, numErrs = 0;
          if (props.forEach(function(prop) {
            var propAssertion = new Assertion2(obj);
            if (_2.transferFlags(this, propAssertion, true), flag(propAssertion, "lockSsfi", true), !negate || props.length === 1) {
              propAssertion.property(prop, val[prop]);
              return;
            }
            try {
              propAssertion.property(prop, val[prop]);
            } catch (err) {
              if (!_2.checkError.compatibleConstructor(err, AssertionError2)) throw err;
              firstErr === null && (firstErr = err), numErrs++;
            }
          }, this), negate && props.length > 1 && numErrs === props.length) throw firstErr;
          return;
      }
      this.assert(included, "expected #{this} to " + descriptor + "include " + _2.inspect(val), "expected #{this} to not " + descriptor + "include " + _2.inspect(val));
    }
    Assertion2.addChainableMethod("include", include, includeChainingBehavior), Assertion2.addChainableMethod("contain", include, includeChainingBehavior), Assertion2.addChainableMethod("contains", include, includeChainingBehavior), Assertion2.addChainableMethod("includes", include, includeChainingBehavior), Assertion2.addProperty("ok", function() {
      this.assert(flag(this, "object"), "expected #{this} to be truthy", "expected #{this} to be falsy");
    }), Assertion2.addProperty("true", function() {
      this.assert(flag(this, "object") === true, "expected #{this} to be true", "expected #{this} to be false", !flag(this, "negate"));
    }), Assertion2.addProperty("false", function() {
      this.assert(flag(this, "object") === false, "expected #{this} to be false", "expected #{this} to be true", !!flag(this, "negate"));
    }), Assertion2.addProperty("null", function() {
      this.assert(flag(this, "object") === null, "expected #{this} to be null", "expected #{this} not to be null");
    }), Assertion2.addProperty("undefined", function() {
      this.assert(flag(this, "object") === void 0, "expected #{this} to be undefined", "expected #{this} not to be undefined");
    }), Assertion2.addProperty("NaN", function() {
      this.assert(_2.isNaN(flag(this, "object")), "expected #{this} to be NaN", "expected #{this} not to be NaN");
    });
    function assertExist() {
      var val = flag(this, "object");
      this.assert(val != null, "expected #{this} to exist", "expected #{this} to not exist");
    }
    Assertion2.addProperty("exist", assertExist), Assertion2.addProperty("exists", assertExist), Assertion2.addProperty("empty", function() {
      var val = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message"), itemsCount;
      switch (flagMsg = flagMsg ? flagMsg + ": " : "", _2.type(val).toLowerCase()) {
        case "array":
        case "string":
          itemsCount = val.length;
          break;
        case "map":
        case "set":
          itemsCount = val.size;
          break;
        case "weakmap":
        case "weakset":
          throw new AssertionError2(flagMsg + ".empty was passed a weak collection", void 0, ssfi);
        case "function":
          var msg = flagMsg + ".empty was passed a function " + _2.getName(val);
          throw new AssertionError2(msg.trim(), void 0, ssfi);
        default:
          if (val !== Object(val)) throw new AssertionError2(flagMsg + ".empty was passed non-string primitive " + _2.inspect(val), void 0, ssfi);
          itemsCount = Object.keys(val).length;
      }
      this.assert(itemsCount === 0, "expected #{this} to be empty", "expected #{this} not to be empty");
    });
    function checkArguments() {
      var obj = flag(this, "object"), type3 = _2.type(obj);
      this.assert(type3 === "Arguments", "expected #{this} to be arguments but got " + type3, "expected #{this} to not be arguments");
    }
    Assertion2.addProperty("arguments", checkArguments), Assertion2.addProperty("Arguments", checkArguments);
    function assertEqual(val, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object");
      if (flag(this, "deep")) {
        var prevLockSsfi = flag(this, "lockSsfi");
        flag(this, "lockSsfi", true), this.eql(val), flag(this, "lockSsfi", prevLockSsfi);
      } else this.assert(val === obj, "expected #{this} to equal #{exp}", "expected #{this} to not equal #{exp}", val, this._obj, true);
    }
    Assertion2.addMethod("equal", assertEqual), Assertion2.addMethod("equals", assertEqual), Assertion2.addMethod("eq", assertEqual);
    function assertEql(obj, msg) {
      msg && flag(this, "message", msg);
      var eql = flag(this, "eql");
      this.assert(eql(obj, flag(this, "object")), "expected #{this} to deeply equal #{exp}", "expected #{this} to not deeply equal #{exp}", obj, this._obj, true);
    }
    Assertion2.addMethod("eql", assertEql), Assertion2.addMethod("eqls", assertEql);
    function assertAbove(n2, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _2.type(obj).toLowerCase(), nType = _2.type(n2).toLowerCase(), errorMessage, shouldThrow = true;
      if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to above must be a date";
      else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to above must be a number";
      else if (!doLength && objType !== "date" && objType !== "number") {
        var printObj = objType === "string" ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
      } else shouldThrow = false;
      if (shouldThrow) throw new AssertionError2(errorMessage, void 0, ssfi);
      if (doLength) {
        var descriptor = "length", itemsCount;
        objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount > n2, "expected #{this} to have a " + descriptor + " above #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " above #{exp}", n2, itemsCount);
      } else this.assert(obj > n2, "expected #{this} to be above #{exp}", "expected #{this} to be at most #{exp}", n2);
    }
    Assertion2.addMethod("above", assertAbove), Assertion2.addMethod("gt", assertAbove), Assertion2.addMethod("greaterThan", assertAbove);
    function assertLeast(n2, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _2.type(obj).toLowerCase(), nType = _2.type(n2).toLowerCase(), errorMessage, shouldThrow = true;
      if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to least must be a date";
      else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to least must be a number";
      else if (!doLength && objType !== "date" && objType !== "number") {
        var printObj = objType === "string" ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
      } else shouldThrow = false;
      if (shouldThrow) throw new AssertionError2(errorMessage, void 0, ssfi);
      if (doLength) {
        var descriptor = "length", itemsCount;
        objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount >= n2, "expected #{this} to have a " + descriptor + " at least #{exp} but got #{act}", "expected #{this} to have a " + descriptor + " below #{exp}", n2, itemsCount);
      } else this.assert(obj >= n2, "expected #{this} to be at least #{exp}", "expected #{this} to be below #{exp}", n2);
    }
    Assertion2.addMethod("least", assertLeast), Assertion2.addMethod("gte", assertLeast), Assertion2.addMethod("greaterThanOrEqual", assertLeast);
    function assertBelow(n2, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _2.type(obj).toLowerCase(), nType = _2.type(n2).toLowerCase(), errorMessage, shouldThrow = true;
      if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to below must be a date";
      else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to below must be a number";
      else if (!doLength && objType !== "date" && objType !== "number") {
        var printObj = objType === "string" ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
      } else shouldThrow = false;
      if (shouldThrow) throw new AssertionError2(errorMessage, void 0, ssfi);
      if (doLength) {
        var descriptor = "length", itemsCount;
        objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount < n2, "expected #{this} to have a " + descriptor + " below #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " below #{exp}", n2, itemsCount);
      } else this.assert(obj < n2, "expected #{this} to be below #{exp}", "expected #{this} to be at least #{exp}", n2);
    }
    Assertion2.addMethod("below", assertBelow), Assertion2.addMethod("lt", assertBelow), Assertion2.addMethod("lessThan", assertBelow);
    function assertMost(n2, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _2.type(obj).toLowerCase(), nType = _2.type(n2).toLowerCase(), errorMessage, shouldThrow = true;
      if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to most must be a date";
      else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to most must be a number";
      else if (!doLength && objType !== "date" && objType !== "number") {
        var printObj = objType === "string" ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
      } else shouldThrow = false;
      if (shouldThrow) throw new AssertionError2(errorMessage, void 0, ssfi);
      if (doLength) {
        var descriptor = "length", itemsCount;
        objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount <= n2, "expected #{this} to have a " + descriptor + " at most #{exp} but got #{act}", "expected #{this} to have a " + descriptor + " above #{exp}", n2, itemsCount);
      } else this.assert(obj <= n2, "expected #{this} to be at most #{exp}", "expected #{this} to be above #{exp}", n2);
    }
    Assertion2.addMethod("most", assertMost), Assertion2.addMethod("lte", assertMost), Assertion2.addMethod("lessThanOrEqual", assertMost), Assertion2.addMethod("within", function(start, finish, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _2.type(obj).toLowerCase(), startType = _2.type(start).toLowerCase(), finishType = _2.type(finish).toLowerCase(), errorMessage, shouldThrow = true, range = startType === "date" && finishType === "date" ? start.toISOString() + ".." + finish.toISOString() : start + ".." + finish;
      if (doLength && objType !== "map" && objType !== "set" && new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), !doLength && objType === "date" && (startType !== "date" || finishType !== "date")) errorMessage = msgPrefix + "the arguments to within must be dates";
      else if ((startType !== "number" || finishType !== "number") && (doLength || objType === "number")) errorMessage = msgPrefix + "the arguments to within must be numbers";
      else if (!doLength && objType !== "date" && objType !== "number") {
        var printObj = objType === "string" ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
      } else shouldThrow = false;
      if (shouldThrow) throw new AssertionError2(errorMessage, void 0, ssfi);
      if (doLength) {
        var descriptor = "length", itemsCount;
        objType === "map" || objType === "set" ? (descriptor = "size", itemsCount = obj.size) : itemsCount = obj.length, this.assert(itemsCount >= start && itemsCount <= finish, "expected #{this} to have a " + descriptor + " within " + range, "expected #{this} to not have a " + descriptor + " within " + range);
      } else this.assert(obj >= start && obj <= finish, "expected #{this} to be within " + range, "expected #{this} to not be within " + range);
    });
    function assertInstanceOf(constructor, msg) {
      msg && flag(this, "message", msg);
      var target = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message");
      try {
        var isInstanceOf = target instanceof constructor;
      } catch (err) {
        throw err instanceof TypeError ? (flagMsg = flagMsg ? flagMsg + ": " : "", new AssertionError2(flagMsg + "The instanceof assertion needs a constructor but " + _2.type(constructor) + " was given.", void 0, ssfi)) : err;
      }
      var name = _2.getName(constructor);
      name === null && (name = "an unnamed constructor"), this.assert(isInstanceOf, "expected #{this} to be an instance of " + name, "expected #{this} to not be an instance of " + name);
    }
    Assertion2.addMethod("instanceof", assertInstanceOf), Assertion2.addMethod("instanceOf", assertInstanceOf);
    function assertProperty(name, val, msg) {
      msg && flag(this, "message", msg);
      var isNested = flag(this, "nested"), isOwn = flag(this, "own"), flagMsg = flag(this, "message"), obj = flag(this, "object"), ssfi = flag(this, "ssfi"), nameType = typeof name;
      if (flagMsg = flagMsg ? flagMsg + ": " : "", isNested) {
        if (nameType !== "string") throw new AssertionError2(flagMsg + "the argument to property must be a string when using nested syntax", void 0, ssfi);
      } else if (nameType !== "string" && nameType !== "number" && nameType !== "symbol") throw new AssertionError2(flagMsg + "the argument to property must be a string, number, or symbol", void 0, ssfi);
      if (isNested && isOwn) throw new AssertionError2(flagMsg + 'The "nested" and "own" flags cannot be combined.', void 0, ssfi);
      if (obj == null) throw new AssertionError2(flagMsg + "Target cannot be null or undefined.", void 0, ssfi);
      var isDeep = flag(this, "deep"), negate = flag(this, "negate"), pathInfo = isNested ? _2.getPathInfo(obj, name) : null, value = isNested ? pathInfo.value : obj[name], isEql = isDeep ? flag(this, "eql") : (val1, val2) => val1 === val2, descriptor = "";
      isDeep && (descriptor += "deep "), isOwn && (descriptor += "own "), isNested && (descriptor += "nested "), descriptor += "property ";
      var hasProperty;
      isOwn ? hasProperty = Object.prototype.hasOwnProperty.call(obj, name) : isNested ? hasProperty = pathInfo.exists : hasProperty = _2.hasProperty(obj, name), (!negate || arguments.length === 1) && this.assert(hasProperty, "expected #{this} to have " + descriptor + _2.inspect(name), "expected #{this} to not have " + descriptor + _2.inspect(name)), arguments.length > 1 && this.assert(hasProperty && isEql(val, value), "expected #{this} to have " + descriptor + _2.inspect(name) + " of #{exp}, but got #{act}", "expected #{this} to not have " + descriptor + _2.inspect(name) + " of #{act}", val, value), flag(this, "object", value);
    }
    Assertion2.addMethod("property", assertProperty);
    function assertOwnProperty(name, value, msg) {
      flag(this, "own", true), assertProperty.apply(this, arguments);
    }
    Assertion2.addMethod("ownProperty", assertOwnProperty), Assertion2.addMethod("haveOwnProperty", assertOwnProperty);
    function assertOwnPropertyDescriptor(name, descriptor, msg) {
      typeof descriptor == "string" && (msg = descriptor, descriptor = null), msg && flag(this, "message", msg);
      var obj = flag(this, "object"), actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name), eql = flag(this, "eql");
      actualDescriptor && descriptor ? this.assert(eql(descriptor, actualDescriptor), "expected the own property descriptor for " + _2.inspect(name) + " on #{this} to match " + _2.inspect(descriptor) + ", got " + _2.inspect(actualDescriptor), "expected the own property descriptor for " + _2.inspect(name) + " on #{this} to not match " + _2.inspect(descriptor), descriptor, actualDescriptor, true) : this.assert(actualDescriptor, "expected #{this} to have an own property descriptor for " + _2.inspect(name), "expected #{this} to not have an own property descriptor for " + _2.inspect(name)), flag(this, "object", actualDescriptor);
    }
    Assertion2.addMethod("ownPropertyDescriptor", assertOwnPropertyDescriptor), Assertion2.addMethod("haveOwnPropertyDescriptor", assertOwnPropertyDescriptor);
    function assertLengthChain() {
      flag(this, "doLength", true);
    }
    function assertLength(n2, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), objType = _2.type(obj).toLowerCase(), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi"), descriptor = "length", itemsCount;
      switch (objType) {
        case "map":
        case "set":
          descriptor = "size", itemsCount = obj.size;
          break;
        default:
          new Assertion2(obj, flagMsg, ssfi, true).to.have.property("length"), itemsCount = obj.length;
      }
      this.assert(itemsCount == n2, "expected #{this} to have a " + descriptor + " of #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " of #{act}", n2, itemsCount);
    }
    Assertion2.addChainableMethod("length", assertLength, assertLengthChain), Assertion2.addChainableMethod("lengthOf", assertLength, assertLengthChain);
    function assertMatch(re2, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object");
      this.assert(re2.exec(obj), "expected #{this} to match " + re2, "expected #{this} not to match " + re2);
    }
    Assertion2.addMethod("match", assertMatch), Assertion2.addMethod("matches", assertMatch), Assertion2.addMethod("string", function(str, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
      new Assertion2(obj, flagMsg, ssfi, true).is.a("string"), this.assert(~obj.indexOf(str), "expected #{this} to contain " + _2.inspect(str), "expected #{this} to not contain " + _2.inspect(str));
    });
    function assertKeys(keys22) {
      var obj = flag(this, "object"), objType = _2.type(obj), keysType = _2.type(keys22), ssfi = flag(this, "ssfi"), isDeep = flag(this, "deep"), str, deepStr = "", actual, ok = true, flagMsg = flag(this, "message");
      flagMsg = flagMsg ? flagMsg + ": " : "";
      var mixedArgsMsg = flagMsg + "when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments";
      if (objType === "Map" || objType === "Set") deepStr = isDeep ? "deeply " : "", actual = [], obj.forEach(function(val, key) {
        actual.push(key);
      }), keysType !== "Array" && (keys22 = Array.prototype.slice.call(arguments));
      else {
        switch (actual = _2.getOwnEnumerableProperties(obj), keysType) {
          case "Array":
            if (arguments.length > 1) throw new AssertionError2(mixedArgsMsg, void 0, ssfi);
            break;
          case "Object":
            if (arguments.length > 1) throw new AssertionError2(mixedArgsMsg, void 0, ssfi);
            keys22 = Object.keys(keys22);
            break;
          default:
            keys22 = Array.prototype.slice.call(arguments);
        }
        keys22 = keys22.map(function(val) {
          return typeof val == "symbol" ? val : String(val);
        });
      }
      if (!keys22.length) throw new AssertionError2(flagMsg + "keys required", void 0, ssfi);
      var len = keys22.length, any = flag(this, "any"), all = flag(this, "all"), expected = keys22, isEql = isDeep ? flag(this, "eql") : (val1, val2) => val1 === val2;
      if (!any && !all && (all = true), any && (ok = expected.some(function(expectedKey) {
        return actual.some(function(actualKey) {
          return isEql(expectedKey, actualKey);
        });
      })), all && (ok = expected.every(function(expectedKey) {
        return actual.some(function(actualKey) {
          return isEql(expectedKey, actualKey);
        });
      }), flag(this, "contains") || (ok = ok && keys22.length == actual.length)), len > 1) {
        keys22 = keys22.map(function(key) {
          return _2.inspect(key);
        });
        var last = keys22.pop();
        all && (str = keys22.join(", ") + ", and " + last), any && (str = keys22.join(", ") + ", or " + last);
      } else str = _2.inspect(keys22[0]);
      str = (len > 1 ? "keys " : "key ") + str, str = (flag(this, "contains") ? "contain " : "have ") + str, this.assert(ok, "expected #{this} to " + deepStr + str, "expected #{this} to not " + deepStr + str, expected.slice(0).sort(_2.compareByInspect), actual.sort(_2.compareByInspect), true);
    }
    Assertion2.addMethod("keys", assertKeys), Assertion2.addMethod("key", assertKeys);
    function assertThrows(errorLike, errMsgMatcher, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message"), negate = flag(this, "negate") || false;
      new Assertion2(obj, flagMsg, ssfi, true).is.a("function"), (errorLike instanceof RegExp || typeof errorLike == "string") && (errMsgMatcher = errorLike, errorLike = null);
      var caughtErr;
      try {
        obj();
      } catch (err) {
        caughtErr = err;
      }
      var everyArgIsUndefined = errorLike === void 0 && errMsgMatcher === void 0, everyArgIsDefined = !!(errorLike && errMsgMatcher), errorLikeFail = false, errMsgMatcherFail = false;
      if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
        var errorLikeString = "an error";
        errorLike instanceof Error ? errorLikeString = "#{exp}" : errorLike && (errorLikeString = _2.checkError.getConstructorName(errorLike)), this.assert(caughtErr, "expected #{this} to throw " + errorLikeString, "expected #{this} to not throw an error but #{act} was thrown", errorLike && errorLike.toString(), caughtErr instanceof Error ? caughtErr.toString() : typeof caughtErr == "string" ? caughtErr : caughtErr && _2.checkError.getConstructorName(caughtErr));
      }
      if (errorLike && caughtErr) {
        if (errorLike instanceof Error) {
          var isCompatibleInstance = _2.checkError.compatibleInstance(caughtErr, errorLike);
          isCompatibleInstance === negate && (everyArgIsDefined && negate ? errorLikeFail = true : this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr && !negate ? " but #{act} was thrown" : ""), errorLike.toString(), caughtErr.toString()));
        }
        var isCompatibleConstructor = _2.checkError.compatibleConstructor(caughtErr, errorLike);
        isCompatibleConstructor === negate && (everyArgIsDefined && negate ? errorLikeFail = true : this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr ? " but #{act} was thrown" : ""), errorLike instanceof Error ? errorLike.toString() : errorLike && _2.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _2.checkError.getConstructorName(caughtErr)));
      }
      if (caughtErr && errMsgMatcher !== void 0 && errMsgMatcher !== null) {
        var placeholder = "including";
        errMsgMatcher instanceof RegExp && (placeholder = "matching");
        var isCompatibleMessage = _2.checkError.compatibleMessage(caughtErr, errMsgMatcher);
        isCompatibleMessage === negate && (everyArgIsDefined && negate ? errMsgMatcherFail = true : this.assert(negate, "expected #{this} to throw error " + placeholder + " #{exp} but got #{act}", "expected #{this} to throw error not " + placeholder + " #{exp}", errMsgMatcher, _2.checkError.getMessage(caughtErr)));
      }
      errorLikeFail && errMsgMatcherFail && this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr ? " but #{act} was thrown" : ""), errorLike instanceof Error ? errorLike.toString() : errorLike && _2.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _2.checkError.getConstructorName(caughtErr)), flag(this, "object", caughtErr);
    }
    Assertion2.addMethod("throw", assertThrows), Assertion2.addMethod("throws", assertThrows), Assertion2.addMethod("Throw", assertThrows);
    function respondTo(method, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), itself = flag(this, "itself"), context = typeof obj == "function" && !itself ? obj.prototype[method] : obj[method];
      this.assert(typeof context == "function", "expected #{this} to respond to " + _2.inspect(method), "expected #{this} to not respond to " + _2.inspect(method));
    }
    Assertion2.addMethod("respondTo", respondTo), Assertion2.addMethod("respondsTo", respondTo), Assertion2.addProperty("itself", function() {
      flag(this, "itself", true);
    });
    function satisfy(matcher, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), result = matcher(obj);
      this.assert(result, "expected #{this} to satisfy " + _2.objDisplay(matcher), "expected #{this} to not satisfy" + _2.objDisplay(matcher), !flag(this, "negate"), result);
    }
    Assertion2.addMethod("satisfy", satisfy), Assertion2.addMethod("satisfies", satisfy);
    function closeTo(expected, delta, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
      if (new Assertion2(obj, flagMsg, ssfi, true).is.a("number"), typeof expected != "number" || typeof delta != "number") {
        flagMsg = flagMsg ? flagMsg + ": " : "";
        var deltaMessage = delta === void 0 ? ", and a delta is required" : "";
        throw new AssertionError2(flagMsg + "the arguments to closeTo or approximately must be numbers" + deltaMessage, void 0, ssfi);
      }
      this.assert(Math.abs(obj - expected) <= delta, "expected #{this} to be close to " + expected + " +/- " + delta, "expected #{this} not to be close to " + expected + " +/- " + delta);
    }
    Assertion2.addMethod("closeTo", closeTo), Assertion2.addMethod("approximately", closeTo);
    function isSubsetOf(subset, superset, cmp, contains, ordered) {
      if (!contains) {
        if (subset.length !== superset.length) return false;
        superset = superset.slice();
      }
      return subset.every(function(elem, idx) {
        if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
        if (!cmp) {
          var matchIdx = superset.indexOf(elem);
          return matchIdx === -1 ? false : (contains || superset.splice(matchIdx, 1), true);
        }
        return superset.some(function(elem2, matchIdx2) {
          return cmp(elem, elem2) ? (contains || superset.splice(matchIdx2, 1), true) : false;
        });
      });
    }
    Assertion2.addMethod("members", function(subset, msg) {
      msg && flag(this, "message", msg);
      var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
      new Assertion2(obj, flagMsg, ssfi, true).to.be.an("array"), new Assertion2(subset, flagMsg, ssfi, true).to.be.an("array");
      var contains = flag(this, "contains"), ordered = flag(this, "ordered"), subject, failMsg, failNegateMsg;
      contains ? (subject = ordered ? "an ordered superset" : "a superset", failMsg = "expected #{this} to be " + subject + " of #{exp}", failNegateMsg = "expected #{this} to not be " + subject + " of #{exp}") : (subject = ordered ? "ordered members" : "members", failMsg = "expected #{this} to have the same " + subject + " as #{exp}", failNegateMsg = "expected #{this} to not have the same " + subject + " as #{exp}");
      var cmp = flag(this, "deep") ? flag(this, "eql") : void 0;
      this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
    });
    function oneOf(list, msg) {
      msg && flag(this, "message", msg);
      var expected = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi"), contains = flag(this, "contains"), isDeep = flag(this, "deep"), eql = flag(this, "eql");
      new Assertion2(list, flagMsg, ssfi, true).to.be.an("array"), contains ? this.assert(list.some(function(possibility) {
        return expected.indexOf(possibility) > -1;
      }), "expected #{this} to contain one of #{exp}", "expected #{this} to not contain one of #{exp}", list, expected) : isDeep ? this.assert(list.some(function(possibility) {
        return eql(expected, possibility);
      }), "expected #{this} to deeply equal one of #{exp}", "expected #{this} to deeply equal one of #{exp}", list, expected) : this.assert(list.indexOf(expected) > -1, "expected #{this} to be one of #{exp}", "expected #{this} to not be one of #{exp}", list, expected);
    }
    Assertion2.addMethod("oneOf", oneOf);
    function assertChanges(subject, prop, msg) {
      msg && flag(this, "message", msg);
      var fn3 = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
      new Assertion2(fn3, flagMsg, ssfi, true).is.a("function");
      var initial;
      prop ? (new Assertion2(subject, flagMsg, ssfi, true).to.have.property(prop), initial = subject[prop]) : (new Assertion2(subject, flagMsg, ssfi, true).is.a("function"), initial = subject()), fn3();
      var final = prop == null ? subject() : subject[prop], msgObj = prop == null ? initial : "." + prop;
      flag(this, "deltaMsgObj", msgObj), flag(this, "initialDeltaValue", initial), flag(this, "finalDeltaValue", final), flag(this, "deltaBehavior", "change"), flag(this, "realDelta", final !== initial), this.assert(initial !== final, "expected " + msgObj + " to change", "expected " + msgObj + " to not change");
    }
    Assertion2.addMethod("change", assertChanges), Assertion2.addMethod("changes", assertChanges);
    function assertIncreases(subject, prop, msg) {
      msg && flag(this, "message", msg);
      var fn3 = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
      new Assertion2(fn3, flagMsg, ssfi, true).is.a("function");
      var initial;
      prop ? (new Assertion2(subject, flagMsg, ssfi, true).to.have.property(prop), initial = subject[prop]) : (new Assertion2(subject, flagMsg, ssfi, true).is.a("function"), initial = subject()), new Assertion2(initial, flagMsg, ssfi, true).is.a("number"), fn3();
      var final = prop == null ? subject() : subject[prop], msgObj = prop == null ? initial : "." + prop;
      flag(this, "deltaMsgObj", msgObj), flag(this, "initialDeltaValue", initial), flag(this, "finalDeltaValue", final), flag(this, "deltaBehavior", "increase"), flag(this, "realDelta", final - initial), this.assert(final - initial > 0, "expected " + msgObj + " to increase", "expected " + msgObj + " to not increase");
    }
    Assertion2.addMethod("increase", assertIncreases), Assertion2.addMethod("increases", assertIncreases);
    function assertDecreases(subject, prop, msg) {
      msg && flag(this, "message", msg);
      var fn3 = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
      new Assertion2(fn3, flagMsg, ssfi, true).is.a("function");
      var initial;
      prop ? (new Assertion2(subject, flagMsg, ssfi, true).to.have.property(prop), initial = subject[prop]) : (new Assertion2(subject, flagMsg, ssfi, true).is.a("function"), initial = subject()), new Assertion2(initial, flagMsg, ssfi, true).is.a("number"), fn3();
      var final = prop == null ? subject() : subject[prop], msgObj = prop == null ? initial : "." + prop;
      flag(this, "deltaMsgObj", msgObj), flag(this, "initialDeltaValue", initial), flag(this, "finalDeltaValue", final), flag(this, "deltaBehavior", "decrease"), flag(this, "realDelta", initial - final), this.assert(final - initial < 0, "expected " + msgObj + " to decrease", "expected " + msgObj + " to not decrease");
    }
    Assertion2.addMethod("decrease", assertDecreases), Assertion2.addMethod("decreases", assertDecreases);
    function assertDelta(delta, msg) {
      msg && flag(this, "message", msg);
      var msgObj = flag(this, "deltaMsgObj"), initial = flag(this, "initialDeltaValue"), final = flag(this, "finalDeltaValue"), behavior2 = flag(this, "deltaBehavior"), realDelta = flag(this, "realDelta"), expression;
      behavior2 === "change" ? expression = Math.abs(final - initial) === Math.abs(delta) : expression = realDelta === Math.abs(delta), this.assert(expression, "expected " + msgObj + " to " + behavior2 + " by " + delta, "expected " + msgObj + " to not " + behavior2 + " by " + delta);
    }
    Assertion2.addMethod("by", assertDelta), Assertion2.addProperty("extensible", function() {
      var obj = flag(this, "object"), isExtensible = obj === Object(obj) && Object.isExtensible(obj);
      this.assert(isExtensible, "expected #{this} to be extensible", "expected #{this} to not be extensible");
    }), Assertion2.addProperty("sealed", function() {
      var obj = flag(this, "object"), isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
      this.assert(isSealed, "expected #{this} to be sealed", "expected #{this} to not be sealed");
    }), Assertion2.addProperty("frozen", function() {
      var obj = flag(this, "object"), isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
      this.assert(isFrozen, "expected #{this} to be frozen", "expected #{this} to not be frozen");
    }), Assertion2.addProperty("finite", function(msg) {
      var obj = flag(this, "object");
      this.assert(typeof obj == "number" && isFinite(obj), "expected #{this} to be a finite number", "expected #{this} to not be a finite number");
    });
  };
} });
var require_expect = __commonJS({ "../../node_modules/chai/lib/chai/interface/expect.js"(exports, module2) {
  module2.exports = function(chai2, util2) {
    chai2.expect = function(val, message) {
      return new chai2.Assertion(val, message);
    }, chai2.expect.fail = function(actual, expected, message, operator) {
      throw arguments.length < 2 && (message = actual, actual = void 0), message = message || "expect.fail()", new chai2.AssertionError(message, { actual, expected, operator }, chai2.expect.fail);
    };
  };
} });
var require_should = __commonJS({ "../../node_modules/chai/lib/chai/interface/should.js"(exports, module2) {
  module2.exports = function(chai2, util2) {
    var Assertion2 = chai2.Assertion;
    function loadShould() {
      function shouldGetter() {
        return this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol == "function" && this instanceof Symbol || typeof BigInt == "function" && this instanceof BigInt ? new Assertion2(this.valueOf(), null, shouldGetter) : new Assertion2(this, null, shouldGetter);
      }
      function shouldSetter(value) {
        Object.defineProperty(this, "should", { value, enumerable: true, configurable: true, writable: true });
      }
      Object.defineProperty(Object.prototype, "should", { set: shouldSetter, get: shouldGetter, configurable: true });
      var should2 = {};
      return should2.fail = function(actual, expected, message, operator) {
        throw arguments.length < 2 && (message = actual, actual = void 0), message = message || "should.fail()", new chai2.AssertionError(message, { actual, expected, operator }, should2.fail);
      }, should2.equal = function(val1, val2, msg) {
        new Assertion2(val1, msg).to.equal(val2);
      }, should2.Throw = function(fn3, errt, errs, msg) {
        new Assertion2(fn3, msg).to.Throw(errt, errs);
      }, should2.exist = function(val, msg) {
        new Assertion2(val, msg).to.exist;
      }, should2.not = {}, should2.not.equal = function(val1, val2, msg) {
        new Assertion2(val1, msg).to.not.equal(val2);
      }, should2.not.Throw = function(fn3, errt, errs, msg) {
        new Assertion2(fn3, msg).to.not.Throw(errt, errs);
      }, should2.not.exist = function(val, msg) {
        new Assertion2(val, msg).to.not.exist;
      }, should2.throw = should2.Throw, should2.not.throw = should2.not.Throw, should2;
    }
    chai2.should = loadShould, chai2.Should = loadShould;
  };
} });
var require_assert = __commonJS({ "../../node_modules/chai/lib/chai/interface/assert.js"(exports, module2) {
  module2.exports = function(chai2, util2) {
    var Assertion2 = chai2.Assertion, flag = util2.flag;
    var assert2 = chai2.assert = function(express, errmsg) {
      var test2 = new Assertion2(null, null, chai2.assert, true);
      test2.assert(express, errmsg, "[ negation message unavailable ]");
    };
    assert2.fail = function(actual, expected, message, operator) {
      throw arguments.length < 2 && (message = actual, actual = void 0), message = message || "assert.fail()", new chai2.AssertionError(message, { actual, expected, operator }, assert2.fail);
    }, assert2.isOk = function(val, msg) {
      new Assertion2(val, msg, assert2.isOk, true).is.ok;
    }, assert2.isNotOk = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotOk, true).is.not.ok;
    }, assert2.equal = function(act, exp, msg) {
      var test2 = new Assertion2(act, msg, assert2.equal, true);
      test2.assert(exp == flag(test2, "object"), "expected #{this} to equal #{exp}", "expected #{this} to not equal #{act}", exp, act, true);
    }, assert2.notEqual = function(act, exp, msg) {
      var test2 = new Assertion2(act, msg, assert2.notEqual, true);
      test2.assert(exp != flag(test2, "object"), "expected #{this} to not equal #{exp}", "expected #{this} to equal #{act}", exp, act, true);
    }, assert2.strictEqual = function(act, exp, msg) {
      new Assertion2(act, msg, assert2.strictEqual, true).to.equal(exp);
    }, assert2.notStrictEqual = function(act, exp, msg) {
      new Assertion2(act, msg, assert2.notStrictEqual, true).to.not.equal(exp);
    }, assert2.deepEqual = assert2.deepStrictEqual = function(act, exp, msg) {
      new Assertion2(act, msg, assert2.deepEqual, true).to.eql(exp);
    }, assert2.notDeepEqual = function(act, exp, msg) {
      new Assertion2(act, msg, assert2.notDeepEqual, true).to.not.eql(exp);
    }, assert2.isAbove = function(val, abv, msg) {
      new Assertion2(val, msg, assert2.isAbove, true).to.be.above(abv);
    }, assert2.isAtLeast = function(val, atlst, msg) {
      new Assertion2(val, msg, assert2.isAtLeast, true).to.be.least(atlst);
    }, assert2.isBelow = function(val, blw, msg) {
      new Assertion2(val, msg, assert2.isBelow, true).to.be.below(blw);
    }, assert2.isAtMost = function(val, atmst, msg) {
      new Assertion2(val, msg, assert2.isAtMost, true).to.be.most(atmst);
    }, assert2.isTrue = function(val, msg) {
      new Assertion2(val, msg, assert2.isTrue, true).is.true;
    }, assert2.isNotTrue = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotTrue, true).to.not.equal(true);
    }, assert2.isFalse = function(val, msg) {
      new Assertion2(val, msg, assert2.isFalse, true).is.false;
    }, assert2.isNotFalse = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotFalse, true).to.not.equal(false);
    }, assert2.isNull = function(val, msg) {
      new Assertion2(val, msg, assert2.isNull, true).to.equal(null);
    }, assert2.isNotNull = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotNull, true).to.not.equal(null);
    }, assert2.isNaN = function(val, msg) {
      new Assertion2(val, msg, assert2.isNaN, true).to.be.NaN;
    }, assert2.isNotNaN = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotNaN, true).not.to.be.NaN;
    }, assert2.exists = function(val, msg) {
      new Assertion2(val, msg, assert2.exists, true).to.exist;
    }, assert2.notExists = function(val, msg) {
      new Assertion2(val, msg, assert2.notExists, true).to.not.exist;
    }, assert2.isUndefined = function(val, msg) {
      new Assertion2(val, msg, assert2.isUndefined, true).to.equal(void 0);
    }, assert2.isDefined = function(val, msg) {
      new Assertion2(val, msg, assert2.isDefined, true).to.not.equal(void 0);
    }, assert2.isFunction = function(val, msg) {
      new Assertion2(val, msg, assert2.isFunction, true).to.be.a("function");
    }, assert2.isNotFunction = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotFunction, true).to.not.be.a("function");
    }, assert2.isObject = function(val, msg) {
      new Assertion2(val, msg, assert2.isObject, true).to.be.a("object");
    }, assert2.isNotObject = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotObject, true).to.not.be.a("object");
    }, assert2.isArray = function(val, msg) {
      new Assertion2(val, msg, assert2.isArray, true).to.be.an("array");
    }, assert2.isNotArray = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotArray, true).to.not.be.an("array");
    }, assert2.isString = function(val, msg) {
      new Assertion2(val, msg, assert2.isString, true).to.be.a("string");
    }, assert2.isNotString = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotString, true).to.not.be.a("string");
    }, assert2.isNumber = function(val, msg) {
      new Assertion2(val, msg, assert2.isNumber, true).to.be.a("number");
    }, assert2.isNotNumber = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotNumber, true).to.not.be.a("number");
    }, assert2.isFinite = function(val, msg) {
      new Assertion2(val, msg, assert2.isFinite, true).to.be.finite;
    }, assert2.isBoolean = function(val, msg) {
      new Assertion2(val, msg, assert2.isBoolean, true).to.be.a("boolean");
    }, assert2.isNotBoolean = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotBoolean, true).to.not.be.a("boolean");
    }, assert2.typeOf = function(val, type3, msg) {
      new Assertion2(val, msg, assert2.typeOf, true).to.be.a(type3);
    }, assert2.notTypeOf = function(val, type3, msg) {
      new Assertion2(val, msg, assert2.notTypeOf, true).to.not.be.a(type3);
    }, assert2.instanceOf = function(val, type3, msg) {
      new Assertion2(val, msg, assert2.instanceOf, true).to.be.instanceOf(type3);
    }, assert2.notInstanceOf = function(val, type3, msg) {
      new Assertion2(val, msg, assert2.notInstanceOf, true).to.not.be.instanceOf(type3);
    }, assert2.include = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.include, true).include(inc);
    }, assert2.notInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.notInclude, true).not.include(inc);
    }, assert2.deepInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.deepInclude, true).deep.include(inc);
    }, assert2.notDeepInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.notDeepInclude, true).not.deep.include(inc);
    }, assert2.nestedInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.nestedInclude, true).nested.include(inc);
    }, assert2.notNestedInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.notNestedInclude, true).not.nested.include(inc);
    }, assert2.deepNestedInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.deepNestedInclude, true).deep.nested.include(inc);
    }, assert2.notDeepNestedInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.notDeepNestedInclude, true).not.deep.nested.include(inc);
    }, assert2.ownInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.ownInclude, true).own.include(inc);
    }, assert2.notOwnInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.notOwnInclude, true).not.own.include(inc);
    }, assert2.deepOwnInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.deepOwnInclude, true).deep.own.include(inc);
    }, assert2.notDeepOwnInclude = function(exp, inc, msg) {
      new Assertion2(exp, msg, assert2.notDeepOwnInclude, true).not.deep.own.include(inc);
    }, assert2.match = function(exp, re2, msg) {
      new Assertion2(exp, msg, assert2.match, true).to.match(re2);
    }, assert2.notMatch = function(exp, re2, msg) {
      new Assertion2(exp, msg, assert2.notMatch, true).to.not.match(re2);
    }, assert2.property = function(obj, prop, msg) {
      new Assertion2(obj, msg, assert2.property, true).to.have.property(prop);
    }, assert2.notProperty = function(obj, prop, msg) {
      new Assertion2(obj, msg, assert2.notProperty, true).to.not.have.property(prop);
    }, assert2.propertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.propertyVal, true).to.have.property(prop, val);
    }, assert2.notPropertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.notPropertyVal, true).to.not.have.property(prop, val);
    }, assert2.deepPropertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.deepPropertyVal, true).to.have.deep.property(prop, val);
    }, assert2.notDeepPropertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
    }, assert2.ownProperty = function(obj, prop, msg) {
      new Assertion2(obj, msg, assert2.ownProperty, true).to.have.own.property(prop);
    }, assert2.notOwnProperty = function(obj, prop, msg) {
      new Assertion2(obj, msg, assert2.notOwnProperty, true).to.not.have.own.property(prop);
    }, assert2.ownPropertyVal = function(obj, prop, value, msg) {
      new Assertion2(obj, msg, assert2.ownPropertyVal, true).to.have.own.property(prop, value);
    }, assert2.notOwnPropertyVal = function(obj, prop, value, msg) {
      new Assertion2(obj, msg, assert2.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
    }, assert2.deepOwnPropertyVal = function(obj, prop, value, msg) {
      new Assertion2(obj, msg, assert2.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
    }, assert2.notDeepOwnPropertyVal = function(obj, prop, value, msg) {
      new Assertion2(obj, msg, assert2.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
    }, assert2.nestedProperty = function(obj, prop, msg) {
      new Assertion2(obj, msg, assert2.nestedProperty, true).to.have.nested.property(prop);
    }, assert2.notNestedProperty = function(obj, prop, msg) {
      new Assertion2(obj, msg, assert2.notNestedProperty, true).to.not.have.nested.property(prop);
    }, assert2.nestedPropertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.nestedPropertyVal, true).to.have.nested.property(prop, val);
    }, assert2.notNestedPropertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
    }, assert2.deepNestedPropertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
    }, assert2.notDeepNestedPropertyVal = function(obj, prop, val, msg) {
      new Assertion2(obj, msg, assert2.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
    }, assert2.lengthOf = function(exp, len, msg) {
      new Assertion2(exp, msg, assert2.lengthOf, true).to.have.lengthOf(len);
    }, assert2.hasAnyKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.hasAnyKeys, true).to.have.any.keys(keys22);
    }, assert2.hasAllKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.hasAllKeys, true).to.have.all.keys(keys22);
    }, assert2.containsAllKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.containsAllKeys, true).to.contain.all.keys(keys22);
    }, assert2.doesNotHaveAnyKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys22);
    }, assert2.doesNotHaveAllKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.doesNotHaveAllKeys, true).to.not.have.all.keys(keys22);
    }, assert2.hasAnyDeepKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.hasAnyDeepKeys, true).to.have.any.deep.keys(keys22);
    }, assert2.hasAllDeepKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.hasAllDeepKeys, true).to.have.all.deep.keys(keys22);
    }, assert2.containsAllDeepKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.containsAllDeepKeys, true).to.contain.all.deep.keys(keys22);
    }, assert2.doesNotHaveAnyDeepKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys22);
    }, assert2.doesNotHaveAllDeepKeys = function(obj, keys22, msg) {
      new Assertion2(obj, msg, assert2.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys22);
    }, assert2.throws = function(fn3, errorLike, errMsgMatcher, msg) {
      (typeof errorLike == "string" || errorLike instanceof RegExp) && (errMsgMatcher = errorLike, errorLike = null);
      var assertErr = new Assertion2(fn3, msg, assert2.throws, true).to.throw(errorLike, errMsgMatcher);
      return flag(assertErr, "object");
    }, assert2.doesNotThrow = function(fn3, errorLike, errMsgMatcher, msg) {
      (typeof errorLike == "string" || errorLike instanceof RegExp) && (errMsgMatcher = errorLike, errorLike = null), new Assertion2(fn3, msg, assert2.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
    }, assert2.operator = function(val, operator, val2, msg) {
      var ok;
      switch (operator) {
        case "==":
          ok = val == val2;
          break;
        case "===":
          ok = val === val2;
          break;
        case ">":
          ok = val > val2;
          break;
        case ">=":
          ok = val >= val2;
          break;
        case "<":
          ok = val < val2;
          break;
        case "<=":
          ok = val <= val2;
          break;
        case "!=":
          ok = val != val2;
          break;
        case "!==":
          ok = val !== val2;
          break;
        default:
          throw msg = msg && msg + ": ", new chai2.AssertionError(msg + 'Invalid operator "' + operator + '"', void 0, assert2.operator);
      }
      var test2 = new Assertion2(ok, msg, assert2.operator, true);
      test2.assert(flag(test2, "object") === true, "expected " + util2.inspect(val) + " to be " + operator + " " + util2.inspect(val2), "expected " + util2.inspect(val) + " to not be " + operator + " " + util2.inspect(val2));
    }, assert2.closeTo = function(act, exp, delta, msg) {
      new Assertion2(act, msg, assert2.closeTo, true).to.be.closeTo(exp, delta);
    }, assert2.approximately = function(act, exp, delta, msg) {
      new Assertion2(act, msg, assert2.approximately, true).to.be.approximately(exp, delta);
    }, assert2.sameMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.sameMembers, true).to.have.same.members(set2);
    }, assert2.notSameMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.notSameMembers, true).to.not.have.same.members(set2);
    }, assert2.sameDeepMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.sameDeepMembers, true).to.have.same.deep.members(set2);
    }, assert2.notSameDeepMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
    }, assert2.sameOrderedMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.sameOrderedMembers, true).to.have.same.ordered.members(set2);
    }, assert2.notSameOrderedMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
    }, assert2.sameDeepOrderedMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
    }, assert2.notSameDeepOrderedMembers = function(set1, set2, msg) {
      new Assertion2(set1, msg, assert2.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
    }, assert2.includeMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.includeMembers, true).to.include.members(subset);
    }, assert2.notIncludeMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.notIncludeMembers, true).to.not.include.members(subset);
    }, assert2.includeDeepMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.includeDeepMembers, true).to.include.deep.members(subset);
    }, assert2.notIncludeDeepMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
    }, assert2.includeOrderedMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.includeOrderedMembers, true).to.include.ordered.members(subset);
    }, assert2.notIncludeOrderedMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
    }, assert2.includeDeepOrderedMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
    }, assert2.notIncludeDeepOrderedMembers = function(superset, subset, msg) {
      new Assertion2(superset, msg, assert2.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
    }, assert2.oneOf = function(inList, list, msg) {
      new Assertion2(inList, msg, assert2.oneOf, true).to.be.oneOf(list);
    }, assert2.changes = function(fn3, obj, prop, msg) {
      arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.changes, true).to.change(obj, prop);
    }, assert2.changesBy = function(fn3, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj == "function") {
        var tmpMsg = delta;
        delta = prop, msg = tmpMsg;
      } else arguments.length === 3 && (delta = prop, prop = null);
      new Assertion2(fn3, msg, assert2.changesBy, true).to.change(obj, prop).by(delta);
    }, assert2.doesNotChange = function(fn3, obj, prop, msg) {
      return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.doesNotChange, true).to.not.change(obj, prop);
    }, assert2.changesButNotBy = function(fn3, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj == "function") {
        var tmpMsg = delta;
        delta = prop, msg = tmpMsg;
      } else arguments.length === 3 && (delta = prop, prop = null);
      new Assertion2(fn3, msg, assert2.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
    }, assert2.increases = function(fn3, obj, prop, msg) {
      return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.increases, true).to.increase(obj, prop);
    }, assert2.increasesBy = function(fn3, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj == "function") {
        var tmpMsg = delta;
        delta = prop, msg = tmpMsg;
      } else arguments.length === 3 && (delta = prop, prop = null);
      new Assertion2(fn3, msg, assert2.increasesBy, true).to.increase(obj, prop).by(delta);
    }, assert2.doesNotIncrease = function(fn3, obj, prop, msg) {
      return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.doesNotIncrease, true).to.not.increase(obj, prop);
    }, assert2.increasesButNotBy = function(fn3, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj == "function") {
        var tmpMsg = delta;
        delta = prop, msg = tmpMsg;
      } else arguments.length === 3 && (delta = prop, prop = null);
      new Assertion2(fn3, msg, assert2.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
    }, assert2.decreases = function(fn3, obj, prop, msg) {
      return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.decreases, true).to.decrease(obj, prop);
    }, assert2.decreasesBy = function(fn3, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj == "function") {
        var tmpMsg = delta;
        delta = prop, msg = tmpMsg;
      } else arguments.length === 3 && (delta = prop, prop = null);
      new Assertion2(fn3, msg, assert2.decreasesBy, true).to.decrease(obj, prop).by(delta);
    }, assert2.doesNotDecrease = function(fn3, obj, prop, msg) {
      return arguments.length === 3 && typeof obj == "function" && (msg = prop, prop = null), new Assertion2(fn3, msg, assert2.doesNotDecrease, true).to.not.decrease(obj, prop);
    }, assert2.doesNotDecreaseBy = function(fn3, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj == "function") {
        var tmpMsg = delta;
        delta = prop, msg = tmpMsg;
      } else arguments.length === 3 && (delta = prop, prop = null);
      return new Assertion2(fn3, msg, assert2.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
    }, assert2.decreasesButNotBy = function(fn3, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj == "function") {
        var tmpMsg = delta;
        delta = prop, msg = tmpMsg;
      } else arguments.length === 3 && (delta = prop, prop = null);
      new Assertion2(fn3, msg, assert2.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
    };
    assert2.ifError = function(val) {
      if (val) throw val;
    }, assert2.isExtensible = function(obj, msg) {
      new Assertion2(obj, msg, assert2.isExtensible, true).to.be.extensible;
    }, assert2.isNotExtensible = function(obj, msg) {
      new Assertion2(obj, msg, assert2.isNotExtensible, true).to.not.be.extensible;
    }, assert2.isSealed = function(obj, msg) {
      new Assertion2(obj, msg, assert2.isSealed, true).to.be.sealed;
    }, assert2.isNotSealed = function(obj, msg) {
      new Assertion2(obj, msg, assert2.isNotSealed, true).to.not.be.sealed;
    }, assert2.isFrozen = function(obj, msg) {
      new Assertion2(obj, msg, assert2.isFrozen, true).to.be.frozen;
    }, assert2.isNotFrozen = function(obj, msg) {
      new Assertion2(obj, msg, assert2.isNotFrozen, true).to.not.be.frozen;
    }, assert2.isEmpty = function(val, msg) {
      new Assertion2(val, msg, assert2.isEmpty, true).to.be.empty;
    }, assert2.isNotEmpty = function(val, msg) {
      new Assertion2(val, msg, assert2.isNotEmpty, true).to.not.be.empty;
    };
    (function alias(name, as) {
      return assert2[as] = assert2[name], alias;
    })("isOk", "ok")("isNotOk", "notOk")("throws", "throw")("throws", "Throw")("isExtensible", "extensible")("isNotExtensible", "notExtensible")("isSealed", "sealed")("isNotSealed", "notSealed")("isFrozen", "frozen")("isNotFrozen", "notFrozen")("isEmpty", "empty")("isNotEmpty", "notEmpty");
  };
} });
var require_chai = __commonJS({ "../../node_modules/chai/lib/chai.js"(exports) {
  var used = [];
  exports.version = "4.3.8";
  exports.AssertionError = require_assertion_error();
  var util2 = require_utils();
  exports.use = function(fn3) {
    return ~used.indexOf(fn3) || (fn3(exports, util2), used.push(fn3)), exports;
  };
  exports.util = util2;
  var config3 = require_config();
  exports.config = config3;
  var assertion = require_assertion();
  exports.use(assertion);
  var core2 = require_assertions();
  exports.use(core2);
  var expect4 = require_expect();
  exports.use(expect4);
  var should2 = require_should();
  exports.use(should2);
  var assert2 = require_assert();
  exports.use(assert2);
} });
var require_chai2 = __commonJS({ "../../node_modules/chai/index.js"(exports, module2) {
  module2.exports = require_chai();
} });
var require_ansi_styles = __commonJS({ "../../node_modules/pretty-format/node_modules/ansi-styles/index.js"(exports, module2) {
  var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`, wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
  function assembleStyles() {
    let codes = /* @__PURE__ */ new Map(), styles = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
    styles.color.gray = styles.color.blackBright, styles.bgColor.bgGray = styles.bgColor.bgBlackBright, styles.color.grey = styles.color.blackBright, styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (let [groupName, group] of Object.entries(styles)) {
      for (let [styleName, style] of Object.entries(group)) styles[styleName] = { open: `\x1B[${style[0]}m`, close: `\x1B[${style[1]}m` }, group[styleName] = styles[styleName], codes.set(style[0], style[1]);
      Object.defineProperty(styles, groupName, { value: group, enumerable: false });
    }
    return Object.defineProperty(styles, "codes", { value: codes, enumerable: false }), styles.color.close = "\x1B[39m", styles.bgColor.close = "\x1B[49m", styles.color.ansi256 = wrapAnsi256(), styles.color.ansi16m = wrapAnsi16m(), styles.bgColor.ansi256 = wrapAnsi256(10), styles.bgColor.ansi16m = wrapAnsi16m(10), Object.defineProperties(styles, { rgbToAnsi256: { value: (red, green, blue) => red === green && green === blue ? red < 8 ? 16 : red > 248 ? 231 : Math.round((red - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5), enumerable: false }, hexToRgb: { value: (hex) => {
      let matches3 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
      if (!matches3) return [0, 0, 0];
      let { colorString } = matches3.groups;
      colorString.length === 3 && (colorString = colorString.split("").map((character) => character + character).join(""));
      let integer = Number.parseInt(colorString, 16);
      return [integer >> 16 & 255, integer >> 8 & 255, integer & 255];
    }, enumerable: false }, hexToAnsi256: { value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)), enumerable: false } }), styles;
  }
  Object.defineProperty(module2, "exports", { enumerable: true, get: assembleStyles });
} });
var require_collections = __commonJS({ "../../node_modules/pretty-format/build/collections.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.printIteratorEntries = printIteratorEntries2;
  exports.printIteratorValues = printIteratorValues2;
  exports.printListItems = printListItems2;
  exports.printObjectProperties = printObjectProperties2;
  var getKeysOfEnumerableProperties2 = (object, compareKeys) => {
    let rawKeys = Object.keys(object), keys22 = compareKeys !== null ? rawKeys.sort(compareKeys) : rawKeys;
    return Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(object).forEach((symbol) => {
      Object.getOwnPropertyDescriptor(object, symbol).enumerable && keys22.push(symbol);
    }), keys22;
  };
  function printIteratorEntries2(iterator, config3, indentation, depth, refs, printer2, separator = ": ") {
    let result = "", width = 0, current = iterator.next();
    if (!current.done) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (; !current.done; ) {
        if (result += indentationNext, width++ === config3.maxWidth) {
          result += "…";
          break;
        }
        let name = printer2(current.value[0], config3, indentationNext, depth, refs), value = printer2(current.value[1], config3, indentationNext, depth, refs);
        result += name + separator + value, current = iterator.next(), current.done ? config3.min || (result += ",") : result += `,${config3.spacingInner}`;
      }
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
  function printIteratorValues2(iterator, config3, indentation, depth, refs, printer2) {
    let result = "", width = 0, current = iterator.next();
    if (!current.done) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (; !current.done; ) {
        if (result += indentationNext, width++ === config3.maxWidth) {
          result += "…";
          break;
        }
        result += printer2(current.value, config3, indentationNext, depth, refs), current = iterator.next(), current.done ? config3.min || (result += ",") : result += `,${config3.spacingInner}`;
      }
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
  function printListItems2(list, config3, indentation, depth, refs, printer2) {
    let result = "";
    if (list.length) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (let i2 = 0; i2 < list.length; i2++) {
        if (result += indentationNext, i2 === config3.maxWidth) {
          result += "…";
          break;
        }
        i2 in list && (result += printer2(list[i2], config3, indentationNext, depth, refs)), i2 < list.length - 1 ? result += `,${config3.spacingInner}` : config3.min || (result += ",");
      }
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
  function printObjectProperties2(val, config3, indentation, depth, refs, printer2) {
    let result = "", keys22 = getKeysOfEnumerableProperties2(val, config3.compareKeys);
    if (keys22.length) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (let i2 = 0; i2 < keys22.length; i2++) {
        let key = keys22[i2], name = printer2(key, config3, indentationNext, depth, refs), value = printer2(val[key], config3, indentationNext, depth, refs);
        result += `${indentationNext + name}: ${value}`, i2 < keys22.length - 1 ? result += `,${config3.spacingInner}` : config3.min || (result += ",");
      }
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
} });
var require_AsymmetricMatcher = __commonJS({ "../../node_modules/pretty-format/build/plugins/AsymmetricMatcher.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _collections2 = require_collections(), Symbol2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, asymmetricMatcher2 = typeof Symbol2 == "function" && Symbol2.for ? Symbol2.for("jest.asymmetricMatcher") : 1267621, SPACE2 = " ", serialize2 = (val, config3, indentation, depth, refs, printer2) => {
    let stringedValue = val.toString();
    if (stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining") return ++depth > config3.maxDepth ? `[${stringedValue}]` : `${stringedValue + SPACE2}[${(0, _collections2.printListItems)(val.sample, config3, indentation, depth, refs, printer2)}]`;
    if (stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining") return ++depth > config3.maxDepth ? `[${stringedValue}]` : `${stringedValue + SPACE2}{${(0, _collections2.printObjectProperties)(val.sample, config3, indentation, depth, refs, printer2)}}`;
    if (stringedValue === "StringMatching" || stringedValue === "StringNotMatching" || stringedValue === "StringContaining" || stringedValue === "StringNotContaining") return stringedValue + SPACE2 + printer2(val.sample, config3, indentation, depth, refs);
    if (typeof val.toAsymmetricMatcher != "function") throw new Error(`Asymmetric matcher ${val.constructor.name} does not implement toAsymmetricMatcher()`);
    return val.toAsymmetricMatcher();
  };
  exports.serialize = serialize2;
  var test2 = (val) => val && val.$$typeof === asymmetricMatcher2;
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_DOMCollection = __commonJS({ "../../node_modules/pretty-format/build/plugins/DOMCollection.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _collections2 = require_collections(), SPACE2 = " ", OBJECT_NAMES2 = ["DOMStringMap", "NamedNodeMap"], ARRAY_REGEXP2 = /^(HTML\w*Collection|NodeList)$/, testName2 = (name) => OBJECT_NAMES2.indexOf(name) !== -1 || ARRAY_REGEXP2.test(name), test2 = (val) => val && val.constructor && !!val.constructor.name && testName2(val.constructor.name);
  exports.test = test2;
  var isNamedNodeMap2 = (collection) => collection.constructor.name === "NamedNodeMap", serialize2 = (collection, config3, indentation, depth, refs, printer2) => {
    let name = collection.constructor.name;
    return ++depth > config3.maxDepth ? `[${name}]` : (config3.min ? "" : name + SPACE2) + (OBJECT_NAMES2.indexOf(name) !== -1 ? `{${(0, _collections2.printObjectProperties)(isNamedNodeMap2(collection) ? Array.from(collection).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}) : { ...collection }, config3, indentation, depth, refs, printer2)}}` : `[${(0, _collections2.printListItems)(Array.from(collection), config3, indentation, depth, refs, printer2)}]`);
  };
  exports.serialize = serialize2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_escapeHTML = __commonJS({ "../../node_modules/pretty-format/build/plugins/lib/escapeHTML.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = escapeHTML2;
  function escapeHTML2(str) {
    return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
} });
var require_markup = __commonJS({ "../../node_modules/pretty-format/build/plugins/lib/markup.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.printText = exports.printProps = exports.printElementAsLeaf = exports.printElement = exports.printComment = exports.printChildren = void 0;
  var _escapeHTML2 = _interopRequireDefault2(require_escapeHTML());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var printProps2 = (keys22, props, config3, indentation, depth, refs, printer2) => {
    let indentationNext = indentation + config3.indent, colors = config3.colors;
    return keys22.map((key) => {
      let value = props[key], printed = printer2(value, config3, indentationNext, depth, refs);
      return typeof value != "string" && (printed.indexOf(`
`) !== -1 && (printed = config3.spacingOuter + indentationNext + printed + config3.spacingOuter + indentation), printed = `{${printed}}`), `${config3.spacingInner + indentation + colors.prop.open + key + colors.prop.close}=${colors.value.open}${printed}${colors.value.close}`;
    }).join("");
  };
  exports.printProps = printProps2;
  var printChildren2 = (children, config3, indentation, depth, refs, printer2) => children.map((child) => config3.spacingOuter + indentation + (typeof child == "string" ? printText2(child, config3) : printer2(child, config3, indentation, depth, refs))).join("");
  exports.printChildren = printChildren2;
  var printText2 = (text, config3) => {
    let contentColor = config3.colors.content;
    return contentColor.open + (0, _escapeHTML2.default)(text) + contentColor.close;
  };
  exports.printText = printText2;
  var printComment2 = (comment, config3) => {
    let commentColor = config3.colors.comment;
    return `${commentColor.open}<!--${(0, _escapeHTML2.default)(comment)}-->${commentColor.close}`;
  };
  exports.printComment = printComment2;
  var printElement2 = (type3, printedProps, printedChildren, config3, indentation) => {
    let tagColor = config3.colors.tag;
    return `${tagColor.open}<${type3}${printedProps && tagColor.close + printedProps + config3.spacingOuter + indentation + tagColor.open}${printedChildren ? `>${tagColor.close}${printedChildren}${config3.spacingOuter}${indentation}${tagColor.open}</${type3}` : `${printedProps && !config3.min ? "" : " "}/`}>${tagColor.close}`;
  };
  exports.printElement = printElement2;
  var printElementAsLeaf2 = (type3, config3) => {
    let tagColor = config3.colors.tag;
    return `${tagColor.open}<${type3}${tagColor.close} …${tagColor.open} />${tagColor.close}`;
  };
  exports.printElementAsLeaf = printElementAsLeaf2;
} });
var require_DOMElement = __commonJS({ "../../node_modules/pretty-format/build/plugins/DOMElement.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _markup2 = require_markup(), ELEMENT_NODE2 = 1, TEXT_NODE2 = 3, COMMENT_NODE2 = 8, FRAGMENT_NODE2 = 11, ELEMENT_REGEXP2 = /^((HTML|SVG)\w*)?Element$/, testHasAttribute2 = (val) => {
    try {
      return typeof val.hasAttribute == "function" && val.hasAttribute("is");
    } catch {
      return false;
    }
  }, testNode2 = (val) => {
    let constructorName = val.constructor.name, { nodeType, tagName } = val, isCustomElement2 = typeof tagName == "string" && tagName.includes("-") || testHasAttribute2(val);
    return nodeType === ELEMENT_NODE2 && (ELEMENT_REGEXP2.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE2 && constructorName === "Text" || nodeType === COMMENT_NODE2 && constructorName === "Comment" || nodeType === FRAGMENT_NODE2 && constructorName === "DocumentFragment";
  }, test2 = (val) => {
    var _a2;
    return ((_a2 = val == null ? void 0 : val.constructor) == null ? void 0 : _a2.name) && testNode2(val);
  };
  exports.test = test2;
  function nodeIsText2(node) {
    return node.nodeType === TEXT_NODE2;
  }
  function nodeIsComment2(node) {
    return node.nodeType === COMMENT_NODE2;
  }
  function nodeIsFragment2(node) {
    return node.nodeType === FRAGMENT_NODE2;
  }
  var serialize2 = (node, config3, indentation, depth, refs, printer2) => {
    if (nodeIsText2(node)) return (0, _markup2.printText)(node.data, config3);
    if (nodeIsComment2(node)) return (0, _markup2.printComment)(node.data, config3);
    let type3 = nodeIsFragment2(node) ? "DocumentFragment" : node.tagName.toLowerCase();
    return ++depth > config3.maxDepth ? (0, _markup2.printElementAsLeaf)(type3, config3) : (0, _markup2.printElement)(type3, (0, _markup2.printProps)(nodeIsFragment2(node) ? [] : Array.from(node.attributes, (attr) => attr.name).sort(), nodeIsFragment2(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}), config3, indentation + config3.indent, depth, refs, printer2), (0, _markup2.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config3, indentation + config3.indent, depth, refs, printer2), config3, indentation);
  };
  exports.serialize = serialize2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_Immutable = __commonJS({ "../../node_modules/pretty-format/build/plugins/Immutable.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _collections2 = require_collections(), IS_ITERABLE_SENTINEL2 = "@@__IMMUTABLE_ITERABLE__@@", IS_LIST_SENTINEL2 = "@@__IMMUTABLE_LIST__@@", IS_KEYED_SENTINEL2 = "@@__IMMUTABLE_KEYED__@@", IS_MAP_SENTINEL2 = "@@__IMMUTABLE_MAP__@@", IS_ORDERED_SENTINEL2 = "@@__IMMUTABLE_ORDERED__@@", IS_RECORD_SENTINEL2 = "@@__IMMUTABLE_RECORD__@@", IS_SEQ_SENTINEL2 = "@@__IMMUTABLE_SEQ__@@", IS_SET_SENTINEL2 = "@@__IMMUTABLE_SET__@@", IS_STACK_SENTINEL2 = "@@__IMMUTABLE_STACK__@@", getImmutableName2 = (name) => `Immutable.${name}`, printAsLeaf2 = (name) => `[${name}]`, SPACE2 = " ", LAZY2 = "…", printImmutableEntries2 = (val, config3, indentation, depth, refs, printer2, type3) => ++depth > config3.maxDepth ? printAsLeaf2(getImmutableName2(type3)) : `${getImmutableName2(type3) + SPACE2}{${(0, _collections2.printIteratorEntries)(val.entries(), config3, indentation, depth, refs, printer2)}}`;
  function getRecordEntries2(val) {
    let i2 = 0;
    return { next() {
      if (i2 < val._keys.length) {
        let key = val._keys[i2++];
        return { done: false, value: [key, val.get(key)] };
      }
      return { done: true, value: void 0 };
    } };
  }
  var printImmutableRecord2 = (val, config3, indentation, depth, refs, printer2) => {
    let name = getImmutableName2(val._name || "Record");
    return ++depth > config3.maxDepth ? printAsLeaf2(name) : `${name + SPACE2}{${(0, _collections2.printIteratorEntries)(getRecordEntries2(val), config3, indentation, depth, refs, printer2)}}`;
  }, printImmutableSeq2 = (val, config3, indentation, depth, refs, printer2) => {
    let name = getImmutableName2("Seq");
    return ++depth > config3.maxDepth ? printAsLeaf2(name) : val[IS_KEYED_SENTINEL2] ? `${name + SPACE2}{${val._iter || val._object ? (0, _collections2.printIteratorEntries)(val.entries(), config3, indentation, depth, refs, printer2) : LAZY2}}` : `${name + SPACE2}[${val._iter || val._array || val._collection || val._iterable ? (0, _collections2.printIteratorValues)(val.values(), config3, indentation, depth, refs, printer2) : LAZY2}]`;
  }, printImmutableValues2 = (val, config3, indentation, depth, refs, printer2, type3) => ++depth > config3.maxDepth ? printAsLeaf2(getImmutableName2(type3)) : `${getImmutableName2(type3) + SPACE2}[${(0, _collections2.printIteratorValues)(val.values(), config3, indentation, depth, refs, printer2)}]`, serialize2 = (val, config3, indentation, depth, refs, printer2) => val[IS_MAP_SENTINEL2] ? printImmutableEntries2(val, config3, indentation, depth, refs, printer2, val[IS_ORDERED_SENTINEL2] ? "OrderedMap" : "Map") : val[IS_LIST_SENTINEL2] ? printImmutableValues2(val, config3, indentation, depth, refs, printer2, "List") : val[IS_SET_SENTINEL2] ? printImmutableValues2(val, config3, indentation, depth, refs, printer2, val[IS_ORDERED_SENTINEL2] ? "OrderedSet" : "Set") : val[IS_STACK_SENTINEL2] ? printImmutableValues2(val, config3, indentation, depth, refs, printer2, "Stack") : val[IS_SEQ_SENTINEL2] ? printImmutableSeq2(val, config3, indentation, depth, refs, printer2) : printImmutableRecord2(val, config3, indentation, depth, refs, printer2);
  exports.serialize = serialize2;
  var test2 = (val) => val && (val[IS_ITERABLE_SENTINEL2] === true || val[IS_RECORD_SENTINEL2] === true);
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_react_is_development = __commonJS({ "../../node_modules/pretty-format/node_modules/react-is/cjs/react-is.development.js"(exports) {
  (function() {
    var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), enableScopeAPI = false, enableCacheElement = false, enableTransitionTracing = false, enableLegacyHidden = false, enableDebugTracing = false, REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type3) {
      return !!(typeof type3 == "string" || typeof type3 == "function" || type3 === REACT_FRAGMENT_TYPE || type3 === REACT_PROFILER_TYPE || enableDebugTracing || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type3 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type3 == "object" && type3 !== null && (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_MODULE_REFERENCE || type3.getModuleId !== void 0));
    }
    function typeOf(object) {
      if (typeof object == "object" && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type3 = object.type;
            switch (type3) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type3;
              default:
                var $$typeofType = type3 && type3.$$typeof;
                switch ($$typeofType) {
                  case REACT_SERVER_CONTEXT_TYPE:
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
    }
    var ContextConsumer = REACT_CONTEXT_TYPE, ContextProvider = REACT_PROVIDER_TYPE, Element2 = REACT_ELEMENT_TYPE, ForwardRef = REACT_FORWARD_REF_TYPE, Fragment = REACT_FRAGMENT_TYPE, Lazy = REACT_LAZY_TYPE, Memo = REACT_MEMO_TYPE, Portal = REACT_PORTAL_TYPE, Profiler = REACT_PROFILER_TYPE, StrictMode = REACT_STRICT_MODE_TYPE, Suspense = REACT_SUSPENSE_TYPE, SuspenseList = REACT_SUSPENSE_LIST_TYPE, hasWarnedAboutDeprecatedIsAsyncMode = false, hasWarnedAboutDeprecatedIsConcurrentMode = false;
    function isAsyncMode(object) {
      return hasWarnedAboutDeprecatedIsAsyncMode || (hasWarnedAboutDeprecatedIsAsyncMode = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), false;
    }
    function isConcurrentMode(object) {
      return hasWarnedAboutDeprecatedIsConcurrentMode || (hasWarnedAboutDeprecatedIsConcurrentMode = true, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement5(object) {
      return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    function isSuspenseList(object) {
      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    }
    exports.ContextConsumer = ContextConsumer, exports.ContextProvider = ContextProvider, exports.Element = Element2, exports.ForwardRef = ForwardRef, exports.Fragment = Fragment, exports.Lazy = Lazy, exports.Memo = Memo, exports.Portal = Portal, exports.Profiler = Profiler, exports.StrictMode = StrictMode, exports.Suspense = Suspense, exports.SuspenseList = SuspenseList, exports.isAsyncMode = isAsyncMode, exports.isConcurrentMode = isConcurrentMode, exports.isContextConsumer = isContextConsumer, exports.isContextProvider = isContextProvider, exports.isElement = isElement5, exports.isForwardRef = isForwardRef, exports.isFragment = isFragment, exports.isLazy = isLazy, exports.isMemo = isMemo, exports.isPortal = isPortal, exports.isProfiler = isProfiler, exports.isStrictMode = isStrictMode, exports.isSuspense = isSuspense, exports.isSuspenseList = isSuspenseList, exports.isValidElementType = isValidElementType, exports.typeOf = typeOf;
  })();
} });
var require_react_is = __commonJS({ "../../node_modules/pretty-format/node_modules/react-is/index.js"(exports, module2) {
  module2.exports = require_react_is_development();
} });
var require_ReactElement = __commonJS({ "../../node_modules/pretty-format/build/plugins/ReactElement.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var ReactIs2 = _interopRequireWildcard2(require_react_is()), _markup2 = require_markup();
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap != "function") return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj != "object" && typeof obj != "function") return { default: obj };
    var cache = _getRequireWildcardCache2(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];
    }
    return newObj.default = obj, cache && cache.set(obj, newObj), newObj;
  }
  var getChildren2 = (arg, children = []) => (Array.isArray(arg) ? arg.forEach((item) => {
    getChildren2(item, children);
  }) : arg != null && arg !== false && children.push(arg), children), getType3 = (element) => {
    let type3 = element.type;
    if (typeof type3 == "string") return type3;
    if (typeof type3 == "function") return type3.displayName || type3.name || "Unknown";
    if (ReactIs2.isFragment(element)) return "React.Fragment";
    if (ReactIs2.isSuspense(element)) return "React.Suspense";
    if (typeof type3 == "object" && type3 !== null) {
      if (ReactIs2.isContextProvider(element)) return "Context.Provider";
      if (ReactIs2.isContextConsumer(element)) return "Context.Consumer";
      if (ReactIs2.isForwardRef(element)) {
        if (type3.displayName) return type3.displayName;
        let functionName = type3.render.displayName || type3.render.name || "";
        return functionName !== "" ? `ForwardRef(${functionName})` : "ForwardRef";
      }
      if (ReactIs2.isMemo(element)) {
        let functionName = type3.displayName || type3.type.displayName || type3.type.name || "";
        return functionName !== "" ? `Memo(${functionName})` : "Memo";
      }
    }
    return "UNDEFINED";
  }, getPropKeys2 = (element) => {
    let { props } = element;
    return Object.keys(props).filter((key) => key !== "children" && props[key] !== void 0).sort();
  }, serialize2 = (element, config3, indentation, depth, refs, printer2) => ++depth > config3.maxDepth ? (0, _markup2.printElementAsLeaf)(getType3(element), config3) : (0, _markup2.printElement)(getType3(element), (0, _markup2.printProps)(getPropKeys2(element), element.props, config3, indentation + config3.indent, depth, refs, printer2), (0, _markup2.printChildren)(getChildren2(element.props.children), config3, indentation + config3.indent, depth, refs, printer2), config3, indentation);
  exports.serialize = serialize2;
  var test2 = (val) => val != null && ReactIs2.isElement(val);
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_ReactTestComponent = __commonJS({ "../../node_modules/pretty-format/build/plugins/ReactTestComponent.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _markup2 = require_markup(), Symbol2 = globalThis["jest-symbol-do-not-touch"] || globalThis.Symbol, testSymbol2 = typeof Symbol2 == "function" && Symbol2.for ? Symbol2.for("react.test.json") : 245830487, getPropKeys2 = (object) => {
    let { props } = object;
    return props ? Object.keys(props).filter((key) => props[key] !== void 0).sort() : [];
  }, serialize2 = (object, config3, indentation, depth, refs, printer2) => ++depth > config3.maxDepth ? (0, _markup2.printElementAsLeaf)(object.type, config3) : (0, _markup2.printElement)(object.type, object.props ? (0, _markup2.printProps)(getPropKeys2(object), object.props, config3, indentation + config3.indent, depth, refs, printer2) : "", object.children ? (0, _markup2.printChildren)(object.children, config3, indentation + config3.indent, depth, refs, printer2) : "", config3, indentation);
  exports.serialize = serialize2;
  var test2 = (val) => val && val.$$typeof === testSymbol2;
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_build = __commonJS({ "../../node_modules/pretty-format/build/index.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = exports.DEFAULT_OPTIONS = void 0;
  exports.format = format4;
  exports.plugins = void 0;
  var _ansiStyles2 = _interopRequireDefault2(require_ansi_styles()), _collections2 = require_collections(), _AsymmetricMatcher2 = _interopRequireDefault2(require_AsymmetricMatcher()), _DOMCollection2 = _interopRequireDefault2(require_DOMCollection()), _DOMElement2 = _interopRequireDefault2(require_DOMElement()), _Immutable2 = _interopRequireDefault2(require_Immutable()), _ReactElement2 = _interopRequireDefault2(require_ReactElement()), _ReactTestComponent2 = _interopRequireDefault2(require_ReactTestComponent());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var toString2 = Object.prototype.toString, toISOString2 = Date.prototype.toISOString, errorToString2 = Error.prototype.toString, regExpToString2 = RegExp.prototype.toString, getConstructorName2 = (val) => typeof val.constructor == "function" && val.constructor.name || "Object", isWindow2 = (val) => typeof window < "u" && val === window, SYMBOL_REGEXP2 = /^Symbol\((.*)\)(.*)$/, NEWLINE_REGEXP2 = /\n/gi, PrettyFormatPluginError2 = class extends Error {
    constructor(message, stack) {
      super(message), this.stack = stack, this.name = this.constructor.name;
    }
  };
  function isToStringedArrayType2(toStringed) {
    return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
  }
  function printNumber2(val) {
    return Object.is(val, -0) ? "-0" : String(val);
  }
  function printBigInt2(val) {
    return `${val}n`;
  }
  function printFunction2(val, printFunctionName) {
    return printFunctionName ? `[Function ${val.name || "anonymous"}]` : "[Function]";
  }
  function printSymbol2(val) {
    return String(val).replace(SYMBOL_REGEXP2, "Symbol($1)");
  }
  function printError2(val) {
    return `[${errorToString2.call(val)}]`;
  }
  function printBasicValue2(val, printFunctionName, escapeRegex, escapeString) {
    if (val === true || val === false) return `${val}`;
    if (val === void 0) return "undefined";
    if (val === null) return "null";
    let typeOf = typeof val;
    if (typeOf === "number") return printNumber2(val);
    if (typeOf === "bigint") return printBigInt2(val);
    if (typeOf === "string") return escapeString ? `"${val.replace(/"|\\/g, "\\$&")}"` : `"${val}"`;
    if (typeOf === "function") return printFunction2(val, printFunctionName);
    if (typeOf === "symbol") return printSymbol2(val);
    let toStringed = toString2.call(val);
    return toStringed === "[object WeakMap]" ? "WeakMap {}" : toStringed === "[object WeakSet]" ? "WeakSet {}" : toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]" ? printFunction2(val, printFunctionName) : toStringed === "[object Symbol]" ? printSymbol2(val) : toStringed === "[object Date]" ? isNaN(+val) ? "Date { NaN }" : toISOString2.call(val) : toStringed === "[object Error]" ? printError2(val) : toStringed === "[object RegExp]" ? escapeRegex ? regExpToString2.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&") : regExpToString2.call(val) : val instanceof Error ? printError2(val) : null;
  }
  function printComplexValue2(val, config3, indentation, depth, refs, hasCalledToJSON) {
    if (refs.indexOf(val) !== -1) return "[Circular]";
    refs = refs.slice(), refs.push(val);
    let hitMaxDepth = ++depth > config3.maxDepth, min = config3.min;
    if (config3.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON == "function" && !hasCalledToJSON) return printer2(val.toJSON(), config3, indentation, depth, refs, true);
    let toStringed = toString2.call(val);
    return toStringed === "[object Arguments]" ? hitMaxDepth ? "[Arguments]" : `${min ? "" : "Arguments "}[${(0, _collections2.printListItems)(val, config3, indentation, depth, refs, printer2)}]` : isToStringedArrayType2(toStringed) ? hitMaxDepth ? `[${val.constructor.name}]` : `${min || !config3.printBasicPrototype && val.constructor.name === "Array" ? "" : `${val.constructor.name} `}[${(0, _collections2.printListItems)(val, config3, indentation, depth, refs, printer2)}]` : toStringed === "[object Map]" ? hitMaxDepth ? "[Map]" : `Map {${(0, _collections2.printIteratorEntries)(val.entries(), config3, indentation, depth, refs, printer2, " => ")}}` : toStringed === "[object Set]" ? hitMaxDepth ? "[Set]" : `Set {${(0, _collections2.printIteratorValues)(val.values(), config3, indentation, depth, refs, printer2)}}` : hitMaxDepth || isWindow2(val) ? `[${getConstructorName2(val)}]` : `${min || !config3.printBasicPrototype && getConstructorName2(val) === "Object" ? "" : `${getConstructorName2(val)} `}{${(0, _collections2.printObjectProperties)(val, config3, indentation, depth, refs, printer2)}}`;
  }
  function isNewPlugin2(plugin2) {
    return plugin2.serialize != null;
  }
  function printPlugin2(plugin2, val, config3, indentation, depth, refs) {
    let printed;
    try {
      printed = isNewPlugin2(plugin2) ? plugin2.serialize(val, config3, indentation, depth, refs, printer2) : plugin2.print(val, (valChild) => printer2(valChild, config3, indentation, depth, refs), (str) => {
        let indentationNext = indentation + config3.indent;
        return indentationNext + str.replace(NEWLINE_REGEXP2, `
${indentationNext}`);
      }, { edgeSpacing: config3.spacingOuter, min: config3.min, spacing: config3.spacingInner }, config3.colors);
    } catch (error) {
      throw new PrettyFormatPluginError2(error.message, error.stack);
    }
    if (typeof printed != "string") throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`);
    return printed;
  }
  function findPlugin2(plugins5, val) {
    for (let p2 = 0; p2 < plugins5.length; p2++) try {
      if (plugins5[p2].test(val)) return plugins5[p2];
    } catch (error) {
      throw new PrettyFormatPluginError2(error.message, error.stack);
    }
    return null;
  }
  function printer2(val, config3, indentation, depth, refs, hasCalledToJSON) {
    let plugin2 = findPlugin2(config3.plugins, val);
    if (plugin2 !== null) return printPlugin2(plugin2, val, config3, indentation, depth, refs);
    let basicResult = printBasicValue2(val, config3.printFunctionName, config3.escapeRegex, config3.escapeString);
    return basicResult !== null ? basicResult : printComplexValue2(val, config3, indentation, depth, refs, hasCalledToJSON);
  }
  var DEFAULT_THEME2 = { comment: "gray", content: "reset", prop: "yellow", tag: "cyan", value: "green" }, DEFAULT_THEME_KEYS2 = Object.keys(DEFAULT_THEME2), toOptionsSubtype = (options) => options, DEFAULT_OPTIONS2 = toOptionsSubtype({ callToJSON: true, compareKeys: void 0, escapeRegex: false, escapeString: true, highlight: false, indent: 2, maxDepth: 1 / 0, maxWidth: 1 / 0, min: false, plugins: [], printBasicPrototype: true, printFunctionName: true, theme: DEFAULT_THEME2 });
  exports.DEFAULT_OPTIONS = DEFAULT_OPTIONS2;
  function validateOptions2(options) {
    if (Object.keys(options).forEach((key) => {
      if (!Object.prototype.hasOwnProperty.call(DEFAULT_OPTIONS2, key)) throw new Error(`pretty-format: Unknown option "${key}".`);
    }), options.min && options.indent !== void 0 && options.indent !== 0) throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
    if (options.theme !== void 0) {
      if (options.theme === null) throw new Error('pretty-format: Option "theme" must not be null.');
      if (typeof options.theme != "object") throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof options.theme}".`);
    }
  }
  var getColorsHighlight2 = (options) => DEFAULT_THEME_KEYS2.reduce((colors, key) => {
    let value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME2[key], color = value && _ansiStyles2.default[value];
    if (color && typeof color.close == "string" && typeof color.open == "string") colors[key] = color;
    else throw new Error(`pretty-format: Option "theme" has a key "${key}" whose value "${value}" is undefined in ansi-styles.`);
    return colors;
  }, /* @__PURE__ */ Object.create(null)), getColorsEmpty2 = () => DEFAULT_THEME_KEYS2.reduce((colors, key) => (colors[key] = { close: "", open: "" }, colors), /* @__PURE__ */ Object.create(null)), getPrintFunctionName2 = (options) => (options == null ? void 0 : options.printFunctionName) ?? DEFAULT_OPTIONS2.printFunctionName, getEscapeRegex2 = (options) => (options == null ? void 0 : options.escapeRegex) ?? DEFAULT_OPTIONS2.escapeRegex, getEscapeString2 = (options) => (options == null ? void 0 : options.escapeString) ?? DEFAULT_OPTIONS2.escapeString, getConfig3 = (options) => ({ callToJSON: (options == null ? void 0 : options.callToJSON) ?? DEFAULT_OPTIONS2.callToJSON, colors: (options == null ? void 0 : options.highlight) ? getColorsHighlight2(options) : getColorsEmpty2(), compareKeys: typeof (options == null ? void 0 : options.compareKeys) == "function" || (options == null ? void 0 : options.compareKeys) === null ? options.compareKeys : DEFAULT_OPTIONS2.compareKeys, escapeRegex: getEscapeRegex2(options), escapeString: getEscapeString2(options), indent: (options == null ? void 0 : options.min) ? "" : createIndent2((options == null ? void 0 : options.indent) ?? DEFAULT_OPTIONS2.indent), maxDepth: (options == null ? void 0 : options.maxDepth) ?? DEFAULT_OPTIONS2.maxDepth, maxWidth: (options == null ? void 0 : options.maxWidth) ?? DEFAULT_OPTIONS2.maxWidth, min: (options == null ? void 0 : options.min) ?? DEFAULT_OPTIONS2.min, plugins: (options == null ? void 0 : options.plugins) ?? DEFAULT_OPTIONS2.plugins, printBasicPrototype: (options == null ? void 0 : options.printBasicPrototype) ?? true, printFunctionName: getPrintFunctionName2(options), spacingInner: (options == null ? void 0 : options.min) ? " " : `
`, spacingOuter: (options == null ? void 0 : options.min) ? "" : `
` });
  function createIndent2(indent) {
    return new Array(indent + 1).join(" ");
  }
  function format4(val, options) {
    if (options && (validateOptions2(options), options.plugins)) {
      let plugin2 = findPlugin2(options.plugins, val);
      if (plugin2 !== null) return printPlugin2(plugin2, val, getConfig3(options), "", 0, []);
    }
    let basicResult = printBasicValue2(val, getPrintFunctionName2(options), getEscapeRegex2(options), getEscapeString2(options));
    return basicResult !== null ? basicResult : printComplexValue2(val, getConfig3(options), "", 0, []);
  }
  var plugins4 = { AsymmetricMatcher: _AsymmetricMatcher2.default, DOMCollection: _DOMCollection2.default, DOMElement: _DOMElement2.default, Immutable: _Immutable2.default, ReactElement: _ReactElement2.default, ReactTestComponent: _ReactTestComponent2.default };
  exports.plugins = plugins4;
  var _default2 = format4;
  exports.default = _default2;
} });
var require_build2 = __commonJS({ "../../node_modules/diff-sequences/build/index.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = diffSequence;
  var pkg = "diff-sequences", NOT_YET_SET = 0, countCommonItemsF = (aIndex, aEnd, bIndex, bEnd, isCommon) => {
    let nCommon = 0;
    for (; aIndex < aEnd && bIndex < bEnd && isCommon(aIndex, bIndex); ) aIndex += 1, bIndex += 1, nCommon += 1;
    return nCommon;
  }, countCommonItemsR = (aStart, aIndex, bStart, bIndex, isCommon) => {
    let nCommon = 0;
    for (; aStart <= aIndex && bStart <= bIndex && isCommon(aIndex, bIndex); ) aIndex -= 1, bIndex -= 1, nCommon += 1;
    return nCommon;
  }, extendPathsF = (d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF) => {
    let iF = 0, kF = -d2, aFirst = aIndexesF[iF], aIndexPrev1 = aFirst;
    aIndexesF[iF] += countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
    let nF = d2 < iMaxF ? d2 : iMaxF;
    for (iF += 1, kF += 2; iF <= nF; iF += 1, kF += 2) {
      if (iF !== d2 && aIndexPrev1 < aIndexesF[iF]) aFirst = aIndexesF[iF];
      else if (aFirst = aIndexPrev1 + 1, aEnd <= aFirst) return iF - 1;
      aIndexPrev1 = aIndexesF[iF], aIndexesF[iF] = aFirst + countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
    }
    return iMaxF;
  }, extendPathsR = (d2, aStart, bStart, bR, isCommon, aIndexesR, iMaxR) => {
    let iR = 0, kR = d2, aFirst = aIndexesR[iR], aIndexPrev1 = aFirst;
    aIndexesR[iR] -= countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
    let nR = d2 < iMaxR ? d2 : iMaxR;
    for (iR += 1, kR -= 2; iR <= nR; iR += 1, kR -= 2) {
      if (iR !== d2 && aIndexesR[iR] < aIndexPrev1) aFirst = aIndexesR[iR];
      else if (aFirst = aIndexPrev1 - 1, aFirst < aStart) return iR - 1;
      aIndexPrev1 = aIndexesR[iR], aIndexesR[iR] = aFirst - countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
    }
    return iMaxR;
  }, extendOverlappablePathsF = (d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
    let bF = bStart - aStart, aLength = aEnd - aStart, baDeltaLength = bEnd - bStart - aLength, kMinOverlapF = -baDeltaLength - (d2 - 1), kMaxOverlapF = -baDeltaLength + (d2 - 1), aIndexPrev1 = NOT_YET_SET, nF = d2 < iMaxF ? d2 : iMaxF;
    for (let iF = 0, kF = -d2; iF <= nF; iF += 1, kF += 2) {
      let insert = iF === 0 || iF !== d2 && aIndexPrev1 < aIndexesF[iF], aLastPrev = insert ? aIndexesF[iF] : aIndexPrev1, aFirst = insert ? aLastPrev : aLastPrev + 1, bFirst = bF + aFirst - kF, nCommonF = countCommonItemsF(aFirst + 1, aEnd, bFirst + 1, bEnd, isCommon), aLast = aFirst + nCommonF;
      if (aIndexPrev1 = aIndexesF[iF], aIndexesF[iF] = aLast, kMinOverlapF <= kF && kF <= kMaxOverlapF) {
        let iR = (d2 - 1 - (kF + baDeltaLength)) / 2;
        if (iR <= iMaxR && aIndexesR[iR] - 1 <= aLast) {
          let bLastPrev = bF + aLastPrev - (insert ? kF + 1 : kF - 1), nCommonR = countCommonItemsR(aStart, aLastPrev, bStart, bLastPrev, isCommon), aIndexPrevFirst = aLastPrev - nCommonR, bIndexPrevFirst = bLastPrev - nCommonR, aEndPreceding = aIndexPrevFirst + 1, bEndPreceding = bIndexPrevFirst + 1;
          division.nChangePreceding = d2 - 1, d2 - 1 === aEndPreceding + bEndPreceding - aStart - bStart ? (division.aEndPreceding = aStart, division.bEndPreceding = bStart) : (division.aEndPreceding = aEndPreceding, division.bEndPreceding = bEndPreceding), division.nCommonPreceding = nCommonR, nCommonR !== 0 && (division.aCommonPreceding = aEndPreceding, division.bCommonPreceding = bEndPreceding), division.nCommonFollowing = nCommonF, nCommonF !== 0 && (division.aCommonFollowing = aFirst + 1, division.bCommonFollowing = bFirst + 1);
          let aStartFollowing = aLast + 1, bStartFollowing = bFirst + nCommonF + 1;
          return division.nChangeFollowing = d2 - 1, d2 - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing ? (division.aStartFollowing = aEnd, division.bStartFollowing = bEnd) : (division.aStartFollowing = aStartFollowing, division.bStartFollowing = bStartFollowing), true;
        }
      }
    }
    return false;
  }, extendOverlappablePathsR = (d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) => {
    let bR = bEnd - aEnd, aLength = aEnd - aStart, baDeltaLength = bEnd - bStart - aLength, kMinOverlapR = baDeltaLength - d2, kMaxOverlapR = baDeltaLength + d2, aIndexPrev1 = NOT_YET_SET, nR = d2 < iMaxR ? d2 : iMaxR;
    for (let iR = 0, kR = d2; iR <= nR; iR += 1, kR -= 2) {
      let insert = iR === 0 || iR !== d2 && aIndexesR[iR] < aIndexPrev1, aLastPrev = insert ? aIndexesR[iR] : aIndexPrev1, aFirst = insert ? aLastPrev : aLastPrev - 1, bFirst = bR + aFirst - kR, nCommonR = countCommonItemsR(aStart, aFirst - 1, bStart, bFirst - 1, isCommon), aLast = aFirst - nCommonR;
      if (aIndexPrev1 = aIndexesR[iR], aIndexesR[iR] = aLast, kMinOverlapR <= kR && kR <= kMaxOverlapR) {
        let iF = (d2 + (kR - baDeltaLength)) / 2;
        if (iF <= iMaxF && aLast - 1 <= aIndexesF[iF]) {
          let bLast = bFirst - nCommonR;
          if (division.nChangePreceding = d2, d2 === aLast + bLast - aStart - bStart ? (division.aEndPreceding = aStart, division.bEndPreceding = bStart) : (division.aEndPreceding = aLast, division.bEndPreceding = bLast), division.nCommonPreceding = nCommonR, nCommonR !== 0 && (division.aCommonPreceding = aLast, division.bCommonPreceding = bLast), division.nChangeFollowing = d2 - 1, d2 === 1) division.nCommonFollowing = 0, division.aStartFollowing = aEnd, division.bStartFollowing = bEnd;
          else {
            let bLastPrev = bR + aLastPrev - (insert ? kR - 1 : kR + 1), nCommonF = countCommonItemsF(aLastPrev, aEnd, bLastPrev, bEnd, isCommon);
            division.nCommonFollowing = nCommonF, nCommonF !== 0 && (division.aCommonFollowing = aLastPrev, division.bCommonFollowing = bLastPrev);
            let aStartFollowing = aLastPrev + nCommonF, bStartFollowing = bLastPrev + nCommonF;
            d2 - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing ? (division.aStartFollowing = aEnd, division.bStartFollowing = bEnd) : (division.aStartFollowing = aStartFollowing, division.bStartFollowing = bStartFollowing);
          }
          return true;
        }
      }
    }
    return false;
  }, divide = (nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division) => {
    let bF = bStart - aStart, bR = bEnd - aEnd, aLength = aEnd - aStart, bLength = bEnd - bStart, baDeltaLength = bLength - aLength, iMaxF = aLength, iMaxR = aLength;
    if (aIndexesF[0] = aStart - 1, aIndexesR[0] = aEnd, baDeltaLength % 2 === 0) {
      let dMin = (nChange || baDeltaLength) / 2, dMax = (aLength + bLength) / 2;
      for (let d2 = 1; d2 <= dMax; d2 += 1) if (iMaxF = extendPathsF(d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF), d2 < dMin) iMaxR = extendPathsR(d2, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);
      else if (extendOverlappablePathsR(d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division)) return;
    } else {
      let dMin = ((nChange || baDeltaLength) + 1) / 2, dMax = (aLength + bLength + 1) / 2, d2 = 1;
      for (iMaxF = extendPathsF(d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF), d2 += 1; d2 <= dMax; d2 += 1) if (iMaxR = extendPathsR(d2 - 1, aStart, bStart, bR, isCommon, aIndexesR, iMaxR), d2 < dMin) iMaxF = extendPathsF(d2, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
      else if (extendOverlappablePathsF(d2, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division)) return;
    }
    throw new Error(`${pkg}: no overlap aStart=${aStart} aEnd=${aEnd} bStart=${bStart} bEnd=${bEnd}`);
  }, findSubsequences = (nChange, aStart, aEnd, bStart, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division) => {
    if (bEnd - bStart < aEnd - aStart) {
      if (transposed = !transposed, transposed && callbacks.length === 1) {
        let { foundSubsequence: foundSubsequence2, isCommon: isCommon2 } = callbacks[0];
        callbacks[1] = { foundSubsequence: (nCommon, bCommon, aCommon) => {
          foundSubsequence2(nCommon, aCommon, bCommon);
        }, isCommon: (bIndex, aIndex) => isCommon2(aIndex, bIndex) };
      }
      let tStart = aStart, tEnd = aEnd;
      aStart = bStart, aEnd = bEnd, bStart = tStart, bEnd = tEnd;
    }
    let { foundSubsequence, isCommon } = callbacks[transposed ? 1 : 0];
    divide(nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division);
    let { nChangePreceding, aEndPreceding, bEndPreceding, nCommonPreceding, aCommonPreceding, bCommonPreceding, nCommonFollowing, aCommonFollowing, bCommonFollowing, nChangeFollowing, aStartFollowing, bStartFollowing } = division;
    aStart < aEndPreceding && bStart < bEndPreceding && findSubsequences(nChangePreceding, aStart, aEndPreceding, bStart, bEndPreceding, transposed, callbacks, aIndexesF, aIndexesR, division), nCommonPreceding !== 0 && foundSubsequence(nCommonPreceding, aCommonPreceding, bCommonPreceding), nCommonFollowing !== 0 && foundSubsequence(nCommonFollowing, aCommonFollowing, bCommonFollowing), aStartFollowing < aEnd && bStartFollowing < bEnd && findSubsequences(nChangeFollowing, aStartFollowing, aEnd, bStartFollowing, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division);
  }, validateLength = (name, arg) => {
    if (typeof arg != "number") throw new TypeError(`${pkg}: ${name} typeof ${typeof arg} is not a number`);
    if (!Number.isSafeInteger(arg)) throw new RangeError(`${pkg}: ${name} value ${arg} is not a safe integer`);
    if (arg < 0) throw new RangeError(`${pkg}: ${name} value ${arg} is a negative integer`);
  }, validateCallback = (name, arg) => {
    let type3 = typeof arg;
    if (type3 !== "function") throw new TypeError(`${pkg}: ${name} typeof ${type3} is not a function`);
  };
  function diffSequence(aLength, bLength, isCommon, foundSubsequence) {
    validateLength("aLength", aLength), validateLength("bLength", bLength), validateCallback("isCommon", isCommon), validateCallback("foundSubsequence", foundSubsequence);
    let nCommonF = countCommonItemsF(0, aLength, 0, bLength, isCommon);
    if (nCommonF !== 0 && foundSubsequence(nCommonF, 0, 0), aLength !== nCommonF || bLength !== nCommonF) {
      let aStart = nCommonF, bStart = nCommonF, nCommonR = countCommonItemsR(aStart, aLength - 1, bStart, bLength - 1, isCommon), aEnd = aLength - nCommonR, bEnd = bLength - nCommonR, nCommonFR = nCommonF + nCommonR;
      aLength !== nCommonFR && bLength !== nCommonFR && findSubsequences(0, aStart, aEnd, bStart, bEnd, false, [{ foundSubsequence, isCommon }], [NOT_YET_SET], [NOT_YET_SET], { aCommonFollowing: NOT_YET_SET, aCommonPreceding: NOT_YET_SET, aEndPreceding: NOT_YET_SET, aStartFollowing: NOT_YET_SET, bCommonFollowing: NOT_YET_SET, bCommonPreceding: NOT_YET_SET, bEndPreceding: NOT_YET_SET, bStartFollowing: NOT_YET_SET, nChangeFollowing: NOT_YET_SET, nChangePreceding: NOT_YET_SET, nCommonFollowing: NOT_YET_SET, nCommonPreceding: NOT_YET_SET }), nCommonR !== 0 && foundSubsequence(nCommonR, aEnd, bEnd);
    }
  }
} });
var require_min_indent = __commonJS({ "../../node_modules/min-indent/index.js"(exports, module2) {
  module2.exports = (string2) => {
    let match = string2.match(/^[ \t]*(?=\S)/gm);
    return match ? match.reduce((r2, a) => Math.min(r2, a.length), 1 / 0) : 0;
  };
} });
var require_strip_indent = __commonJS({ "../../node_modules/strip-indent/index.js"(exports, module2) {
  var minIndent = require_min_indent();
  module2.exports = (string2) => {
    let indent = minIndent(string2);
    if (indent === 0) return string2;
    let regex = new RegExp(`^[ \\t]{${indent}}`, "gm");
    return string2.replace(regex, "");
  };
} });
var require_indent_string = __commonJS({ "../../node_modules/indent-string/index.js"(exports, module2) {
  module2.exports = (string2, count = 1, options) => {
    if (options = { indent: " ", includeEmptyLines: false, ...options }, typeof string2 != "string") throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string2}\``);
    if (typeof count != "number") throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
    if (typeof options.indent != "string") throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``);
    if (count === 0) return string2;
    let regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
    return string2.replace(regex, options.indent.repeat(count));
  };
} });
var require_redent = __commonJS({ "../../node_modules/redent/index.js"(exports, module2) {
  var stripIndent = require_strip_indent(), indentString = require_indent_string();
  module2.exports = (string2, count = 0, options) => indentString(stripIndent(string2), count, options);
} });
var require_iteratorProxy = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/util/iteratorProxy.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  function iteratorProxy2() {
    var values6 = this, index = 0, iter = { "@@iterator": function() {
      return iter;
    }, next: function() {
      if (index < values6.length) {
        var value = values6[index];
        return index = index + 1, { done: false, value };
      } else return { done: true };
    } };
    return iter;
  }
  var _default2 = iteratorProxy2;
  exports.default = _default2;
} });
var require_iterationDecorator = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/util/iterationDecorator.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = iterationDecorator2;
  var _iteratorProxy2 = _interopRequireDefault2(require_iteratorProxy());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _typeof5(obj) {
    "@babel/helpers - typeof";
    return _typeof5 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof5(obj);
  }
  function iterationDecorator2(collection, entries6) {
    return typeof Symbol == "function" && _typeof5(Symbol.iterator) === "symbol" && Object.defineProperty(collection, Symbol.iterator, { value: _iteratorProxy2.default.bind(entries6) }), collection;
  }
} });
var require_ariaPropsMap = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/ariaPropsMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i2) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i2) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i2 && _arr.length === i2)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i2 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
    return arr2;
  }
  var properties2 = [["aria-activedescendant", { type: "id" }], ["aria-atomic", { type: "boolean" }], ["aria-autocomplete", { type: "token", values: ["inline", "list", "both", "none"] }], ["aria-busy", { type: "boolean" }], ["aria-checked", { type: "tristate" }], ["aria-colcount", { type: "integer" }], ["aria-colindex", { type: "integer" }], ["aria-colspan", { type: "integer" }], ["aria-controls", { type: "idlist" }], ["aria-current", { type: "token", values: ["page", "step", "location", "date", "time", true, false] }], ["aria-describedby", { type: "idlist" }], ["aria-details", { type: "id" }], ["aria-disabled", { type: "boolean" }], ["aria-dropeffect", { type: "tokenlist", values: ["copy", "execute", "link", "move", "none", "popup"] }], ["aria-errormessage", { type: "id" }], ["aria-expanded", { type: "boolean", allowundefined: true }], ["aria-flowto", { type: "idlist" }], ["aria-grabbed", { type: "boolean", allowundefined: true }], ["aria-haspopup", { type: "token", values: [false, true, "menu", "listbox", "tree", "grid", "dialog"] }], ["aria-hidden", { type: "boolean", allowundefined: true }], ["aria-invalid", { type: "token", values: ["grammar", false, "spelling", true] }], ["aria-keyshortcuts", { type: "string" }], ["aria-label", { type: "string" }], ["aria-labelledby", { type: "idlist" }], ["aria-level", { type: "integer" }], ["aria-live", { type: "token", values: ["assertive", "off", "polite"] }], ["aria-modal", { type: "boolean" }], ["aria-multiline", { type: "boolean" }], ["aria-multiselectable", { type: "boolean" }], ["aria-orientation", { type: "token", values: ["vertical", "undefined", "horizontal"] }], ["aria-owns", { type: "idlist" }], ["aria-placeholder", { type: "string" }], ["aria-posinset", { type: "integer" }], ["aria-pressed", { type: "tristate" }], ["aria-readonly", { type: "boolean" }], ["aria-relevant", { type: "tokenlist", values: ["additions", "all", "removals", "text"] }], ["aria-required", { type: "boolean" }], ["aria-roledescription", { type: "string" }], ["aria-rowcount", { type: "integer" }], ["aria-rowindex", { type: "integer" }], ["aria-rowspan", { type: "integer" }], ["aria-selected", { type: "boolean", allowundefined: true }], ["aria-setsize", { type: "integer" }], ["aria-sort", { type: "token", values: ["ascending", "descending", "none", "other"] }], ["aria-valuemax", { type: "number" }], ["aria-valuemin", { type: "number" }], ["aria-valuenow", { type: "number" }], ["aria-valuetext", { type: "string" }]], ariaPropsMap2 = { entries: function() {
    return properties2;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(properties2), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, key, properties2);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key) {
    var item = properties2.find(function(tuple) {
      return tuple[0] === key;
    });
    return item && item[1];
  }, has: function(key) {
    return !!ariaPropsMap2.get(key);
  }, keys: function() {
    return properties2.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key = _ref2[0];
      return key;
    });
  }, values: function() {
    return properties2.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(ariaPropsMap2, ariaPropsMap2.entries());
  exports.default = _default2;
} });
var require_domMap = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/domMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i2) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i2) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i2 && _arr.length === i2)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i2 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
    return arr2;
  }
  var dom2 = [["a", { reserved: false }], ["abbr", { reserved: false }], ["acronym", { reserved: false }], ["address", { reserved: false }], ["applet", { reserved: false }], ["area", { reserved: false }], ["article", { reserved: false }], ["aside", { reserved: false }], ["audio", { reserved: false }], ["b", { reserved: false }], ["base", { reserved: true }], ["bdi", { reserved: false }], ["bdo", { reserved: false }], ["big", { reserved: false }], ["blink", { reserved: false }], ["blockquote", { reserved: false }], ["body", { reserved: false }], ["br", { reserved: false }], ["button", { reserved: false }], ["canvas", { reserved: false }], ["caption", { reserved: false }], ["center", { reserved: false }], ["cite", { reserved: false }], ["code", { reserved: false }], ["col", { reserved: true }], ["colgroup", { reserved: true }], ["content", { reserved: false }], ["data", { reserved: false }], ["datalist", { reserved: false }], ["dd", { reserved: false }], ["del", { reserved: false }], ["details", { reserved: false }], ["dfn", { reserved: false }], ["dialog", { reserved: false }], ["dir", { reserved: false }], ["div", { reserved: false }], ["dl", { reserved: false }], ["dt", { reserved: false }], ["em", { reserved: false }], ["embed", { reserved: false }], ["fieldset", { reserved: false }], ["figcaption", { reserved: false }], ["figure", { reserved: false }], ["font", { reserved: false }], ["footer", { reserved: false }], ["form", { reserved: false }], ["frame", { reserved: false }], ["frameset", { reserved: false }], ["h1", { reserved: false }], ["h2", { reserved: false }], ["h3", { reserved: false }], ["h4", { reserved: false }], ["h5", { reserved: false }], ["h6", { reserved: false }], ["head", { reserved: true }], ["header", { reserved: false }], ["hgroup", { reserved: false }], ["hr", { reserved: false }], ["html", { reserved: true }], ["i", { reserved: false }], ["iframe", { reserved: false }], ["img", { reserved: false }], ["input", { reserved: false }], ["ins", { reserved: false }], ["kbd", { reserved: false }], ["keygen", { reserved: false }], ["label", { reserved: false }], ["legend", { reserved: false }], ["li", { reserved: false }], ["link", { reserved: true }], ["main", { reserved: false }], ["map", { reserved: false }], ["mark", { reserved: false }], ["marquee", { reserved: false }], ["menu", { reserved: false }], ["menuitem", { reserved: false }], ["meta", { reserved: true }], ["meter", { reserved: false }], ["nav", { reserved: false }], ["noembed", { reserved: true }], ["noscript", { reserved: true }], ["object", { reserved: false }], ["ol", { reserved: false }], ["optgroup", { reserved: false }], ["option", { reserved: false }], ["output", { reserved: false }], ["p", { reserved: false }], ["param", { reserved: true }], ["picture", { reserved: true }], ["pre", { reserved: false }], ["progress", { reserved: false }], ["q", { reserved: false }], ["rp", { reserved: false }], ["rt", { reserved: false }], ["rtc", { reserved: false }], ["ruby", { reserved: false }], ["s", { reserved: false }], ["samp", { reserved: false }], ["script", { reserved: true }], ["section", { reserved: false }], ["select", { reserved: false }], ["small", { reserved: false }], ["source", { reserved: true }], ["spacer", { reserved: false }], ["span", { reserved: false }], ["strike", { reserved: false }], ["strong", { reserved: false }], ["style", { reserved: true }], ["sub", { reserved: false }], ["summary", { reserved: false }], ["sup", { reserved: false }], ["table", { reserved: false }], ["tbody", { reserved: false }], ["td", { reserved: false }], ["textarea", { reserved: false }], ["tfoot", { reserved: false }], ["th", { reserved: false }], ["thead", { reserved: false }], ["time", { reserved: false }], ["title", { reserved: true }], ["tr", { reserved: false }], ["track", { reserved: true }], ["tt", { reserved: false }], ["u", { reserved: false }], ["ul", { reserved: false }], ["var", { reserved: false }], ["video", { reserved: false }], ["wbr", { reserved: false }], ["xmp", { reserved: false }]], domMap2 = { entries: function() {
    return dom2;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(dom2), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, key, dom2);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key) {
    var item = dom2.find(function(tuple) {
      return tuple[0] === key;
    });
    return item && item[1];
  }, has: function(key) {
    return !!domMap2.get(key);
  }, keys: function() {
    return dom2.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key = _ref2[0];
      return key;
    });
  }, values: function() {
    return dom2.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(domMap2, domMap2.entries());
  exports.default = _default2;
} });
var require_commandRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/commandRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var commandRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default2 = commandRole2;
  exports.default = _default2;
} });
var require_compositeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var compositeRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default2 = compositeRole2;
  exports.default = _default2;
} });
var require_inputRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/inputRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var inputRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null }, relatedConcepts: [{ concept: { name: "input" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default2 = inputRole2;
  exports.default = _default2;
} });
var require_landmarkRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var landmarkRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = landmarkRole2;
  exports.default = _default2;
} });
var require_rangeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rangeRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuemax": null, "aria-valuemin": null, "aria-valuenow": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = rangeRole2;
  exports.default = _default2;
} });
var require_roletypeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var roletypeRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: { "aria-atomic": null, "aria-busy": null, "aria-controls": null, "aria-current": null, "aria-describedby": null, "aria-details": null, "aria-dropeffect": null, "aria-flowto": null, "aria-grabbed": null, "aria-hidden": null, "aria-keyshortcuts": null, "aria-label": null, "aria-labelledby": null, "aria-live": null, "aria-owns": null, "aria-relevant": null, "aria-roledescription": null }, relatedConcepts: [{ concept: { name: "rel" }, module: "HTML" }, { concept: { name: "role" }, module: "XHTML" }, { concept: { name: "type" }, module: "Dublin Core" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [] }, _default2 = roletypeRole2;
  exports.default = _default2;
} });
var require_sectionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var sectionRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "frontmatter" }, module: "DTB" }, { concept: { name: "level" }, module: "DTB" }, { concept: { name: "level" }, module: "SMIL" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = sectionRole2;
  exports.default = _default2;
} });
var require_sectionheadRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var sectionheadRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = sectionheadRole2;
  exports.default = _default2;
} });
var require_selectRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/selectRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var selectRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]] }, _default2 = selectRole2;
  exports.default = _default2;
} });
var require_structureRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/structureRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var structureRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default2 = structureRole2;
  exports.default = _default2;
} });
var require_widgetRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var widgetRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default2 = widgetRole2;
  exports.default = _default2;
} });
var require_windowRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/abstract/windowRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var windowRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-modal": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default2 = windowRole2;
  exports.default = _default2;
} });
var require_ariaAbstractRoles = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _commandRole2 = _interopRequireDefault2(require_commandRole()), _compositeRole2 = _interopRequireDefault2(require_compositeRole()), _inputRole2 = _interopRequireDefault2(require_inputRole()), _landmarkRole2 = _interopRequireDefault2(require_landmarkRole()), _rangeRole2 = _interopRequireDefault2(require_rangeRole()), _roletypeRole2 = _interopRequireDefault2(require_roletypeRole()), _sectionRole2 = _interopRequireDefault2(require_sectionRole()), _sectionheadRole2 = _interopRequireDefault2(require_sectionheadRole()), _selectRole2 = _interopRequireDefault2(require_selectRole()), _structureRole2 = _interopRequireDefault2(require_structureRole()), _widgetRole2 = _interopRequireDefault2(require_widgetRole()), _windowRole2 = _interopRequireDefault2(require_windowRole());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaAbstractRoles2 = [["command", _commandRole2.default], ["composite", _compositeRole2.default], ["input", _inputRole2.default], ["landmark", _landmarkRole2.default], ["range", _rangeRole2.default], ["roletype", _roletypeRole2.default], ["section", _sectionRole2.default], ["sectionhead", _sectionheadRole2.default], ["select", _selectRole2.default], ["structure", _structureRole2.default], ["widget", _widgetRole2.default], ["window", _windowRole2.default]], _default2 = ariaAbstractRoles2;
  exports.default = _default2;
} });
var require_alertRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/alertRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var alertRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-atomic": "true", "aria-live": "assertive" }, relatedConcepts: [{ concept: { name: "alert" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = alertRole2;
  exports.default = _default2;
} });
var require_alertdialogRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var alertdialogRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "alert" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]] }, _default2 = alertdialogRole2;
  exports.default = _default2;
} });
var require_applicationRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/applicationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var applicationRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "Device Independence Delivery Unit" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = applicationRole2;
  exports.default = _default2;
} });
var require_articleRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/articleRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var articleRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "article" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "document"]] }, _default2 = articleRole2;
  exports.default = _default2;
} });
var require_bannerRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/bannerRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var bannerRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { constraints: ["direct descendant of document"], name: "header" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = bannerRole2;
  exports.default = _default2;
} });
var require_blockquoteRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var blockquoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = blockquoteRole2;
  exports.default = _default2;
} });
var require_buttonRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/buttonRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var buttonRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-pressed": null }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-pressed" }, { name: "type", value: "checkbox" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "aria-expanded", value: "false" }], name: "summary" }, module: "HTML" }, { concept: { attributes: [{ name: "aria-expanded", value: "true" }], constraints: ["direct descendant of details element with the open attribute defined"], name: "summary" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "button" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "image" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "reset" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "submit" }], name: "input" }, module: "HTML" }, { concept: { name: "button" }, module: "HTML" }, { concept: { name: "trigger" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default2 = buttonRole2;
  exports.default = _default2;
} });
var require_captionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/captionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var captionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: ["figure", "grid", "table"], requiredContextRole: ["figure", "grid", "table"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = captionRole2;
  exports.default = _default2;
} });
var require_cellRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/cellRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var cellRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-colindex": null, "aria-colspan": null, "aria-rowindex": null, "aria-rowspan": null }, relatedConcepts: [{ concept: { constraints: ["descendant of table"], name: "td" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = cellRole2;
  exports.default = _default2;
} });
var require_checkboxRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var checkboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-errormessage": null, "aria-expanded": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "checkbox" }], name: "input" }, module: "HTML" }, { concept: { name: "option" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input"]] }, _default2 = checkboxRole2;
  exports.default = _default2;
} });
var require_codeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/codeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var codeRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = codeRole2;
  exports.default = _default2;
} });
var require_columnheaderRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var columnheaderRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-sort": null }, relatedConcepts: [{ attributes: [{ name: "scope", value: "col" }], concept: { name: "th" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]] }, _default2 = columnheaderRole2;
  exports.default = _default2;
} });
var require_comboboxRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var comboboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-autocomplete": null, "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-expanded": "false", "aria-haspopup": "listbox" }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "email" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "search" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "tel" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "text" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "multiple" }, { constraints: ["undefined"], name: "size" }], name: "select" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "multiple" }, { name: "size", value: 1 }], name: "select" }, module: "HTML" }, { concept: { name: "select" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-controls": null, "aria-expanded": "false" }, superClass: [["roletype", "widget", "input"]] }, _default2 = comboboxRole2;
  exports.default = _default2;
} });
var require_complementaryRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var complementaryRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "aside" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = complementaryRole2;
  exports.default = _default2;
} });
var require_contentinfoRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var contentinfoRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { constraints: ["direct descendant of document"], name: "footer" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = contentinfoRole2;
  exports.default = _default2;
} });
var require_definitionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/definitionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var definitionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dd" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = definitionRole2;
  exports.default = _default2;
} });
var require_deletionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/deletionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var deletionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = deletionRole2;
  exports.default = _default2;
} });
var require_dialogRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/dialogRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var dialogRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dialog" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "window"]] }, _default2 = dialogRole2;
  exports.default = _default2;
} });
var require_directoryRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/directoryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var directoryRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ module: "DAISY Guide" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "list"]] }, _default2 = directoryRole2;
  exports.default = _default2;
} });
var require_documentRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/documentRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var documentRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "Device Independence Delivery Unit" } }, { concept: { name: "body" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = documentRole2;
  exports.default = _default2;
} });
var require_emphasisRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var emphasisRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = emphasisRole2;
  exports.default = _default2;
} });
var require_feedRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/feedRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var feedRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["article"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "list"]] }, _default2 = feedRole2;
  exports.default = _default2;
} });
var require_figureRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/figureRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var figureRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "figure" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = figureRole2;
  exports.default = _default2;
} });
var require_formRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/formRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var formRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-label" }], name: "form" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-labelledby" }], name: "form" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "name" }], name: "form" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = formRole2;
  exports.default = _default2;
} });
var require_genericRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/genericRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var genericRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "span" }, module: "HTML" }, { concept: { name: "div" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = genericRole2;
  exports.default = _default2;
} });
var require_gridRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/gridRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var gridRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-multiselectable": null, "aria-readonly": null }, relatedConcepts: [{ concept: { attributes: [{ name: "role", value: "grid" }], name: "table" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]] }, _default2 = gridRole2;
  exports.default = _default2;
} });
var require_gridcellRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var gridcellRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-selected": null }, relatedConcepts: [{ concept: { attributes: [{ name: "role", value: "gridcell" }], name: "td" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]] }, _default2 = gridcellRole2;
  exports.default = _default2;
} });
var require_groupRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/groupRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var groupRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null }, relatedConcepts: [{ concept: { name: "details" }, module: "HTML" }, { concept: { name: "fieldset" }, module: "HTML" }, { concept: { name: "optgroup" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = groupRole2;
  exports.default = _default2;
} });
var require_headingRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/headingRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var headingRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-level": "2" }, relatedConcepts: [{ concept: { name: "h1" }, module: "HTML" }, { concept: { name: "h2" }, module: "HTML" }, { concept: { name: "h3" }, module: "HTML" }, { concept: { name: "h4" }, module: "HTML" }, { concept: { name: "h5" }, module: "HTML" }, { concept: { name: "h6" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-level": "2" }, superClass: [["roletype", "structure", "sectionhead"]] }, _default2 = headingRole2;
  exports.default = _default2;
} });
var require_imgRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/imgRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var imgRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "alt" }], name: "img" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "alt" }], name: "img" }, module: "HTML" }, { concept: { name: "imggroup" }, module: "DTB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = imgRole2;
  exports.default = _default2;
} });
var require_insertionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/insertionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var insertionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = insertionRole2;
  exports.default = _default2;
} });
var require_linkRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/linkRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var linkRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null }, relatedConcepts: [{ concept: { attributes: [{ name: "href" }], name: "a" }, module: "HTML" }, { concept: { attributes: [{ name: "href" }], name: "area" }, module: "HTML" }, { concept: { attributes: [{ name: "href" }], name: "link" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default2 = linkRole2;
  exports.default = _default2;
} });
var require_listRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/listRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var listRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menu" }, module: "HTML" }, { concept: { name: "ol" }, module: "HTML" }, { concept: { name: "ul" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["listitem"]], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = listRole2;
  exports.default = _default2;
} });
var require_listboxRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/listboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var listboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-invalid": null, "aria-multiselectable": null, "aria-readonly": null, "aria-required": null, "aria-orientation": "vertical" }, relatedConcepts: [{ concept: { attributes: [{ constraints: [">1"], name: "size" }, { name: "multiple" }], name: "select" }, module: "HTML" }, { concept: { attributes: [{ constraints: [">1"], name: "size" }], name: "select" }, module: "HTML" }, { concept: { attributes: [{ name: "multiple" }], name: "select" }, module: "HTML" }, { concept: { name: "datalist" }, module: "HTML" }, { concept: { name: "list" }, module: "ARIA" }, { concept: { name: "select" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["option", "group"], ["option"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = listboxRole2;
  exports.default = _default2;
} });
var require_listitemRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/listitemRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var listitemRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-level": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { constraints: ["direct descendant of ol, ul or menu"], name: "li" }, module: "HTML" }, { concept: { name: "item" }, module: "XForms" }], requireContextRole: ["directory", "list"], requiredContextRole: ["directory", "list"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = listitemRole2;
  exports.default = _default2;
} });
var require_logRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/logRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var logRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-live": "polite" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = logRole2;
  exports.default = _default2;
} });
var require_mainRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/mainRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var mainRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "main" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = mainRole2;
  exports.default = _default2;
} });
var require_marqueeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var marqueeRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = marqueeRole2;
  exports.default = _default2;
} });
var require_mathRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/mathRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var mathRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "math" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = mathRole2;
  exports.default = _default2;
} });
var require_menuRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/menuRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "vertical" }, relatedConcepts: [{ concept: { name: "MENU" }, module: "JAPI" }, { concept: { name: "list" }, module: "ARIA" }, { concept: { name: "select" }, module: "XForms" }, { concept: { name: "sidebar" }, module: "DTB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = menuRole2;
  exports.default = _default2;
} });
var require_menubarRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/menubarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menubarRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "horizontal" }, relatedConcepts: [{ concept: { name: "toolbar" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]] }, _default2 = menubarRole2;
  exports.default = _default2;
} });
var require_menuitemRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuitemRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "MENU_ITEM" }, module: "JAPI" }, { concept: { name: "listitem" }, module: "ARIA" }, { concept: { name: "menuitem" }, module: "HTML" }, { concept: { name: "option" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default2 = menuitemRole2;
  exports.default = _default2;
} });
var require_menuitemcheckboxRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuitemcheckboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]] }, _default2 = menuitemcheckboxRole2;
  exports.default = _default2;
} });
var require_menuitemradioRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuitemradioRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]] }, _default2 = menuitemradioRole2;
  exports.default = _default2;
} });
var require_meterRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/meterRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var meterRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuetext": null, "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-valuenow": null }, superClass: [["roletype", "structure", "range"]] }, _default2 = meterRole2;
  exports.default = _default2;
} });
var require_navigationRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/navigationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var navigationRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "nav" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = navigationRole2;
  exports.default = _default2;
} });
var require_noneRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/noneRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var noneRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [] }, _default2 = noneRole2;
  exports.default = _default2;
} });
var require_noteRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/noteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var noteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = noteRole2;
  exports.default = _default2;
} });
var require_optionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/optionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var optionRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-posinset": null, "aria-setsize": null, "aria-selected": "false" }, relatedConcepts: [{ concept: { name: "item" }, module: "XForms" }, { concept: { name: "listitem" }, module: "ARIA" }, { concept: { name: "option" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-selected": "false" }, superClass: [["roletype", "widget", "input"]] }, _default2 = optionRole2;
  exports.default = _default2;
} });
var require_paragraphRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var paragraphRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = paragraphRole2;
  exports.default = _default2;
} });
var require_presentationRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/presentationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var presentationRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = presentationRole2;
  exports.default = _default2;
} });
var require_progressbarRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var progressbarRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuetext": null }, relatedConcepts: [{ concept: { name: "progress" }, module: "HTML" }, { concept: { name: "status" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "range"], ["roletype", "widget"]] }, _default2 = progressbarRole2;
  exports.default = _default2;
} });
var require_radioRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/radioRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var radioRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "radio" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input"]] }, _default2 = radioRole2;
  exports.default = _default2;
} });
var require_radiogroupRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var radiogroupRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { name: "list" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["radio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = radiogroupRole2;
  exports.default = _default2;
} });
var require_regionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/regionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var regionRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-label" }], name: "section" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-labelledby" }], name: "section" }, module: "HTML" }, { concept: { name: "Device Independence Glossart perceivable unit" } }, { concept: { name: "frame" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = regionRole2;
  exports.default = _default2;
} });
var require_rowRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/rowRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rowRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-colindex": null, "aria-expanded": null, "aria-level": null, "aria-posinset": null, "aria-rowindex": null, "aria-selected": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "tr" }, module: "HTML" }], requireContextRole: ["grid", "rowgroup", "table", "treegrid"], requiredContextRole: ["grid", "rowgroup", "table", "treegrid"], requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]] }, _default2 = rowRole2;
  exports.default = _default2;
} });
var require_rowgroupRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rowgroupRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "tbody" }, module: "HTML" }, { concept: { name: "tfoot" }, module: "HTML" }, { concept: { name: "thead" }, module: "HTML" }], requireContextRole: ["grid", "table", "treegrid"], requiredContextRole: ["grid", "table", "treegrid"], requiredOwnedElements: [["row"]], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = rowgroupRole2;
  exports.default = _default2;
} });
var require_rowheaderRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rowheaderRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-sort": null }, relatedConcepts: [{ concept: { attributes: [{ name: "scope", value: "row" }], name: "th" }, module: "HTML" }, { concept: { attributes: [{ name: "scope", value: "rowgroup" }], name: "th" }, module: "HTML" }], requireContextRole: ["row", "rowgroup"], requiredContextRole: ["row", "rowgroup"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]] }, _default2 = rowheaderRole2;
  exports.default = _default2;
} });
var require_scrollbarRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var scrollbarRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-valuetext": null, "aria-orientation": "vertical", "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-controls": null, "aria-valuenow": null }, superClass: [["roletype", "structure", "range"], ["roletype", "widget"]] }, _default2 = scrollbarRole2;
  exports.default = _default2;
} });
var require_searchRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/searchRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var searchRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = searchRole2;
  exports.default = _default2;
} });
var require_searchboxRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var searchboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "search" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "input", "textbox"]] }, _default2 = searchboxRole2;
  exports.default = _default2;
} });
var require_separatorRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/separatorRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var separatorRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-orientation": "horizontal", "aria-valuemax": "100", "aria-valuemin": "0", "aria-valuenow": null, "aria-valuetext": null }, relatedConcepts: [{ concept: { name: "hr" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = separatorRole2;
  exports.default = _default2;
} });
var require_sliderRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/sliderRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var sliderRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-haspopup": null, "aria-invalid": null, "aria-readonly": null, "aria-valuetext": null, "aria-orientation": "horizontal", "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "range" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-valuenow": null }, superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]] }, _default2 = sliderRole2;
  exports.default = _default2;
} });
var require_spinbuttonRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var spinbuttonRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-valuetext": null, "aria-valuenow": "0" }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "number" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]] }, _default2 = spinbuttonRole2;
  exports.default = _default2;
} });
var require_statusRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/statusRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var statusRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-atomic": "true", "aria-live": "polite" }, relatedConcepts: [{ concept: { name: "output" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = statusRole2;
  exports.default = _default2;
} });
var require_strongRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/strongRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var strongRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = strongRole2;
  exports.default = _default2;
} });
var require_subscriptRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var subscriptRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = subscriptRole2;
  exports.default = _default2;
} });
var require_superscriptRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var superscriptRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = superscriptRole2;
  exports.default = _default2;
} });
var require_switchRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/switchRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var switchRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "button" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox"]] }, _default2 = switchRole2;
  exports.default = _default2;
} });
var require_tabRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/tabRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tabRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-posinset": null, "aria-setsize": null, "aria-selected": "false" }, relatedConcepts: [], requireContextRole: ["tablist"], requiredContextRole: ["tablist"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]] }, _default2 = tabRole2;
  exports.default = _default2;
} });
var require_tableRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/tableRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tableRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-colcount": null, "aria-rowcount": null }, relatedConcepts: [{ concept: { name: "table" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = tableRole2;
  exports.default = _default2;
} });
var require_tablistRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/tablistRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tablistRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-level": null, "aria-multiselectable": null, "aria-orientation": "horizontal" }, relatedConcepts: [{ module: "DAISY", concept: { name: "guide" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["tab"]], requiredProps: {}, superClass: [["roletype", "widget", "composite"]] }, _default2 = tablistRole2;
  exports.default = _default2;
} });
var require_tabpanelRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tabpanelRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = tabpanelRole2;
  exports.default = _default2;
} });
var require_termRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/termRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var termRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dfn" }, module: "HTML" }, { concept: { name: "dt" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = termRole2;
  exports.default = _default2;
} });
var require_textboxRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/textboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var textboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-autocomplete": null, "aria-errormessage": null, "aria-haspopup": null, "aria-invalid": null, "aria-multiline": null, "aria-placeholder": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["undefined"], name: "type" }, { constraints: ["undefined"], name: "list" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "email" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "tel" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "text" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { name: "input" }, module: "XForms" }, { concept: { name: "textarea" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "input"]] }, _default2 = textboxRole2;
  exports.default = _default2;
} });
var require_timeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/timeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var timeRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = timeRole2;
  exports.default = _default2;
} });
var require_timerRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/timerRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var timerRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "status"]] }, _default2 = timerRole2;
  exports.default = _default2;
} });
var require_toolbarRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var toolbarRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "horizontal" }, relatedConcepts: [{ concept: { name: "menubar" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"]] }, _default2 = toolbarRole2;
  exports.default = _default2;
} });
var require_tooltipRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tooltipRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = tooltipRole2;
  exports.default = _default2;
} });
var require_treeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/treeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var treeRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-multiselectable": null, "aria-required": null, "aria-orientation": "vertical" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["treeitem", "group"], ["treeitem"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = treeRole2;
  exports.default = _default2;
} });
var require_treegridRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/treegridRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var treegridRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]] }, _default2 = treegridRole2;
  exports.default = _default2;
} });
var require_treeitemRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var treeitemRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-expanded": null, "aria-haspopup": null }, relatedConcepts: [], requireContextRole: ["group", "tree"], requiredContextRole: ["group", "tree"], requiredOwnedElements: [], requiredProps: { "aria-selected": null }, superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]] }, _default2 = treeitemRole2;
  exports.default = _default2;
} });
var require_ariaLiteralRoles = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _alertRole2 = _interopRequireDefault2(require_alertRole()), _alertdialogRole2 = _interopRequireDefault2(require_alertdialogRole()), _applicationRole2 = _interopRequireDefault2(require_applicationRole()), _articleRole2 = _interopRequireDefault2(require_articleRole()), _bannerRole2 = _interopRequireDefault2(require_bannerRole()), _blockquoteRole2 = _interopRequireDefault2(require_blockquoteRole()), _buttonRole2 = _interopRequireDefault2(require_buttonRole()), _captionRole2 = _interopRequireDefault2(require_captionRole()), _cellRole2 = _interopRequireDefault2(require_cellRole()), _checkboxRole2 = _interopRequireDefault2(require_checkboxRole()), _codeRole2 = _interopRequireDefault2(require_codeRole()), _columnheaderRole2 = _interopRequireDefault2(require_columnheaderRole()), _comboboxRole2 = _interopRequireDefault2(require_comboboxRole()), _complementaryRole2 = _interopRequireDefault2(require_complementaryRole()), _contentinfoRole2 = _interopRequireDefault2(require_contentinfoRole()), _definitionRole2 = _interopRequireDefault2(require_definitionRole()), _deletionRole2 = _interopRequireDefault2(require_deletionRole()), _dialogRole2 = _interopRequireDefault2(require_dialogRole()), _directoryRole2 = _interopRequireDefault2(require_directoryRole()), _documentRole2 = _interopRequireDefault2(require_documentRole()), _emphasisRole2 = _interopRequireDefault2(require_emphasisRole()), _feedRole2 = _interopRequireDefault2(require_feedRole()), _figureRole2 = _interopRequireDefault2(require_figureRole()), _formRole2 = _interopRequireDefault2(require_formRole()), _genericRole2 = _interopRequireDefault2(require_genericRole()), _gridRole2 = _interopRequireDefault2(require_gridRole()), _gridcellRole2 = _interopRequireDefault2(require_gridcellRole()), _groupRole2 = _interopRequireDefault2(require_groupRole()), _headingRole2 = _interopRequireDefault2(require_headingRole()), _imgRole2 = _interopRequireDefault2(require_imgRole()), _insertionRole2 = _interopRequireDefault2(require_insertionRole()), _linkRole2 = _interopRequireDefault2(require_linkRole()), _listRole2 = _interopRequireDefault2(require_listRole()), _listboxRole2 = _interopRequireDefault2(require_listboxRole()), _listitemRole2 = _interopRequireDefault2(require_listitemRole()), _logRole2 = _interopRequireDefault2(require_logRole()), _mainRole2 = _interopRequireDefault2(require_mainRole()), _marqueeRole2 = _interopRequireDefault2(require_marqueeRole()), _mathRole2 = _interopRequireDefault2(require_mathRole()), _menuRole2 = _interopRequireDefault2(require_menuRole()), _menubarRole2 = _interopRequireDefault2(require_menubarRole()), _menuitemRole2 = _interopRequireDefault2(require_menuitemRole()), _menuitemcheckboxRole2 = _interopRequireDefault2(require_menuitemcheckboxRole()), _menuitemradioRole2 = _interopRequireDefault2(require_menuitemradioRole()), _meterRole2 = _interopRequireDefault2(require_meterRole()), _navigationRole2 = _interopRequireDefault2(require_navigationRole()), _noneRole2 = _interopRequireDefault2(require_noneRole()), _noteRole2 = _interopRequireDefault2(require_noteRole()), _optionRole2 = _interopRequireDefault2(require_optionRole()), _paragraphRole2 = _interopRequireDefault2(require_paragraphRole()), _presentationRole2 = _interopRequireDefault2(require_presentationRole()), _progressbarRole2 = _interopRequireDefault2(require_progressbarRole()), _radioRole2 = _interopRequireDefault2(require_radioRole()), _radiogroupRole2 = _interopRequireDefault2(require_radiogroupRole()), _regionRole2 = _interopRequireDefault2(require_regionRole()), _rowRole2 = _interopRequireDefault2(require_rowRole()), _rowgroupRole2 = _interopRequireDefault2(require_rowgroupRole()), _rowheaderRole2 = _interopRequireDefault2(require_rowheaderRole()), _scrollbarRole2 = _interopRequireDefault2(require_scrollbarRole()), _searchRole2 = _interopRequireDefault2(require_searchRole()), _searchboxRole2 = _interopRequireDefault2(require_searchboxRole()), _separatorRole2 = _interopRequireDefault2(require_separatorRole()), _sliderRole2 = _interopRequireDefault2(require_sliderRole()), _spinbuttonRole2 = _interopRequireDefault2(require_spinbuttonRole()), _statusRole2 = _interopRequireDefault2(require_statusRole()), _strongRole2 = _interopRequireDefault2(require_strongRole()), _subscriptRole2 = _interopRequireDefault2(require_subscriptRole()), _superscriptRole2 = _interopRequireDefault2(require_superscriptRole()), _switchRole2 = _interopRequireDefault2(require_switchRole()), _tabRole2 = _interopRequireDefault2(require_tabRole()), _tableRole2 = _interopRequireDefault2(require_tableRole()), _tablistRole2 = _interopRequireDefault2(require_tablistRole()), _tabpanelRole2 = _interopRequireDefault2(require_tabpanelRole()), _termRole2 = _interopRequireDefault2(require_termRole()), _textboxRole2 = _interopRequireDefault2(require_textboxRole()), _timeRole2 = _interopRequireDefault2(require_timeRole()), _timerRole2 = _interopRequireDefault2(require_timerRole()), _toolbarRole2 = _interopRequireDefault2(require_toolbarRole()), _tooltipRole2 = _interopRequireDefault2(require_tooltipRole()), _treeRole2 = _interopRequireDefault2(require_treeRole()), _treegridRole2 = _interopRequireDefault2(require_treegridRole()), _treeitemRole2 = _interopRequireDefault2(require_treeitemRole());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaLiteralRoles2 = [["alert", _alertRole2.default], ["alertdialog", _alertdialogRole2.default], ["application", _applicationRole2.default], ["article", _articleRole2.default], ["banner", _bannerRole2.default], ["blockquote", _blockquoteRole2.default], ["button", _buttonRole2.default], ["caption", _captionRole2.default], ["cell", _cellRole2.default], ["checkbox", _checkboxRole2.default], ["code", _codeRole2.default], ["columnheader", _columnheaderRole2.default], ["combobox", _comboboxRole2.default], ["complementary", _complementaryRole2.default], ["contentinfo", _contentinfoRole2.default], ["definition", _definitionRole2.default], ["deletion", _deletionRole2.default], ["dialog", _dialogRole2.default], ["directory", _directoryRole2.default], ["document", _documentRole2.default], ["emphasis", _emphasisRole2.default], ["feed", _feedRole2.default], ["figure", _figureRole2.default], ["form", _formRole2.default], ["generic", _genericRole2.default], ["grid", _gridRole2.default], ["gridcell", _gridcellRole2.default], ["group", _groupRole2.default], ["heading", _headingRole2.default], ["img", _imgRole2.default], ["insertion", _insertionRole2.default], ["link", _linkRole2.default], ["list", _listRole2.default], ["listbox", _listboxRole2.default], ["listitem", _listitemRole2.default], ["log", _logRole2.default], ["main", _mainRole2.default], ["marquee", _marqueeRole2.default], ["math", _mathRole2.default], ["menu", _menuRole2.default], ["menubar", _menubarRole2.default], ["menuitem", _menuitemRole2.default], ["menuitemcheckbox", _menuitemcheckboxRole2.default], ["menuitemradio", _menuitemradioRole2.default], ["meter", _meterRole2.default], ["navigation", _navigationRole2.default], ["none", _noneRole2.default], ["note", _noteRole2.default], ["option", _optionRole2.default], ["paragraph", _paragraphRole2.default], ["presentation", _presentationRole2.default], ["progressbar", _progressbarRole2.default], ["radio", _radioRole2.default], ["radiogroup", _radiogroupRole2.default], ["region", _regionRole2.default], ["row", _rowRole2.default], ["rowgroup", _rowgroupRole2.default], ["rowheader", _rowheaderRole2.default], ["scrollbar", _scrollbarRole2.default], ["search", _searchRole2.default], ["searchbox", _searchboxRole2.default], ["separator", _separatorRole2.default], ["slider", _sliderRole2.default], ["spinbutton", _spinbuttonRole2.default], ["status", _statusRole2.default], ["strong", _strongRole2.default], ["subscript", _subscriptRole2.default], ["superscript", _superscriptRole2.default], ["switch", _switchRole2.default], ["tab", _tabRole2.default], ["table", _tableRole2.default], ["tablist", _tablistRole2.default], ["tabpanel", _tabpanelRole2.default], ["term", _termRole2.default], ["textbox", _textboxRole2.default], ["time", _timeRole2.default], ["timer", _timerRole2.default], ["toolbar", _toolbarRole2.default], ["tooltip", _tooltipRole2.default], ["tree", _treeRole2.default], ["treegrid", _treegridRole2.default], ["treeitem", _treeitemRole2.default]], _default2 = ariaLiteralRoles2;
  exports.default = _default2;
} });
var require_docAbstractRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAbstractRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "abstract [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docAbstractRole2;
  exports.default = _default2;
} });
var require_docAcknowledgmentsRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAcknowledgmentsRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "acknowledgments [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docAcknowledgmentsRole2;
  exports.default = _default2;
} });
var require_docAfterwordRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAfterwordRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "afterword [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docAfterwordRole2;
  exports.default = _default2;
} });
var require_docAppendixRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAppendixRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "appendix [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docAppendixRole2;
  exports.default = _default2;
} });
var require_docBacklinkRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBacklinkRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "content"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "referrer [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docBacklinkRole2;
  exports.default = _default2;
} });
var require_docBiblioentryRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBiblioentryRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "EPUB biblioentry [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: ["doc-bibliography"], requiredContextRole: ["doc-bibliography"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "listitem"]] }, _default2 = docBiblioentryRole2;
  exports.default = _default2;
} });
var require_docBibliographyRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBibliographyRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "bibliography [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["doc-biblioentry"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docBibliographyRole2;
  exports.default = _default2;
} });
var require_docBibliorefRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBibliorefRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "biblioref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docBibliorefRole2;
  exports.default = _default2;
} });
var require_docChapterRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docChapterRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "chapter [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docChapterRole2;
  exports.default = _default2;
} });
var require_docColophonRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docColophonRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "colophon [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docColophonRole2;
  exports.default = _default2;
} });
var require_docConclusionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docConclusionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "conclusion [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docConclusionRole2;
  exports.default = _default2;
} });
var require_docCoverRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docCoverRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "cover [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "img"]] }, _default2 = docCoverRole2;
  exports.default = _default2;
} });
var require_docCreditRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docCreditRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "credit [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docCreditRole2;
  exports.default = _default2;
} });
var require_docCreditsRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docCreditsRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "credits [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docCreditsRole2;
  exports.default = _default2;
} });
var require_docDedicationRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docDedicationRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "dedication [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docDedicationRole2;
  exports.default = _default2;
} });
var require_docEndnoteRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEndnoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "rearnote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: ["doc-endnotes"], requiredContextRole: ["doc-endnotes"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "listitem"]] }, _default2 = docEndnoteRole2;
  exports.default = _default2;
} });
var require_docEndnotesRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEndnotesRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "rearnotes [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["doc-endnote"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docEndnotesRole2;
  exports.default = _default2;
} });
var require_docEpigraphRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEpigraphRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "epigraph [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docEpigraphRole2;
  exports.default = _default2;
} });
var require_docEpilogueRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEpilogueRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "epilogue [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docEpilogueRole2;
  exports.default = _default2;
} });
var require_docErrataRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docErrataRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "errata [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docErrataRole2;
  exports.default = _default2;
} });
var require_docExampleRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docExampleRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docExampleRole2;
  exports.default = _default2;
} });
var require_docFootnoteRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docFootnoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "footnote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docFootnoteRole2;
  exports.default = _default2;
} });
var require_docForewordRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docForewordRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "foreword [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docForewordRole2;
  exports.default = _default2;
} });
var require_docGlossaryRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docGlossaryRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "glossary [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["definition"], ["term"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docGlossaryRole2;
  exports.default = _default2;
} });
var require_docGlossrefRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docGlossrefRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "glossref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docGlossrefRole2;
  exports.default = _default2;
} });
var require_docIndexRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docIndexRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "index [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default2 = docIndexRole2;
  exports.default = _default2;
} });
var require_docIntroductionRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docIntroductionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "introduction [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docIntroductionRole2;
  exports.default = _default2;
} });
var require_docNoterefRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docNoterefRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "noteref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docNoterefRole2;
  exports.default = _default2;
} });
var require_docNoticeRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docNoticeRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "notice [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "note"]] }, _default2 = docNoticeRole2;
  exports.default = _default2;
} });
var require_docPagebreakRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPagebreakRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "pagebreak [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "separator"]] }, _default2 = docPagebreakRole2;
  exports.default = _default2;
} });
var require_docPagelistRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPagelistRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "page-list [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default2 = docPagelistRole2;
  exports.default = _default2;
} });
var require_docPartRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPartRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "part [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docPartRole2;
  exports.default = _default2;
} });
var require_docPrefaceRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPrefaceRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "preface [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docPrefaceRole2;
  exports.default = _default2;
} });
var require_docPrologueRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPrologueRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "prologue [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docPrologueRole2;
  exports.default = _default2;
} });
var require_docPullquoteRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPullquoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "pullquote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["none"]] }, _default2 = docPullquoteRole2;
  exports.default = _default2;
} });
var require_docQnaRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docQnaRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "qna [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docQnaRole2;
  exports.default = _default2;
} });
var require_docSubtitleRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docSubtitleRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "subtitle [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "sectionhead"]] }, _default2 = docSubtitleRole2;
  exports.default = _default2;
} });
var require_docTipRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docTipRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "help [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "note"]] }, _default2 = docTipRole2;
  exports.default = _default2;
} });
var require_docTocRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docTocRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "toc [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default2 = docTocRole2;
  exports.default = _default2;
} });
var require_ariaDpubRoles = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _docAbstractRole2 = _interopRequireDefault2(require_docAbstractRole()), _docAcknowledgmentsRole2 = _interopRequireDefault2(require_docAcknowledgmentsRole()), _docAfterwordRole2 = _interopRequireDefault2(require_docAfterwordRole()), _docAppendixRole2 = _interopRequireDefault2(require_docAppendixRole()), _docBacklinkRole2 = _interopRequireDefault2(require_docBacklinkRole()), _docBiblioentryRole2 = _interopRequireDefault2(require_docBiblioentryRole()), _docBibliographyRole2 = _interopRequireDefault2(require_docBibliographyRole()), _docBibliorefRole2 = _interopRequireDefault2(require_docBibliorefRole()), _docChapterRole2 = _interopRequireDefault2(require_docChapterRole()), _docColophonRole2 = _interopRequireDefault2(require_docColophonRole()), _docConclusionRole2 = _interopRequireDefault2(require_docConclusionRole()), _docCoverRole2 = _interopRequireDefault2(require_docCoverRole()), _docCreditRole2 = _interopRequireDefault2(require_docCreditRole()), _docCreditsRole2 = _interopRequireDefault2(require_docCreditsRole()), _docDedicationRole2 = _interopRequireDefault2(require_docDedicationRole()), _docEndnoteRole2 = _interopRequireDefault2(require_docEndnoteRole()), _docEndnotesRole2 = _interopRequireDefault2(require_docEndnotesRole()), _docEpigraphRole2 = _interopRequireDefault2(require_docEpigraphRole()), _docEpilogueRole2 = _interopRequireDefault2(require_docEpilogueRole()), _docErrataRole2 = _interopRequireDefault2(require_docErrataRole()), _docExampleRole2 = _interopRequireDefault2(require_docExampleRole()), _docFootnoteRole2 = _interopRequireDefault2(require_docFootnoteRole()), _docForewordRole2 = _interopRequireDefault2(require_docForewordRole()), _docGlossaryRole2 = _interopRequireDefault2(require_docGlossaryRole()), _docGlossrefRole2 = _interopRequireDefault2(require_docGlossrefRole()), _docIndexRole2 = _interopRequireDefault2(require_docIndexRole()), _docIntroductionRole2 = _interopRequireDefault2(require_docIntroductionRole()), _docNoterefRole2 = _interopRequireDefault2(require_docNoterefRole()), _docNoticeRole2 = _interopRequireDefault2(require_docNoticeRole()), _docPagebreakRole2 = _interopRequireDefault2(require_docPagebreakRole()), _docPagelistRole2 = _interopRequireDefault2(require_docPagelistRole()), _docPartRole2 = _interopRequireDefault2(require_docPartRole()), _docPrefaceRole2 = _interopRequireDefault2(require_docPrefaceRole()), _docPrologueRole2 = _interopRequireDefault2(require_docPrologueRole()), _docPullquoteRole2 = _interopRequireDefault2(require_docPullquoteRole()), _docQnaRole2 = _interopRequireDefault2(require_docQnaRole()), _docSubtitleRole2 = _interopRequireDefault2(require_docSubtitleRole()), _docTipRole2 = _interopRequireDefault2(require_docTipRole()), _docTocRole2 = _interopRequireDefault2(require_docTocRole());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaDpubRoles2 = [["doc-abstract", _docAbstractRole2.default], ["doc-acknowledgments", _docAcknowledgmentsRole2.default], ["doc-afterword", _docAfterwordRole2.default], ["doc-appendix", _docAppendixRole2.default], ["doc-backlink", _docBacklinkRole2.default], ["doc-biblioentry", _docBiblioentryRole2.default], ["doc-bibliography", _docBibliographyRole2.default], ["doc-biblioref", _docBibliorefRole2.default], ["doc-chapter", _docChapterRole2.default], ["doc-colophon", _docColophonRole2.default], ["doc-conclusion", _docConclusionRole2.default], ["doc-cover", _docCoverRole2.default], ["doc-credit", _docCreditRole2.default], ["doc-credits", _docCreditsRole2.default], ["doc-dedication", _docDedicationRole2.default], ["doc-endnote", _docEndnoteRole2.default], ["doc-endnotes", _docEndnotesRole2.default], ["doc-epigraph", _docEpigraphRole2.default], ["doc-epilogue", _docEpilogueRole2.default], ["doc-errata", _docErrataRole2.default], ["doc-example", _docExampleRole2.default], ["doc-footnote", _docFootnoteRole2.default], ["doc-foreword", _docForewordRole2.default], ["doc-glossary", _docGlossaryRole2.default], ["doc-glossref", _docGlossrefRole2.default], ["doc-index", _docIndexRole2.default], ["doc-introduction", _docIntroductionRole2.default], ["doc-noteref", _docNoterefRole2.default], ["doc-notice", _docNoticeRole2.default], ["doc-pagebreak", _docPagebreakRole2.default], ["doc-pagelist", _docPagelistRole2.default], ["doc-part", _docPartRole2.default], ["doc-preface", _docPrefaceRole2.default], ["doc-prologue", _docPrologueRole2.default], ["doc-pullquote", _docPullquoteRole2.default], ["doc-qna", _docQnaRole2.default], ["doc-subtitle", _docSubtitleRole2.default], ["doc-tip", _docTipRole2.default], ["doc-toc", _docTocRole2.default]], _default2 = ariaDpubRoles2;
  exports.default = _default2;
} });
var require_graphicsDocumentRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var graphicsDocumentRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ module: "GRAPHICS", concept: { name: "graphics-object" } }, { module: "ARIA", concept: { name: "img" } }, { module: "ARIA", concept: { name: "article" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "document"]] }, _default2 = graphicsDocumentRole2;
  exports.default = _default2;
} });
var require_graphicsObjectRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var graphicsObjectRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ module: "GRAPHICS", concept: { name: "graphics-document" } }, { module: "ARIA", concept: { name: "group" } }, { module: "ARIA", concept: { name: "img" } }, { module: "GRAPHICS", concept: { name: "graphics-symbol" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"]] }, _default2 = graphicsObjectRole2;
  exports.default = _default2;
} });
var require_graphicsSymbolRole = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var graphicsSymbolRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "img"]] }, _default2 = graphicsSymbolRole2;
  exports.default = _default2;
} });
var require_ariaGraphicsRoles = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _graphicsDocumentRole2 = _interopRequireDefault2(require_graphicsDocumentRole()), _graphicsObjectRole2 = _interopRequireDefault2(require_graphicsObjectRole()), _graphicsSymbolRole2 = _interopRequireDefault2(require_graphicsSymbolRole());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaGraphicsRoles2 = [["graphics-document", _graphicsDocumentRole2.default], ["graphics-object", _graphicsObjectRole2.default], ["graphics-symbol", _graphicsSymbolRole2.default]], _default2 = ariaGraphicsRoles2;
  exports.default = _default2;
} });
var require_rolesMap = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/rolesMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _ariaAbstractRoles2 = _interopRequireDefault2(require_ariaAbstractRoles()), _ariaLiteralRoles2 = _interopRequireDefault2(require_ariaLiteralRoles()), _ariaDpubRoles2 = _interopRequireDefault2(require_ariaDpubRoles()), _ariaGraphicsRoles2 = _interopRequireDefault2(require_ariaGraphicsRoles()), _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _defineProperty5(obj, key, value) {
    return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i2 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _slicedToArray2(arr, i2) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
    return arr2;
  }
  function _iterableToArrayLimit2(arr, i2) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i2 && _arr.length === i2)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var roles3 = [].concat(_ariaAbstractRoles2.default, _ariaLiteralRoles2.default, _ariaDpubRoles2.default, _ariaGraphicsRoles2.default);
  roles3.forEach(function(_ref) {
    var _ref2 = _slicedToArray2(_ref, 2), roleDefinition = _ref2[1], _iterator = _createForOfIteratorHelper2(roleDefinition.superClass), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var superClassIter = _step.value, _iterator2 = _createForOfIteratorHelper2(superClassIter), _step2;
        try {
          var _loop = function() {
            var superClassName = _step2.value, superClassRoleTuple = roles3.find(function(_ref3) {
              var _ref4 = _slicedToArray2(_ref3, 1), name = _ref4[0];
              return name === superClassName;
            });
            if (superClassRoleTuple) for (var superClassDefinition = superClassRoleTuple[1], _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
              var prop = _Object$keys[_i2];
              Object.prototype.hasOwnProperty.call(roleDefinition.props, prop) || Object.assign(roleDefinition.props, _defineProperty5({}, prop, superClassDefinition.props[prop]));
            }
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) _loop();
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  var rolesMap2 = { entries: function() {
    return roles3;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator3 = _createForOfIteratorHelper2(roles3), _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
        var _step3$value = _slicedToArray2(_step3.value, 2), key = _step3$value[0], values6 = _step3$value[1];
        fn3.call(thisArg, values6, key, roles3);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }, get: function(key) {
    var item = roles3.find(function(tuple) {
      return tuple[0] === key;
    });
    return item && item[1];
  }, has: function(key) {
    return !!rolesMap2.get(key);
  }, keys: function() {
    return roles3.map(function(_ref5) {
      var _ref6 = _slicedToArray2(_ref5, 1), key = _ref6[0];
      return key;
    });
  }, values: function() {
    return roles3.map(function(_ref7) {
      var _ref8 = _slicedToArray2(_ref7, 2), values22 = _ref8[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(rolesMap2, rolesMap2.entries());
  exports.default = _default2;
} });
var require_isArguments = __commonJS({ "../../node_modules/object-keys/isArguments.js"(exports, module2) {
  var toStr3 = Object.prototype.toString;
  module2.exports = function(value) {
    var str = toStr3.call(value), isArgs = str === "[object Arguments]";
    return isArgs || (isArgs = str !== "[object Array]" && value !== null && typeof value == "object" && typeof value.length == "number" && value.length >= 0 && toStr3.call(value.callee) === "[object Function]"), isArgs;
  };
} });
var require_implementation = __commonJS({ "../../node_modules/object-keys/implementation.js"(exports, module2) {
  var keysShim;
  Object.keys || (has7 = Object.prototype.hasOwnProperty, toStr3 = Object.prototype.toString, isArgs = require_isArguments(), isEnumerable = Object.prototype.propertyIsEnumerable, hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString"), hasProtoEnumBug = isEnumerable.call(function() {
  }, "prototype"), dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], equalsConstructorPrototype = function(o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
  }, excludedKeys = { $applicationCache: true, $console: true, $external: true, $frame: true, $frameElement: true, $frames: true, $innerHeight: true, $innerWidth: true, $onmozfullscreenchange: true, $onmozfullscreenerror: true, $outerHeight: true, $outerWidth: true, $pageXOffset: true, $pageYOffset: true, $parent: true, $scrollLeft: true, $scrollTop: true, $scrollX: true, $scrollY: true, $self: true, $webkitIndexedDB: true, $webkitStorageInfo: true, $window: true }, hasAutomationEqualityBug = function() {
    if (typeof window > "u") return false;
    for (var k2 in window) try {
      if (!excludedKeys["$" + k2] && has7.call(window, k2) && window[k2] !== null && typeof window[k2] == "object") try {
        equalsConstructorPrototype(window[k2]);
      } catch {
        return true;
      }
    } catch {
      return true;
    }
    return false;
  }(), equalsConstructorPrototypeIfNotBuggy = function(o) {
    if (typeof window > "u" || !hasAutomationEqualityBug) return equalsConstructorPrototype(o);
    try {
      return equalsConstructorPrototype(o);
    } catch {
      return false;
    }
  }, keysShim = function(object) {
    var isObject2 = object !== null && typeof object == "object", isFunction = toStr3.call(object) === "[object Function]", isArguments = isArgs(object), isString = isObject2 && toStr3.call(object) === "[object String]", theKeys = [];
    if (!isObject2 && !isFunction && !isArguments) throw new TypeError("Object.keys called on a non-object");
    var skipProto = hasProtoEnumBug && isFunction;
    if (isString && object.length > 0 && !has7.call(object, 0)) for (var i2 = 0; i2 < object.length; ++i2) theKeys.push(String(i2));
    if (isArguments && object.length > 0) for (var j2 = 0; j2 < object.length; ++j2) theKeys.push(String(j2));
    else for (var name in object) !(skipProto && name === "prototype") && has7.call(object, name) && theKeys.push(String(name));
    if (hasDontEnumBug) for (var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object), k2 = 0; k2 < dontEnums.length; ++k2) !(skipConstructor && dontEnums[k2] === "constructor") && has7.call(object, dontEnums[k2]) && theKeys.push(dontEnums[k2]);
    return theKeys;
  });
  var has7, toStr3, isArgs, isEnumerable, hasDontEnumBug, hasProtoEnumBug, dontEnums, equalsConstructorPrototype, excludedKeys, hasAutomationEqualityBug, equalsConstructorPrototypeIfNotBuggy;
  module2.exports = keysShim;
} });
var require_object_keys = __commonJS({ "../../node_modules/object-keys/index.js"(exports, module2) {
  var slice = Array.prototype.slice, isArgs = require_isArguments(), origKeys = Object.keys, keysShim = origKeys ? function(o) {
    return origKeys(o);
  } : require_implementation(), originalKeys = Object.keys;
  keysShim.shim = function() {
    if (Object.keys) {
      var keysWorksWithArguments = function() {
        var args = Object.keys(arguments);
        return args && args.length === arguments.length;
      }(1, 2);
      keysWorksWithArguments || (Object.keys = function(object) {
        return isArgs(object) ? originalKeys(slice.call(object)) : originalKeys(object);
      });
    } else Object.keys = keysShim;
    return Object.keys || keysShim;
  };
  module2.exports = keysShim;
} });
var require_es_errors = __commonJS({ "../../node_modules/es-errors/index.js"(exports, module2) {
  module2.exports = Error;
} });
var require_eval = __commonJS({ "../../node_modules/es-errors/eval.js"(exports, module2) {
  module2.exports = EvalError;
} });
var require_range = __commonJS({ "../../node_modules/es-errors/range.js"(exports, module2) {
  module2.exports = RangeError;
} });
var require_ref = __commonJS({ "../../node_modules/es-errors/ref.js"(exports, module2) {
  module2.exports = ReferenceError;
} });
var require_syntax = __commonJS({ "../../node_modules/es-errors/syntax.js"(exports, module2) {
  module2.exports = SyntaxError;
} });
var require_type = __commonJS({ "../../node_modules/es-errors/type.js"(exports, module2) {
  module2.exports = TypeError;
} });
var require_uri = __commonJS({ "../../node_modules/es-errors/uri.js"(exports, module2) {
  module2.exports = URIError;
} });
var require_shams = __commonJS({ "../../node_modules/has-symbols/shams.js"(exports, module2) {
  module2.exports = function() {
    if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function") return false;
    if (typeof Symbol.iterator == "symbol") return true;
    var obj = {}, sym = Symbol("test"), symObj = Object(sym);
    if (typeof sym == "string" || Object.prototype.toString.call(sym) !== "[object Symbol]" || Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) return false;
    if (typeof Object.keys == "function" && Object.keys(obj).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym || !Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor == "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
  };
} });
var require_has_symbols = __commonJS({ "../../node_modules/has-symbols/index.js"(exports, module2) {
  var origSymbol = typeof Symbol < "u" && Symbol, hasSymbolSham = require_shams();
  module2.exports = function() {
    return typeof origSymbol != "function" || typeof Symbol != "function" || typeof origSymbol("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? false : hasSymbolSham();
  };
} });
var require_has_proto = __commonJS({ "../../node_modules/has-proto/index.js"(exports, module2) {
  var test2 = { __proto__: null, foo: {} }, $Object = Object;
  module2.exports = function() {
    return { __proto__: test2 }.foo === test2.foo && !(test2 instanceof $Object);
  };
} });
var require_implementation2 = __commonJS({ "../../node_modules/function-bind/implementation.js"(exports, module2) {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ", toStr3 = Object.prototype.toString, max = Math.max, funcType = "[object Function]", concatty = function(a, b2) {
    for (var arr = [], i2 = 0; i2 < a.length; i2 += 1) arr[i2] = a[i2];
    for (var j2 = 0; j2 < b2.length; j2 += 1) arr[j2 + a.length] = b2[j2];
    return arr;
  }, slicy = function(arrLike, offset) {
    for (var arr = [], i2 = offset, j2 = 0; i2 < arrLike.length; i2 += 1, j2 += 1) arr[j2] = arrLike[i2];
    return arr;
  }, joiny = function(arr, joiner) {
    for (var str = "", i2 = 0; i2 < arr.length; i2 += 1) str += arr[i2], i2 + 1 < arr.length && (str += joiner);
    return str;
  };
  module2.exports = function(that) {
    var target = this;
    if (typeof target != "function" || toStr3.apply(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    for (var args = slicy(arguments, 1), bound, binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, concatty(args, arguments));
        return Object(result) === result ? result : this;
      }
      return target.apply(that, concatty(args, arguments));
    }, boundLength = max(0, target.length - args.length), boundArgs = [], i2 = 0; i2 < boundLength; i2++) boundArgs[i2] = "$" + i2;
    if (bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder), target.prototype) {
      var Empty = function() {
      };
      Empty.prototype = target.prototype, bound.prototype = new Empty(), Empty.prototype = null;
    }
    return bound;
  };
} });
var require_function_bind = __commonJS({ "../../node_modules/function-bind/index.js"(exports, module2) {
  var implementation = require_implementation2();
  module2.exports = Function.prototype.bind || implementation;
} });
var require_hasown = __commonJS({ "../../node_modules/hasown/index.js"(exports, module2) {
  var call = Function.prototype.call, $hasOwn = Object.prototype.hasOwnProperty, bind = require_function_bind();
  module2.exports = bind.call(call, $hasOwn);
} });
var require_get_intrinsic = __commonJS({ "../../node_modules/get-intrinsic/index.js"(exports, module2) {
  var undefined2, $Error = require_es_errors(), $EvalError = require_eval(), $RangeError = require_range(), $ReferenceError = require_ref(), $SyntaxError = require_syntax(), $TypeError = require_type(), $URIError = require_uri(), $Function = Function, getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch {
    }
  }, $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) try {
    $gOPD({}, "");
  } catch {
    $gOPD = null;
  }
  var throwTypeError = function() {
    throw new $TypeError();
  }, ThrowTypeError = $gOPD ? function() {
    try {
      return arguments.callee, throwTypeError;
    } catch {
      try {
        return $gOPD(arguments, "callee").get;
      } catch {
        return throwTypeError;
      }
    }
  }() : throwTypeError, hasSymbols = require_has_symbols()(), hasProto = require_has_proto()(), getProto = Object.getPrototypeOf || (hasProto ? function(x2) {
    return x2.__proto__;
  } : null), needsEval = {}, TypedArray = typeof Uint8Array > "u" || !getProto ? undefined2 : getProto(Uint8Array), INTRINSICS = { __proto__: null, "%AggregateError%": typeof AggregateError > "u" ? undefined2 : AggregateError, "%Array%": Array, "%ArrayBuffer%": typeof ArrayBuffer > "u" ? undefined2 : ArrayBuffer, "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2, "%AsyncFromSyncIteratorPrototype%": undefined2, "%AsyncFunction%": needsEval, "%AsyncGenerator%": needsEval, "%AsyncGeneratorFunction%": needsEval, "%AsyncIteratorPrototype%": needsEval, "%Atomics%": typeof Atomics > "u" ? undefined2 : Atomics, "%BigInt%": typeof BigInt > "u" ? undefined2 : BigInt, "%BigInt64Array%": typeof BigInt64Array > "u" ? undefined2 : BigInt64Array, "%BigUint64Array%": typeof BigUint64Array > "u" ? undefined2 : BigUint64Array, "%Boolean%": Boolean, "%DataView%": typeof DataView > "u" ? undefined2 : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": $Error, "%eval%": eval, "%EvalError%": $EvalError, "%Float32Array%": typeof Float32Array > "u" ? undefined2 : Float32Array, "%Float64Array%": typeof Float64Array > "u" ? undefined2 : Float64Array, "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? undefined2 : FinalizationRegistry, "%Function%": $Function, "%GeneratorFunction%": needsEval, "%Int8Array%": typeof Int8Array > "u" ? undefined2 : Int8Array, "%Int16Array%": typeof Int16Array > "u" ? undefined2 : Int16Array, "%Int32Array%": typeof Int32Array > "u" ? undefined2 : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2, "%JSON%": typeof JSON == "object" ? JSON : undefined2, "%Map%": typeof Map > "u" ? undefined2 : Map, "%MapIteratorPrototype%": typeof Map > "u" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()), "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": typeof Promise > "u" ? undefined2 : Promise, "%Proxy%": typeof Proxy > "u" ? undefined2 : Proxy, "%RangeError%": $RangeError, "%ReferenceError%": $ReferenceError, "%Reflect%": typeof Reflect > "u" ? undefined2 : Reflect, "%RegExp%": RegExp, "%Set%": typeof Set > "u" ? undefined2 : Set, "%SetIteratorPrototype%": typeof Set > "u" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()), "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? undefined2 : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2, "%Symbol%": hasSymbols ? Symbol : undefined2, "%SyntaxError%": $SyntaxError, "%ThrowTypeError%": ThrowTypeError, "%TypedArray%": TypedArray, "%TypeError%": $TypeError, "%Uint8Array%": typeof Uint8Array > "u" ? undefined2 : Uint8Array, "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? undefined2 : Uint8ClampedArray, "%Uint16Array%": typeof Uint16Array > "u" ? undefined2 : Uint16Array, "%Uint32Array%": typeof Uint32Array > "u" ? undefined2 : Uint32Array, "%URIError%": $URIError, "%WeakMap%": typeof WeakMap > "u" ? undefined2 : WeakMap, "%WeakRef%": typeof WeakRef > "u" ? undefined2 : WeakRef, "%WeakSet%": typeof WeakSet > "u" ? undefined2 : WeakSet };
  if (getProto) try {
    null.error;
  } catch (e2) {
    errorProto = getProto(getProto(e2)), INTRINSICS["%Error.prototype%"] = errorProto;
  }
  var errorProto, doEval = function doEval2(name) {
    var value;
    if (name === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
    else if (name === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
    else if (name === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
    else if (name === "%AsyncGenerator%") {
      var fn3 = doEval2("%AsyncGeneratorFunction%");
      fn3 && (value = fn3.prototype);
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      gen && getProto && (value = getProto(gen.prototype));
    }
    return INTRINSICS[name] = value, value;
  }, LEGACY_ALIASES = { __proto__: null, "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, bind = require_function_bind(), hasOwn = require_hasown(), $concat = bind.call(Function.call, Array.prototype.concat), $spliceApply = bind.call(Function.apply, Array.prototype.splice), $replace = bind.call(Function.call, String.prototype.replace), $strSlice = bind.call(Function.call, String.prototype.slice), $exec = bind.call(Function.call, RegExp.prototype.exec), rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, reEscapeChar = /\\(\\)?/g, stringToPath = function(string2) {
    var first = $strSlice(string2, 0, 1), last = $strSlice(string2, -1);
    if (first === "%" && last !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    if (last === "%" && first !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    var result = [];
    return $replace(string2, rePropName, function(match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    }), result;
  }, getBaseIntrinsic = function(name, allowMissing) {
    var intrinsicName = name, alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName) && (alias = LEGACY_ALIASES[intrinsicName], intrinsicName = "%" + alias[0] + "%"), hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval && (value = doEval(intrinsicName)), typeof value > "u" && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      return { alias, name: intrinsicName, value };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  module2.exports = function(name, allowMissing) {
    if (typeof name != "string" || name.length === 0) throw new $TypeError("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof allowMissing != "boolean") throw new $TypeError('"allowMissing" argument must be a boolean');
    if ($exec(/^%?[^%]*%?$/, name) === null) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var parts = stringToPath(name), intrinsicBaseName = parts.length > 0 ? parts[0] : "", intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing), intrinsicRealName = intrinsic.name, value = intrinsic.value, skipFurtherCaching = false, alias = intrinsic.alias;
    alias && (intrinsicBaseName = alias[0], $spliceApply(parts, $concat([0, 1], alias)));
    for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
      var part = parts[i2], first = $strSlice(part, 0, 1), last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
      if ((part === "constructor" || !isOwn) && (skipFurtherCaching = true), intrinsicBaseName += "." + part, intrinsicRealName = "%" + intrinsicBaseName + "%", hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
      else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          return;
        }
        if ($gOPD && i2 + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc, isOwn && "get" in desc && !("originalValue" in desc.get) ? value = desc.get : value = value[part];
        } else isOwn = hasOwn(value, part), value = value[part];
        isOwn && !skipFurtherCaching && (INTRINSICS[intrinsicRealName] = value);
      }
    }
    return value;
  };
} });
var require_es_define_property = __commonJS({ "../../node_modules/es-define-property/index.js"(exports, module2) {
  var GetIntrinsic = require_get_intrinsic(), $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
  if ($defineProperty) try {
    $defineProperty({}, "a", { value: 1 });
  } catch {
    $defineProperty = false;
  }
  module2.exports = $defineProperty;
} });
var require_gopd = __commonJS({ "../../node_modules/gopd/index.js"(exports, module2) {
  var GetIntrinsic = require_get_intrinsic(), $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD) try {
    $gOPD([], "length");
  } catch {
    $gOPD = null;
  }
  module2.exports = $gOPD;
} });
var require_define_data_property = __commonJS({ "../../node_modules/define-data-property/index.js"(exports, module2) {
  var $defineProperty = require_es_define_property(), $SyntaxError = require_syntax(), $TypeError = require_type(), gopd = require_gopd();
  module2.exports = function(obj, property, value) {
    if (!obj || typeof obj != "object" && typeof obj != "function") throw new $TypeError("`obj` must be an object or a function`");
    if (typeof property != "string" && typeof property != "symbol") throw new $TypeError("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] != "boolean" && arguments[3] !== null) throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] != "boolean" && arguments[4] !== null) throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] != "boolean" && arguments[5] !== null) throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] != "boolean") throw new $TypeError("`loose`, if provided, must be a boolean");
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null, nonWritable = arguments.length > 4 ? arguments[4] : null, nonConfigurable = arguments.length > 5 ? arguments[5] : null, loose = arguments.length > 6 ? arguments[6] : false, desc = !!gopd && gopd(obj, property);
    if ($defineProperty) $defineProperty(obj, property, { configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable, enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable, value, writable: nonWritable === null && desc ? desc.writable : !nonWritable });
    else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) obj[property] = value;
    else throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  };
} });
var require_has_property_descriptors = __commonJS({ "../../node_modules/has-property-descriptors/index.js"(exports, module2) {
  var $defineProperty = require_es_define_property(), hasPropertyDescriptors = function() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function() {
    if (!$defineProperty) return null;
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch {
      return true;
    }
  };
  module2.exports = hasPropertyDescriptors;
} });
var require_define_properties = __commonJS({ "../../node_modules/define-properties/index.js"(exports, module2) {
  var keys22 = require_object_keys(), hasSymbols = typeof Symbol == "function" && typeof Symbol("foo") == "symbol", toStr3 = Object.prototype.toString, concat = Array.prototype.concat, defineDataProperty = require_define_data_property(), isFunction = function(fn3) {
    return typeof fn3 == "function" && toStr3.call(fn3) === "[object Function]";
  }, supportsDescriptors = require_has_property_descriptors()(), defineProperty = function(object, name, value, predicate) {
    if (name in object) {
      if (predicate === true) {
        if (object[name] === value) return;
      } else if (!isFunction(predicate) || !predicate()) return;
    }
    supportsDescriptors ? defineDataProperty(object, name, value, true) : defineDataProperty(object, name, value);
  }, defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {}, props = keys22(map);
    hasSymbols && (props = concat.call(props, Object.getOwnPropertySymbols(map)));
    for (var i2 = 0; i2 < props.length; i2 += 1) defineProperty(object, props[i2], map[props[i2]], predicates[props[i2]]);
  };
  defineProperties.supportsDescriptors = !!supportsDescriptors;
  module2.exports = defineProperties;
} });
var require_set_function_length = __commonJS({ "../../node_modules/set-function-length/index.js"(exports, module2) {
  var GetIntrinsic = require_get_intrinsic(), define2 = require_define_data_property(), hasDescriptors = require_has_property_descriptors()(), gOPD = require_gopd(), $TypeError = require_type(), $floor = GetIntrinsic("%Math.floor%");
  module2.exports = function(fn3, length) {
    if (typeof fn3 != "function") throw new $TypeError("`fn` is not a function");
    if (typeof length != "number" || length < 0 || length > 4294967295 || $floor(length) !== length) throw new $TypeError("`length` must be a positive 32-bit integer");
    var loose = arguments.length > 2 && !!arguments[2], functionLengthIsConfigurable = true, functionLengthIsWritable = true;
    if ("length" in fn3 && gOPD) {
      var desc = gOPD(fn3, "length");
      desc && !desc.configurable && (functionLengthIsConfigurable = false), desc && !desc.writable && (functionLengthIsWritable = false);
    }
    return (functionLengthIsConfigurable || functionLengthIsWritable || !loose) && (hasDescriptors ? define2(fn3, "length", length, true, true) : define2(fn3, "length", length)), fn3;
  };
} });
var require_call_bind = __commonJS({ "../../node_modules/call-bind/index.js"(exports, module2) {
  var bind = require_function_bind(), GetIntrinsic = require_get_intrinsic(), setFunctionLength = require_set_function_length(), $TypeError = require_type(), $apply = GetIntrinsic("%Function.prototype.apply%"), $call = GetIntrinsic("%Function.prototype.call%"), $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply), $defineProperty = require_es_define_property(), $max = GetIntrinsic("%Math.max%");
  module2.exports = function(originalFunction) {
    if (typeof originalFunction != "function") throw new $TypeError("a function is required");
    var func = $reflectApply(bind, $call, arguments);
    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
  };
  var applyBind = function() {
    return $reflectApply(bind, $apply, arguments);
  };
  $defineProperty ? $defineProperty(module2.exports, "apply", { value: applyBind }) : module2.exports.apply = applyBind;
} });
var require_callBound = __commonJS({ "../../node_modules/call-bind/callBound.js"(exports, module2) {
  var GetIntrinsic = require_get_intrinsic(), callBind = require_call_bind(), $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
  module2.exports = function(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    return typeof intrinsic == "function" && $indexOf(name, ".prototype.") > -1 ? callBind(intrinsic) : intrinsic;
  };
} });
var require_implementation3 = __commonJS({ "../../node_modules/object.assign/implementation.js"(exports, module2) {
  var objectKeys = require_object_keys(), hasSymbols = require_shams()(), callBound = require_callBound(), toObject = Object, $push = callBound("Array.prototype.push"), $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable"), originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
  module2.exports = function(target, source1) {
    if (target == null) throw new TypeError("target must be an object");
    var to2 = toObject(target);
    if (arguments.length === 1) return to2;
    for (var s2 = 1; s2 < arguments.length; ++s2) {
      var from = toObject(arguments[s2]), keys22 = objectKeys(from), getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
      if (getSymbols) for (var syms = getSymbols(from), j2 = 0; j2 < syms.length; ++j2) {
        var key = syms[j2];
        $propIsEnumerable(from, key) && $push(keys22, key);
      }
      for (var i2 = 0; i2 < keys22.length; ++i2) {
        var nextKey = keys22[i2];
        if ($propIsEnumerable(from, nextKey)) {
          var propValue = from[nextKey];
          to2[nextKey] = propValue;
        }
      }
    }
    return to2;
  };
} });
var require_polyfill = __commonJS({ "../../node_modules/object.assign/polyfill.js"(exports, module2) {
  var implementation = require_implementation3(), lacksProperEnumerationOrder = function() {
    if (!Object.assign) return false;
    for (var str = "abcdefghijklmnopqrst", letters = str.split(""), map = {}, i2 = 0; i2 < letters.length; ++i2) map[letters[i2]] = letters[i2];
    var obj = Object.assign({}, map), actual = "";
    for (var k2 in obj) actual += k2;
    return str !== actual;
  }, assignHasPendingExceptions = function() {
    if (!Object.assign || !Object.preventExtensions) return false;
    var thrower = Object.preventExtensions({ 1: 2 });
    try {
      Object.assign(thrower, "xy");
    } catch {
      return thrower[1] === "y";
    }
    return false;
  };
  module2.exports = function() {
    return !Object.assign || lacksProperEnumerationOrder() || assignHasPendingExceptions() ? implementation : Object.assign;
  };
} });
var require_shim = __commonJS({ "../../node_modules/object.assign/shim.js"(exports, module2) {
  var define2 = require_define_properties(), getPolyfill = require_polyfill();
  module2.exports = function() {
    var polyfill = getPolyfill();
    return define2(Object, { assign: polyfill }, { assign: function() {
      return Object.assign !== polyfill;
    } }), polyfill;
  };
} });
var require_object = __commonJS({ "../../node_modules/object.assign/index.js"(exports, module2) {
  var defineProperties = require_define_properties(), callBind = require_call_bind(), implementation = require_implementation3(), getPolyfill = require_polyfill(), shim = require_shim(), polyfill = callBind.apply(getPolyfill()), bound = function(target, source1) {
    return polyfill(Object, arguments);
  };
  defineProperties(bound, { getPolyfill, implementation, shim });
  module2.exports = bound;
} });
var require_functions_have_names = __commonJS({ "../../node_modules/functions-have-names/index.js"(exports, module2) {
  var functionsHaveNames = function() {
    return typeof (function() {
    }).name == "string";
  }, gOPD = Object.getOwnPropertyDescriptor;
  if (gOPD) try {
    gOPD([], "length");
  } catch {
    gOPD = null;
  }
  functionsHaveNames.functionsHaveConfigurableNames = function() {
    if (!functionsHaveNames() || !gOPD) return false;
    var desc = gOPD(function() {
    }, "name");
    return !!desc && !!desc.configurable;
  };
  var $bind = Function.prototype.bind;
  functionsHaveNames.boundFunctionsHaveNames = function() {
    return functionsHaveNames() && typeof $bind == "function" && (function() {
    }).bind().name !== "";
  };
  module2.exports = functionsHaveNames;
} });
var require_set_function_name = __commonJS({ "../../node_modules/set-function-name/index.js"(exports, module2) {
  var define2 = require_define_data_property(), hasDescriptors = require_has_property_descriptors()(), functionsHaveConfigurableNames = require_functions_have_names().functionsHaveConfigurableNames(), $TypeError = require_type();
  module2.exports = function(fn3, name) {
    if (typeof fn3 != "function") throw new $TypeError("`fn` is not a function");
    var loose = arguments.length > 2 && !!arguments[2];
    return (!loose || functionsHaveConfigurableNames) && (hasDescriptors ? define2(fn3, "name", name, true, true) : define2(fn3, "name", name)), fn3;
  };
} });
var require_implementation4 = __commonJS({ "../../node_modules/regexp.prototype.flags/implementation.js"(exports, module2) {
  var setFunctionName = require_set_function_name(), $TypeError = require_type(), $Object = Object;
  module2.exports = setFunctionName(function() {
    if (this == null || this !== $Object(this)) throw new $TypeError("RegExp.prototype.flags getter called on non-object");
    var result = "";
    return this.hasIndices && (result += "d"), this.global && (result += "g"), this.ignoreCase && (result += "i"), this.multiline && (result += "m"), this.dotAll && (result += "s"), this.unicode && (result += "u"), this.unicodeSets && (result += "v"), this.sticky && (result += "y"), result;
  }, "get flags", true);
} });
var require_polyfill2 = __commonJS({ "../../node_modules/regexp.prototype.flags/polyfill.js"(exports, module2) {
  var implementation = require_implementation4(), supportsDescriptors = require_define_properties().supportsDescriptors, $gOPD = Object.getOwnPropertyDescriptor;
  module2.exports = function() {
    if (supportsDescriptors && /a/mig.flags === "gim") {
      var descriptor = $gOPD(RegExp.prototype, "flags");
      if (descriptor && typeof descriptor.get == "function" && typeof RegExp.prototype.dotAll == "boolean" && typeof RegExp.prototype.hasIndices == "boolean") {
        var calls = "", o = {};
        if (Object.defineProperty(o, "hasIndices", { get: function() {
          calls += "d";
        } }), Object.defineProperty(o, "sticky", { get: function() {
          calls += "y";
        } }), calls === "dy") return descriptor.get;
      }
    }
    return implementation;
  };
} });
var require_shim2 = __commonJS({ "../../node_modules/regexp.prototype.flags/shim.js"(exports, module2) {
  var supportsDescriptors = require_define_properties().supportsDescriptors, getPolyfill = require_polyfill2(), gOPD = Object.getOwnPropertyDescriptor, defineProperty = Object.defineProperty, TypeErr = TypeError, getProto = Object.getPrototypeOf, regex = /a/;
  module2.exports = function() {
    if (!supportsDescriptors || !getProto) throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
    var polyfill = getPolyfill(), proto = getProto(regex), descriptor = gOPD(proto, "flags");
    return (!descriptor || descriptor.get !== polyfill) && defineProperty(proto, "flags", { configurable: true, enumerable: false, get: polyfill }), polyfill;
  };
} });
var require_regexp_prototype = __commonJS({ "../../node_modules/regexp.prototype.flags/index.js"(exports, module2) {
  var define2 = require_define_properties(), callBind = require_call_bind(), implementation = require_implementation4(), getPolyfill = require_polyfill2(), shim = require_shim2(), flagsBound = callBind(getPolyfill());
  define2(flagsBound, { getPolyfill, implementation, shim });
  module2.exports = flagsBound;
} });
var require_shams2 = __commonJS({ "../../node_modules/has-tostringtag/shams.js"(exports, module2) {
  var hasSymbols = require_shams();
  module2.exports = function() {
    return hasSymbols() && !!Symbol.toStringTag;
  };
} });
var require_is_arguments = __commonJS({ "../../node_modules/is-arguments/index.js"(exports, module2) {
  var hasToStringTag = require_shams2()(), callBound = require_callBound(), $toString = callBound("Object.prototype.toString"), isStandardArguments = function(value) {
    return hasToStringTag && value && typeof value == "object" && Symbol.toStringTag in value ? false : $toString(value) === "[object Arguments]";
  }, isLegacyArguments = function(value) {
    return isStandardArguments(value) ? true : value !== null && typeof value == "object" && typeof value.length == "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
  }, supportsStandardArguments = function() {
    return isStandardArguments(arguments);
  }();
  isStandardArguments.isLegacyArguments = isLegacyArguments;
  module2.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
} });
var require_util = __commonJS({ "(disabled):../../node_modules/object-inspect/util.inspect"() {
} });
var require_object_inspect = __commonJS({ "../../node_modules/object-inspect/index.js"(exports, module2) {
  var hasMap = typeof Map == "function" && Map.prototype, mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null, mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get == "function" ? mapSizeDescriptor.get : null, mapForEach = hasMap && Map.prototype.forEach, hasSet = typeof Set == "function" && Set.prototype, setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null, setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get == "function" ? setSizeDescriptor.get : null, setForEach = hasSet && Set.prototype.forEach, hasWeakMap = typeof WeakMap == "function" && WeakMap.prototype, weakMapHas = hasWeakMap ? WeakMap.prototype.has : null, hasWeakSet = typeof WeakSet == "function" && WeakSet.prototype, weakSetHas = hasWeakSet ? WeakSet.prototype.has : null, hasWeakRef = typeof WeakRef == "function" && WeakRef.prototype, weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null, booleanValueOf = Boolean.prototype.valueOf, objectToString = Object.prototype.toString, functionToString2 = Function.prototype.toString, $match = String.prototype.match, $slice = String.prototype.slice, $replace = String.prototype.replace, $toUpperCase = String.prototype.toUpperCase, $toLowerCase = String.prototype.toLowerCase, $test = RegExp.prototype.test, $concat = Array.prototype.concat, $join = Array.prototype.join, $arrSlice = Array.prototype.slice, $floor = Math.floor, bigIntValueOf = typeof BigInt == "function" ? BigInt.prototype.valueOf : null, gOPS = Object.getOwnPropertySymbols, symToString = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Symbol.prototype.toString : null, hasShammedSymbols = typeof Symbol == "function" && typeof Symbol.iterator == "object", toStringTag = typeof Symbol == "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols || true) ? Symbol.toStringTag : null, isEnumerable = Object.prototype.propertyIsEnumerable, gPO = (typeof Reflect == "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O2) {
    return O2.__proto__;
  } : null);
  function addNumericSeparator(num, str) {
    if (num === 1 / 0 || num === -1 / 0 || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) return str;
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num == "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int), dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  }
  var utilInspect = require_util(), inspectCustom = utilInspect.custom, inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
  module2.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has7(opts, "quoteStyle") && opts.quoteStyle !== "single" && opts.quoteStyle !== "double") throw new TypeError('option "quoteStyle" must be "single" or "double"');
    if (has7(opts, "maxStringLength") && (typeof opts.maxStringLength == "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== 1 / 0 : opts.maxStringLength !== null)) throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    var customInspect = has7(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect != "boolean" && customInspect !== "symbol") throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    if (has7(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    if (has7(opts, "numericSeparator") && typeof opts.numericSeparator != "boolean") throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    var numericSeparator = opts.numericSeparator;
    if (typeof obj > "u") return "undefined";
    if (obj === null) return "null";
    if (typeof obj == "boolean") return obj ? "true" : "false";
    if (typeof obj == "string") return inspectString(obj, opts);
    if (typeof obj == "number") {
      if (obj === 0) return 1 / 0 / obj > 0 ? "0" : "-0";
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj == "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth > "u" ? 5 : opts.depth;
    if (typeof depth > "u" && (depth = 0), depth >= maxDepth && maxDepth > 0 && typeof obj == "object") return isArray(obj) ? "[Array]" : "[Object]";
    var indent = getIndent(opts, depth);
    if (typeof seen > "u") seen = [];
    else if (indexOf(seen, obj) >= 0) return "[Circular]";
    function inspect3(value, from, noIndent) {
      if (from && (seen = $arrSlice.call(seen), seen.push(from)), noIndent) {
        var newOpts = { depth: opts.depth };
        return has7(opts, "quoteStyle") && (newOpts.quoteStyle = opts.quoteStyle), inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj == "function" && !isRegExp(obj)) {
      var name = nameOf(obj), keys22 = arrObjKeys(obj, inspect3);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys22.length > 0 ? " { " + $join.call(keys22, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj == "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement5(obj)) {
      for (var s2 = "<" + $toLowerCase.call(String(obj.nodeName)), attrs = obj.attributes || [], i2 = 0; i2 < attrs.length; i2++) s2 += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
      return s2 += ">", obj.childNodes && obj.childNodes.length && (s2 += "..."), s2 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">", s2;
    }
    if (isArray(obj)) {
      if (obj.length === 0) return "[]";
      var xs = arrObjKeys(obj, inspect3);
      return indent && !singleLineValues(xs) ? "[" + indentedJoin(xs, indent) + "]" : "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect3);
      return !("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause") ? "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect3(obj.cause), parts), ", ") + " }" : parts.length === 0 ? "[" + String(obj) + "]" : "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj == "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] == "function" && utilInspect) return utilInspect(obj, { depth: maxDepth - depth });
      if (customInspect !== "symbol" && typeof obj.inspect == "function") return obj.inspect();
    }
    if (isMap(obj)) {
      var mapParts = [];
      return mapForEach && mapForEach.call(obj, function(value, key) {
        mapParts.push(inspect3(key, obj, true) + " => " + inspect3(value, obj));
      }), collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      return setForEach && setForEach.call(obj, function(value) {
        setParts.push(inspect3(value, obj));
      }), collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) return weakCollectionOf("WeakMap");
    if (isWeakSet(obj)) return weakCollectionOf("WeakSet");
    if (isWeakRef(obj)) return weakCollectionOf("WeakRef");
    if (isNumber(obj)) return markBoxed(inspect3(Number(obj)));
    if (isBigInt(obj)) return markBoxed(inspect3(bigIntValueOf.call(obj)));
    if (isBoolean(obj)) return markBoxed(booleanValueOf.call(obj));
    if (isString(obj)) return markBoxed(inspect3(String(obj)));
    if (typeof window < "u" && obj === window) return "{ [object Window] }";
    if (obj === global) return "{ [object globalThis] }";
    if (!isDate(obj) && !isRegExp(obj)) {
      var ys = arrObjKeys(obj, inspect3), isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object, protoTag = obj instanceof Object ? "" : "null prototype", stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr3(obj), 8, -1) : protoTag ? "Object" : "", constructorTag = isPlainObject || typeof obj.constructor != "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "", tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      return ys.length === 0 ? tag + "{}" : indent ? tag + "{" + indentedJoin(ys, indent) + "}" : tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  function wrapQuotes(s2, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s2 + quoteChar;
  }
  function quote(s2) {
    return $replace.call(String(s2), /"/g, "&quot;");
  }
  function isArray(obj) {
    return toStr3(obj) === "[object Array]" && (!toStringTag || !(typeof obj == "object" && toStringTag in obj));
  }
  function isDate(obj) {
    return toStr3(obj) === "[object Date]" && (!toStringTag || !(typeof obj == "object" && toStringTag in obj));
  }
  function isRegExp(obj) {
    return toStr3(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj == "object" && toStringTag in obj));
  }
  function isError(obj) {
    return toStr3(obj) === "[object Error]" && (!toStringTag || !(typeof obj == "object" && toStringTag in obj));
  }
  function isString(obj) {
    return toStr3(obj) === "[object String]" && (!toStringTag || !(typeof obj == "object" && toStringTag in obj));
  }
  function isNumber(obj) {
    return toStr3(obj) === "[object Number]" && (!toStringTag || !(typeof obj == "object" && toStringTag in obj));
  }
  function isBoolean(obj) {
    return toStr3(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj == "object" && toStringTag in obj));
  }
  function isSymbol(obj) {
    if (hasShammedSymbols) return obj && typeof obj == "object" && obj instanceof Symbol;
    if (typeof obj == "symbol") return true;
    if (!obj || typeof obj != "object" || !symToString) return false;
    try {
      return symToString.call(obj), true;
    } catch {
    }
    return false;
  }
  function isBigInt(obj) {
    if (!obj || typeof obj != "object" || !bigIntValueOf) return false;
    try {
      return bigIntValueOf.call(obj), true;
    } catch {
    }
    return false;
  }
  var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
  function has7(obj, key) {
    return hasOwn.call(obj, key);
  }
  function toStr3(obj) {
    return objectToString.call(obj);
  }
  function nameOf(f2) {
    if (f2.name) return f2.name;
    var m2 = $match.call(functionToString2.call(f2), /^function\s*([\w$]+)/);
    return m2 ? m2[1] : null;
  }
  function indexOf(xs, x2) {
    if (xs.indexOf) return xs.indexOf(x2);
    for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) if (xs[i2] === x2) return i2;
    return -1;
  }
  function isMap(x2) {
    if (!mapSize || !x2 || typeof x2 != "object") return false;
    try {
      mapSize.call(x2);
      try {
        setSize.call(x2);
      } catch {
        return true;
      }
      return x2 instanceof Map;
    } catch {
    }
    return false;
  }
  function isWeakMap(x2) {
    if (!weakMapHas || !x2 || typeof x2 != "object") return false;
    try {
      weakMapHas.call(x2, weakMapHas);
      try {
        weakSetHas.call(x2, weakSetHas);
      } catch {
        return true;
      }
      return x2 instanceof WeakMap;
    } catch {
    }
    return false;
  }
  function isWeakRef(x2) {
    if (!weakRefDeref || !x2 || typeof x2 != "object") return false;
    try {
      return weakRefDeref.call(x2), true;
    } catch {
    }
    return false;
  }
  function isSet(x2) {
    if (!setSize || !x2 || typeof x2 != "object") return false;
    try {
      setSize.call(x2);
      try {
        mapSize.call(x2);
      } catch {
        return true;
      }
      return x2 instanceof Set;
    } catch {
    }
    return false;
  }
  function isWeakSet(x2) {
    if (!weakSetHas || !x2 || typeof x2 != "object") return false;
    try {
      weakSetHas.call(x2, weakSetHas);
      try {
        weakMapHas.call(x2, weakMapHas);
      } catch {
        return true;
      }
      return x2 instanceof WeakSet;
    } catch {
    }
    return false;
  }
  function isElement5(x2) {
    return !x2 || typeof x2 != "object" ? false : typeof HTMLElement < "u" && x2 instanceof HTMLElement ? true : typeof x2.nodeName == "string" && typeof x2.getAttribute == "function";
  }
  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength, trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s2 = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s2, "single", opts);
  }
  function lowbyte(c2) {
    var n2 = c2.charCodeAt(0), x2 = { 8: "b", 9: "t", 10: "n", 12: "f", 13: "r" }[n2];
    return x2 ? "\\" + x2 : "\\x" + (n2 < 16 ? "0" : "") + $toUpperCase.call(n2.toString(16));
  }
  function markBoxed(str) {
    return "Object(" + str + ")";
  }
  function weakCollectionOf(type3) {
    return type3 + " { ? }";
  }
  function collectionOf(type3, size, entries6, indent) {
    var joinedEntries = indent ? indentedJoin(entries6, indent) : $join.call(entries6, ", ");
    return type3 + " (" + size + ") {" + joinedEntries + "}";
  }
  function singleLineValues(xs) {
    for (var i2 = 0; i2 < xs.length; i2++) if (indexOf(xs[i2], `
`) >= 0) return false;
    return true;
  }
  function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") baseIndent = "	";
    else if (typeof opts.indent == "number" && opts.indent > 0) baseIndent = $join.call(Array(opts.indent + 1), " ");
    else return null;
    return { base: baseIndent, prev: $join.call(Array(depth + 1), baseIndent) };
  }
  function indentedJoin(xs, indent) {
    if (xs.length === 0) return "";
    var lineJoiner = `
` + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + `
` + indent.prev;
  }
  function arrObjKeys(obj, inspect3) {
    var isArr = isArray(obj), xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i2 = 0; i2 < obj.length; i2++) xs[i2] = has7(obj, i2) ? inspect3(obj[i2], obj) : "";
    }
    var syms = typeof gOPS == "function" ? gOPS(obj) : [], symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k2 = 0; k2 < syms.length; k2++) symMap["$" + syms[k2]] = syms[k2];
    }
    for (var key in obj) has7(obj, key) && (isArr && String(Number(key)) === key && key < obj.length || hasShammedSymbols && symMap["$" + key] instanceof Symbol || ($test.call(/[^\w$]/, key) ? xs.push(inspect3(key, obj) + ": " + inspect3(obj[key], obj)) : xs.push(key + ": " + inspect3(obj[key], obj))));
    if (typeof gOPS == "function") for (var j2 = 0; j2 < syms.length; j2++) isEnumerable.call(obj, syms[j2]) && xs.push("[" + inspect3(syms[j2]) + "]: " + inspect3(obj[syms[j2]], obj));
    return xs;
  }
} });
var require_side_channel = __commonJS({ "../../node_modules/side-channel/index.js"(exports, module2) {
  var GetIntrinsic = require_get_intrinsic(), callBound = require_callBound(), inspect3 = require_object_inspect(), $TypeError = require_type(), $WeakMap = GetIntrinsic("%WeakMap%", true), $Map = GetIntrinsic("%Map%", true), $weakMapGet = callBound("WeakMap.prototype.get", true), $weakMapSet = callBound("WeakMap.prototype.set", true), $weakMapHas = callBound("WeakMap.prototype.has", true), $mapGet = callBound("Map.prototype.get", true), $mapSet = callBound("Map.prototype.set", true), $mapHas = callBound("Map.prototype.has", true), listGetNode = function(list, key) {
    for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) if (curr.key === key) return prev.next = curr.next, curr.next = list.next, list.next = curr, curr;
  }, listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  }, listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    node ? node.value = value : objects.next = { key, next: objects.next, value };
  }, listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  module2.exports = function() {
    var $wm, $m, $o, channel = { assert: function(key) {
      if (!channel.has(key)) throw new $TypeError("Side channel does not contain " + inspect3(key));
    }, get: function(key) {
      if ($WeakMap && key && (typeof key == "object" || typeof key == "function")) {
        if ($wm) return $weakMapGet($wm, key);
      } else if ($Map) {
        if ($m) return $mapGet($m, key);
      } else if ($o) return listGet($o, key);
    }, has: function(key) {
      if ($WeakMap && key && (typeof key == "object" || typeof key == "function")) {
        if ($wm) return $weakMapHas($wm, key);
      } else if ($Map) {
        if ($m) return $mapHas($m, key);
      } else if ($o) return listHas($o, key);
      return false;
    }, set: function(key, value) {
      $WeakMap && key && (typeof key == "object" || typeof key == "function") ? ($wm || ($wm = new $WeakMap()), $weakMapSet($wm, key, value)) : $Map ? ($m || ($m = new $Map()), $mapSet($m, key, value)) : ($o || ($o = { key: {}, next: null }), listSet($o, key, value));
    } };
    return channel;
  };
} });
var require_internal_slot = __commonJS({ "../../node_modules/internal-slot/index.js"(exports, module2) {
  var hasOwn = require_hasown(), channel = require_side_channel()(), $TypeError = require_type(), SLOT = { assert: function(O2, slot) {
    if (!O2 || typeof O2 != "object" && typeof O2 != "function") throw new $TypeError("`O` is not an object");
    if (typeof slot != "string") throw new $TypeError("`slot` must be a string");
    if (channel.assert(O2), !SLOT.has(O2, slot)) throw new $TypeError("`" + slot + "` is not present on `O`");
  }, get: function(O2, slot) {
    if (!O2 || typeof O2 != "object" && typeof O2 != "function") throw new $TypeError("`O` is not an object");
    if (typeof slot != "string") throw new $TypeError("`slot` must be a string");
    var slots = channel.get(O2);
    return slots && slots["$" + slot];
  }, has: function(O2, slot) {
    if (!O2 || typeof O2 != "object" && typeof O2 != "function") throw new $TypeError("`O` is not an object");
    if (typeof slot != "string") throw new $TypeError("`slot` must be a string");
    var slots = channel.get(O2);
    return !!slots && hasOwn(slots, "$" + slot);
  }, set: function(O2, slot, V2) {
    if (!O2 || typeof O2 != "object" && typeof O2 != "function") throw new $TypeError("`O` is not an object");
    if (typeof slot != "string") throw new $TypeError("`slot` must be a string");
    var slots = channel.get(O2);
    slots || (slots = {}, channel.set(O2, slots)), slots["$" + slot] = V2;
  } };
  Object.freeze && Object.freeze(SLOT);
  module2.exports = SLOT;
} });
var require_stop_iteration_iterator = __commonJS({ "../../node_modules/stop-iteration-iterator/index.js"(exports, module2) {
  var SLOT = require_internal_slot(), $SyntaxError = SyntaxError, $StopIteration = typeof StopIteration == "object" ? StopIteration : null;
  module2.exports = function(origIterator) {
    if (!$StopIteration) throw new $SyntaxError("this environment lacks StopIteration");
    SLOT.set(origIterator, "[[Done]]", false);
    var siIterator = { next: function() {
      var iterator = SLOT.get(this, "[[Iterator]]"), done = SLOT.get(iterator, "[[Done]]");
      try {
        return { done, value: done ? void 0 : iterator.next() };
      } catch (e2) {
        if (SLOT.set(iterator, "[[Done]]", true), e2 !== $StopIteration) throw e2;
        return { done: true, value: void 0 };
      }
    } };
    return SLOT.set(siIterator, "[[Iterator]]", origIterator), siIterator;
  };
} });
var require_isarray = __commonJS({ "../../node_modules/isarray/index.js"(exports, module2) {
  var toString2 = {}.toString;
  module2.exports = Array.isArray || function(arr) {
    return toString2.call(arr) == "[object Array]";
  };
} });
var require_is_string = __commonJS({ "../../node_modules/is-string/index.js"(exports, module2) {
  var strValue = String.prototype.valueOf, tryStringObject = function(value) {
    try {
      return strValue.call(value), true;
    } catch {
      return false;
    }
  }, toStr3 = Object.prototype.toString, strClass = "[object String]", hasToStringTag = require_shams2()();
  module2.exports = function(value) {
    return typeof value == "string" ? true : typeof value != "object" ? false : hasToStringTag ? tryStringObject(value) : toStr3.call(value) === strClass;
  };
} });
var require_is_map = __commonJS({ "../../node_modules/is-map/index.js"(exports, module2) {
  var $Map = typeof Map == "function" && Map.prototype ? Map : null, $Set = typeof Set == "function" && Set.prototype ? Set : null, exported;
  $Map || (exported = function(x2) {
    return false;
  });
  var $mapHas = $Map ? Map.prototype.has : null, $setHas = $Set ? Set.prototype.has : null;
  !exported && !$mapHas && (exported = function(x2) {
    return false;
  });
  module2.exports = exported || function(x2) {
    if (!x2 || typeof x2 != "object") return false;
    try {
      if ($mapHas.call(x2), $setHas) try {
        $setHas.call(x2);
      } catch {
        return true;
      }
      return x2 instanceof $Map;
    } catch {
    }
    return false;
  };
} });
var require_is_set = __commonJS({ "../../node_modules/is-set/index.js"(exports, module2) {
  var $Map = typeof Map == "function" && Map.prototype ? Map : null, $Set = typeof Set == "function" && Set.prototype ? Set : null, exported;
  $Set || (exported = function(x2) {
    return false;
  });
  var $mapHas = $Map ? Map.prototype.has : null, $setHas = $Set ? Set.prototype.has : null;
  !exported && !$setHas && (exported = function(x2) {
    return false;
  });
  module2.exports = exported || function(x2) {
    if (!x2 || typeof x2 != "object") return false;
    try {
      if ($setHas.call(x2), $mapHas) try {
        $mapHas.call(x2);
      } catch {
        return true;
      }
      return x2 instanceof $Set;
    } catch {
    }
    return false;
  };
} });
var require_es_get_iterator = __commonJS({ "../../node_modules/es-get-iterator/index.js"(exports, module2) {
  var isArguments = require_is_arguments(), getStopIterationIterator = require_stop_iteration_iterator();
  require_has_symbols()() || require_shams()() ? ($iterator = Symbol.iterator, module2.exports = function(iterable) {
    if (iterable != null && typeof iterable[$iterator] < "u") return iterable[$iterator]();
    if (isArguments(iterable)) return Array.prototype[$iterator].call(iterable);
  }) : (isArray = require_isarray(), isString = require_is_string(), GetIntrinsic = require_get_intrinsic(), $Map = GetIntrinsic("%Map%", true), $Set = GetIntrinsic("%Set%", true), callBound = require_callBound(), $arrayPush = callBound("Array.prototype.push"), $charCodeAt = callBound("String.prototype.charCodeAt"), $stringSlice = callBound("String.prototype.slice"), advanceStringIndex = function(S2, index) {
    var length = S2.length;
    if (index + 1 >= length) return index + 1;
    var first = $charCodeAt(S2, index);
    if (first < 55296 || first > 56319) return index + 1;
    var second = $charCodeAt(S2, index + 1);
    return second < 56320 || second > 57343 ? index + 1 : index + 2;
  }, getArrayIterator = function(arraylike) {
    var i2 = 0;
    return { next: function() {
      var done = i2 >= arraylike.length, value;
      return done || (value = arraylike[i2], i2 += 1), { done, value };
    } };
  }, getNonCollectionIterator = function(iterable, noPrimordialCollections) {
    if (isArray(iterable) || isArguments(iterable)) return getArrayIterator(iterable);
    if (isString(iterable)) {
      var i2 = 0;
      return { next: function() {
        var nextIndex = advanceStringIndex(iterable, i2), value = $stringSlice(iterable, i2, nextIndex);
        return i2 = nextIndex, { done: nextIndex > iterable.length, value };
      } };
    }
    if (noPrimordialCollections && typeof iterable["_es6-shim iterator_"] < "u") return iterable["_es6-shim iterator_"]();
  }, !$Map && !$Set ? module2.exports = function(iterable) {
    if (iterable != null) return getNonCollectionIterator(iterable, true);
  } : (isMap = require_is_map(), isSet = require_is_set(), $mapForEach = callBound("Map.prototype.forEach", true), $setForEach = callBound("Set.prototype.forEach", true), (typeof process > "u" || !process.versions || !process.versions.node) && ($mapIterator = callBound("Map.prototype.iterator", true), $setIterator = callBound("Set.prototype.iterator", true)), $mapAtAtIterator = callBound("Map.prototype.@@iterator", true) || callBound("Map.prototype._es6-shim iterator_", true), $setAtAtIterator = callBound("Set.prototype.@@iterator", true) || callBound("Set.prototype._es6-shim iterator_", true), getCollectionIterator = function(iterable) {
    if (isMap(iterable)) {
      if ($mapIterator) return getStopIterationIterator($mapIterator(iterable));
      if ($mapAtAtIterator) return $mapAtAtIterator(iterable);
      if ($mapForEach) {
        var entries6 = [];
        return $mapForEach(iterable, function(v2, k2) {
          $arrayPush(entries6, [k2, v2]);
        }), getArrayIterator(entries6);
      }
    }
    if (isSet(iterable)) {
      if ($setIterator) return getStopIterationIterator($setIterator(iterable));
      if ($setAtAtIterator) return $setAtAtIterator(iterable);
      if ($setForEach) {
        var values6 = [];
        return $setForEach(iterable, function(v2) {
          $arrayPush(values6, v2);
        }), getArrayIterator(values6);
      }
    }
  }, module2.exports = function(iterable) {
    return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
  }));
  var $iterator, isArray, isString, GetIntrinsic, $Map, $Set, callBound, $arrayPush, $charCodeAt, $stringSlice, advanceStringIndex, getArrayIterator, getNonCollectionIterator, isMap, isSet, $mapForEach, $setForEach, $mapIterator, $setIterator, $mapAtAtIterator, $setAtAtIterator, getCollectionIterator;
} });
var require_implementation5 = __commonJS({ "../../node_modules/object-is/implementation.js"(exports, module2) {
  var numberIsNaN = function(value) {
    return value !== value;
  };
  module2.exports = function(a, b2) {
    return a === 0 && b2 === 0 ? 1 / a === 1 / b2 : !!(a === b2 || numberIsNaN(a) && numberIsNaN(b2));
  };
} });
var require_polyfill3 = __commonJS({ "../../node_modules/object-is/polyfill.js"(exports, module2) {
  var implementation = require_implementation5();
  module2.exports = function() {
    return typeof Object.is == "function" ? Object.is : implementation;
  };
} });
var require_shim3 = __commonJS({ "../../node_modules/object-is/shim.js"(exports, module2) {
  var getPolyfill = require_polyfill3(), define2 = require_define_properties();
  module2.exports = function() {
    var polyfill = getPolyfill();
    return define2(Object, { is: polyfill }, { is: function() {
      return Object.is !== polyfill;
    } }), polyfill;
  };
} });
var require_object_is = __commonJS({ "../../node_modules/object-is/index.js"(exports, module2) {
  var define2 = require_define_properties(), callBind = require_call_bind(), implementation = require_implementation5(), getPolyfill = require_polyfill3(), shim = require_shim3(), polyfill = callBind(getPolyfill(), Object);
  define2(polyfill, { getPolyfill, implementation, shim });
  module2.exports = polyfill;
} });
var require_is_array_buffer = __commonJS({ "../../node_modules/is-array-buffer/index.js"(exports, module2) {
  var callBind = require_call_bind(), callBound = require_callBound(), GetIntrinsic = require_get_intrinsic(), $ArrayBuffer = GetIntrinsic("%ArrayBuffer%", true), $byteLength = callBound("ArrayBuffer.prototype.byteLength", true), $toString = callBound("Object.prototype.toString"), abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice, $abSlice = !!abSlice && callBind(abSlice);
  module2.exports = $byteLength || $abSlice ? function(obj) {
    if (!obj || typeof obj != "object") return false;
    try {
      return $byteLength ? $byteLength(obj) : $abSlice(obj, 0), true;
    } catch {
      return false;
    }
  } : $ArrayBuffer ? function(obj) {
    return $toString(obj) === "[object ArrayBuffer]";
  } : function(obj) {
    return false;
  };
} });
var require_is_date_object = __commonJS({ "../../node_modules/is-date-object/index.js"(exports, module2) {
  var getDay = Date.prototype.getDay, tryDateObject = function(value) {
    try {
      return getDay.call(value), true;
    } catch {
      return false;
    }
  }, toStr3 = Object.prototype.toString, dateClass = "[object Date]", hasToStringTag = require_shams2()();
  module2.exports = function(value) {
    return typeof value != "object" || value === null ? false : hasToStringTag ? tryDateObject(value) : toStr3.call(value) === dateClass;
  };
} });
var require_is_regex = __commonJS({ "../../node_modules/is-regex/index.js"(exports, module2) {
  var callBound = require_callBound(), hasToStringTag = require_shams2()(), has7, $exec, isRegexMarker, badStringifier;
  hasToStringTag && (has7 = callBound("Object.prototype.hasOwnProperty"), $exec = callBound("RegExp.prototype.exec"), isRegexMarker = {}, throwRegexMarker = function() {
    throw isRegexMarker;
  }, badStringifier = { toString: throwRegexMarker, valueOf: throwRegexMarker }, typeof Symbol.toPrimitive == "symbol" && (badStringifier[Symbol.toPrimitive] = throwRegexMarker));
  var throwRegexMarker, $toString = callBound("Object.prototype.toString"), gOPD = Object.getOwnPropertyDescriptor, regexClass = "[object RegExp]";
  module2.exports = hasToStringTag ? function(value) {
    if (!value || typeof value != "object") return false;
    var descriptor = gOPD(value, "lastIndex"), hasLastIndexDataProperty = descriptor && has7(descriptor, "value");
    if (!hasLastIndexDataProperty) return false;
    try {
      $exec(value, badStringifier);
    } catch (e2) {
      return e2 === isRegexMarker;
    }
  } : function(value) {
    return !value || typeof value != "object" && typeof value != "function" ? false : $toString(value) === regexClass;
  };
} });
var require_is_shared_array_buffer = __commonJS({ "../../node_modules/is-shared-array-buffer/index.js"(exports, module2) {
  var callBound = require_callBound(), $byteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
  module2.exports = $byteLength ? function(obj) {
    if (!obj || typeof obj != "object") return false;
    try {
      return $byteLength(obj), true;
    } catch {
      return false;
    }
  } : function(obj) {
    return false;
  };
} });
var require_is_number_object = __commonJS({ "../../node_modules/is-number-object/index.js"(exports, module2) {
  var numToStr = Number.prototype.toString, tryNumberObject = function(value) {
    try {
      return numToStr.call(value), true;
    } catch {
      return false;
    }
  }, toStr3 = Object.prototype.toString, numClass = "[object Number]", hasToStringTag = require_shams2()();
  module2.exports = function(value) {
    return typeof value == "number" ? true : typeof value != "object" ? false : hasToStringTag ? tryNumberObject(value) : toStr3.call(value) === numClass;
  };
} });
var require_is_boolean_object = __commonJS({ "../../node_modules/is-boolean-object/index.js"(exports, module2) {
  var callBound = require_callBound(), $boolToStr = callBound("Boolean.prototype.toString"), $toString = callBound("Object.prototype.toString"), tryBooleanObject = function(value) {
    try {
      return $boolToStr(value), true;
    } catch {
      return false;
    }
  }, boolClass = "[object Boolean]", hasToStringTag = require_shams2()();
  module2.exports = function(value) {
    return typeof value == "boolean" ? true : value === null || typeof value != "object" ? false : hasToStringTag && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString(value) === boolClass;
  };
} });
var require_is_symbol = __commonJS({ "../../node_modules/is-symbol/index.js"(exports, module2) {
  var toStr3 = Object.prototype.toString, hasSymbols = require_has_symbols()();
  hasSymbols ? (symToStr = Symbol.prototype.toString, symStringRegex = /^Symbol\(.*\)$/, isSymbolObject = function(value) {
    return typeof value.valueOf() != "symbol" ? false : symStringRegex.test(symToStr.call(value));
  }, module2.exports = function(value) {
    if (typeof value == "symbol") return true;
    if (toStr3.call(value) !== "[object Symbol]") return false;
    try {
      return isSymbolObject(value);
    } catch {
      return false;
    }
  }) : module2.exports = function(value) {
    return false;
  };
  var symToStr, symStringRegex, isSymbolObject;
} });
var require_has_bigints = __commonJS({ "../../node_modules/has-bigints/index.js"(exports, module2) {
  var $BigInt = typeof BigInt < "u" && BigInt;
  module2.exports = function() {
    return typeof $BigInt == "function" && typeof BigInt == "function" && typeof $BigInt(42) == "bigint" && typeof BigInt(42) == "bigint";
  };
} });
var require_is_bigint = __commonJS({ "../../node_modules/is-bigint/index.js"(exports, module2) {
  var hasBigInts = require_has_bigints()();
  hasBigInts ? (bigIntValueOf = BigInt.prototype.valueOf, tryBigInt = function(value) {
    try {
      return bigIntValueOf.call(value), true;
    } catch {
    }
    return false;
  }, module2.exports = function(value) {
    return value === null || typeof value > "u" || typeof value == "boolean" || typeof value == "string" || typeof value == "number" || typeof value == "symbol" || typeof value == "function" ? false : typeof value == "bigint" ? true : tryBigInt(value);
  }) : module2.exports = function(value) {
    return false;
  };
  var bigIntValueOf, tryBigInt;
} });
var require_which_boxed_primitive = __commonJS({ "../../node_modules/which-boxed-primitive/index.js"(exports, module2) {
  var isString = require_is_string(), isNumber = require_is_number_object(), isBoolean = require_is_boolean_object(), isSymbol = require_is_symbol(), isBigInt = require_is_bigint();
  module2.exports = function(value) {
    if (value == null || typeof value != "object" && typeof value != "function") return null;
    if (isString(value)) return "String";
    if (isNumber(value)) return "Number";
    if (isBoolean(value)) return "Boolean";
    if (isSymbol(value)) return "Symbol";
    if (isBigInt(value)) return "BigInt";
  };
} });
var require_is_weakmap = __commonJS({ "../../node_modules/is-weakmap/index.js"(exports, module2) {
  var $WeakMap = typeof WeakMap == "function" && WeakMap.prototype ? WeakMap : null, $WeakSet = typeof WeakSet == "function" && WeakSet.prototype ? WeakSet : null, exported;
  $WeakMap || (exported = function(x2) {
    return false;
  });
  var $mapHas = $WeakMap ? $WeakMap.prototype.has : null, $setHas = $WeakSet ? $WeakSet.prototype.has : null;
  !exported && !$mapHas && (exported = function(x2) {
    return false;
  });
  module2.exports = exported || function(x2) {
    if (!x2 || typeof x2 != "object") return false;
    try {
      if ($mapHas.call(x2, $mapHas), $setHas) try {
        $setHas.call(x2, $setHas);
      } catch {
        return true;
      }
      return x2 instanceof $WeakMap;
    } catch {
    }
    return false;
  };
} });
var require_is_weakset = __commonJS({ "../../node_modules/is-weakset/index.js"(exports, module2) {
  var GetIntrinsic = require_get_intrinsic(), callBound = require_callBound(), $WeakSet = GetIntrinsic("%WeakSet%", true), $setHas = callBound("WeakSet.prototype.has", true);
  $setHas ? ($mapHas = callBound("WeakMap.prototype.has", true), module2.exports = function(x2) {
    if (!x2 || typeof x2 != "object") return false;
    try {
      if ($setHas(x2, $setHas), $mapHas) try {
        $mapHas(x2, $mapHas);
      } catch {
        return true;
      }
      return x2 instanceof $WeakSet;
    } catch {
    }
    return false;
  }) : module2.exports = function(x2) {
    return false;
  };
  var $mapHas;
} });
var require_which_collection = __commonJS({ "../../node_modules/which-collection/index.js"(exports, module2) {
  var isMap = require_is_map(), isSet = require_is_set(), isWeakMap = require_is_weakmap(), isWeakSet = require_is_weakset();
  module2.exports = function(value) {
    if (value && typeof value == "object") {
      if (isMap(value)) return "Map";
      if (isSet(value)) return "Set";
      if (isWeakMap(value)) return "WeakMap";
      if (isWeakSet(value)) return "WeakSet";
    }
    return false;
  };
} });
var require_is_callable = __commonJS({ "../../node_modules/is-callable/index.js"(exports, module2) {
  var fnToStr = Function.prototype.toString, reflectApply = typeof Reflect == "object" && Reflect !== null && Reflect.apply, badArrayLike, isCallableMarker;
  if (typeof reflectApply == "function" && typeof Object.defineProperty == "function") try {
    badArrayLike = Object.defineProperty({}, "length", { get: function() {
      throw isCallableMarker;
    } }), isCallableMarker = {}, reflectApply(function() {
      throw 42;
    }, null, badArrayLike);
  } catch (_2) {
    _2 !== isCallableMarker && (reflectApply = null);
  }
  else reflectApply = null;
  var constructorRegex = /^\s*class\b/, isES6ClassFn = function(value) {
    try {
      var fnStr = fnToStr.call(value);
      return constructorRegex.test(fnStr);
    } catch {
      return false;
    }
  }, tryFunctionObject = function(value) {
    try {
      return isES6ClassFn(value) ? false : (fnToStr.call(value), true);
    } catch {
      return false;
    }
  }, toStr3 = Object.prototype.toString, objectClass = "[object Object]", fnClass = "[object Function]", genClass = "[object GeneratorFunction]", ddaClass = "[object HTMLAllCollection]", ddaClass2 = "[object HTML document.all class]", ddaClass3 = "[object HTMLCollection]", hasToStringTag = typeof Symbol == "function" && !!Symbol.toStringTag, isIE68 = !(0 in [,]), isDDA = function() {
    return false;
  };
  typeof document == "object" && (all = document.all, toStr3.call(all) === toStr3.call(document.all) && (isDDA = function(value) {
    if ((isIE68 || !value) && (typeof value > "u" || typeof value == "object")) try {
      var str = toStr3.call(value);
      return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
    } catch {
    }
    return false;
  }));
  var all;
  module2.exports = reflectApply ? function(value) {
    if (isDDA(value)) return true;
    if (!value || typeof value != "function" && typeof value != "object") return false;
    try {
      reflectApply(value, null, badArrayLike);
    } catch (e2) {
      if (e2 !== isCallableMarker) return false;
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
  } : function(value) {
    if (isDDA(value)) return true;
    if (!value || typeof value != "function" && typeof value != "object") return false;
    if (hasToStringTag) return tryFunctionObject(value);
    if (isES6ClassFn(value)) return false;
    var strClass = toStr3.call(value);
    return strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass) ? false : tryFunctionObject(value);
  };
} });
var require_for_each = __commonJS({ "../../node_modules/for-each/index.js"(exports, module2) {
  var isCallable3 = require_is_callable(), toStr3 = Object.prototype.toString, hasOwnProperty = Object.prototype.hasOwnProperty, forEachArray = function(array, iterator, receiver) {
    for (var i2 = 0, len = array.length; i2 < len; i2++) hasOwnProperty.call(array, i2) && (receiver == null ? iterator(array[i2], i2, array) : iterator.call(receiver, array[i2], i2, array));
  }, forEachString = function(string2, iterator, receiver) {
    for (var i2 = 0, len = string2.length; i2 < len; i2++) receiver == null ? iterator(string2.charAt(i2), i2, string2) : iterator.call(receiver, string2.charAt(i2), i2, string2);
  }, forEachObject = function(object, iterator, receiver) {
    for (var k2 in object) hasOwnProperty.call(object, k2) && (receiver == null ? iterator(object[k2], k2, object) : iterator.call(receiver, object[k2], k2, object));
  }, forEach6 = function(list, iterator, thisArg) {
    if (!isCallable3(iterator)) throw new TypeError("iterator must be a function");
    var receiver;
    arguments.length >= 3 && (receiver = thisArg), toStr3.call(list) === "[object Array]" ? forEachArray(list, iterator, receiver) : typeof list == "string" ? forEachString(list, iterator, receiver) : forEachObject(list, iterator, receiver);
  };
  module2.exports = forEach6;
} });
var require_possible_typed_array_names = __commonJS({ "../../node_modules/possible-typed-array-names/index.js"(exports, module2) {
  module2.exports = ["Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "BigInt64Array", "BigUint64Array"];
} });
var require_available_typed_arrays = __commonJS({ "../../node_modules/available-typed-arrays/index.js"(exports, module2) {
  var possibleNames = require_possible_typed_array_names(), g2 = typeof globalThis > "u" ? global : globalThis;
  module2.exports = function() {
    for (var out = [], i2 = 0; i2 < possibleNames.length; i2++) typeof g2[possibleNames[i2]] == "function" && (out[out.length] = possibleNames[i2]);
    return out;
  };
} });
var require_which_typed_array = __commonJS({ "../../node_modules/which-typed-array/index.js"(exports, module2) {
  var forEach6 = require_for_each(), availableTypedArrays = require_available_typed_arrays(), callBind = require_call_bind(), callBound = require_callBound(), gOPD = require_gopd(), $toString = callBound("Object.prototype.toString"), hasToStringTag = require_shams2()(), g2 = typeof globalThis > "u" ? global : globalThis, typedArrays = availableTypedArrays(), $slice = callBound("String.prototype.slice"), getPrototypeOf = Object.getPrototypeOf, $indexOf = callBound("Array.prototype.indexOf", true) || function(array, value) {
    for (var i2 = 0; i2 < array.length; i2 += 1) if (array[i2] === value) return i2;
    return -1;
  }, cache = { __proto__: null };
  hasToStringTag && gOPD && getPrototypeOf ? forEach6(typedArrays, function(typedArray) {
    var arr = new g2[typedArray]();
    if (Symbol.toStringTag in arr) {
      var proto = getPrototypeOf(arr), descriptor = gOPD(proto, Symbol.toStringTag);
      if (!descriptor) {
        var superProto = getPrototypeOf(proto);
        descriptor = gOPD(superProto, Symbol.toStringTag);
      }
      cache["$" + typedArray] = callBind(descriptor.get);
    }
  }) : forEach6(typedArrays, function(typedArray) {
    var arr = new g2[typedArray](), fn3 = arr.slice || arr.set;
    fn3 && (cache["$" + typedArray] = callBind(fn3));
  });
  var tryTypedArrays = function(value) {
    var found = false;
    return forEach6(cache, function(getter, typedArray) {
      if (!found) try {
        "$" + getter(value) === typedArray && (found = $slice(typedArray, 1));
      } catch {
      }
    }), found;
  }, trySlices = function(value) {
    var found = false;
    return forEach6(cache, function(getter, name) {
      if (!found) try {
        getter(value), found = $slice(name, 1);
      } catch {
      }
    }), found;
  };
  module2.exports = function(value) {
    if (!value || typeof value != "object") return false;
    if (!hasToStringTag) {
      var tag = $slice($toString(value), 8, -1);
      return $indexOf(typedArrays, tag) > -1 ? tag : tag !== "Object" ? false : trySlices(value);
    }
    return gOPD ? tryTypedArrays(value) : null;
  };
} });
var require_array_buffer_byte_length = __commonJS({ "../../node_modules/array-buffer-byte-length/index.js"(exports, module2) {
  var callBound = require_callBound(), $byteLength = callBound("ArrayBuffer.prototype.byteLength", true), isArrayBuffer = require_is_array_buffer();
  module2.exports = function(ab) {
    return isArrayBuffer(ab) ? $byteLength ? $byteLength(ab) : ab.byteLength : NaN;
  };
} });
var require_deep_equal = __commonJS({ "../../node_modules/deep-equal/index.js"(exports, module2) {
  var assign = require_object(), callBound = require_callBound(), flags = require_regexp_prototype(), GetIntrinsic = require_get_intrinsic(), getIterator = require_es_get_iterator(), getSideChannel = require_side_channel(), is = require_object_is(), isArguments = require_is_arguments(), isArray = require_isarray(), isArrayBuffer = require_is_array_buffer(), isDate = require_is_date_object(), isRegex = require_is_regex(), isSharedArrayBuffer = require_is_shared_array_buffer(), objectKeys = require_object_keys(), whichBoxedPrimitive = require_which_boxed_primitive(), whichCollection = require_which_collection(), whichTypedArray = require_which_typed_array(), byteLength = require_array_buffer_byte_length(), sabByteLength = callBound("SharedArrayBuffer.prototype.byteLength", true), $getTime = callBound("Date.prototype.getTime"), gPO = Object.getPrototypeOf, $objToString = callBound("Object.prototype.toString"), $Set = GetIntrinsic("%Set%", true), $mapHas = callBound("Map.prototype.has", true), $mapGet = callBound("Map.prototype.get", true), $mapSize = callBound("Map.prototype.size", true), $setAdd = callBound("Set.prototype.add", true), $setDelete = callBound("Set.prototype.delete", true), $setHas = callBound("Set.prototype.has", true), $setSize = callBound("Set.prototype.size", true);
  function setHasEqualElement(set, val1, opts, channel) {
    for (var i2 = getIterator(set), result; (result = i2.next()) && !result.done; ) if (internalDeepEqual(val1, result.value, opts, channel)) return $setDelete(set, result.value), true;
    return false;
  }
  function findLooseMatchingPrimitives(prim) {
    if (typeof prim > "u") return null;
    if (typeof prim != "object") return typeof prim == "symbol" ? false : typeof prim == "string" || typeof prim == "number" ? +prim == +prim : true;
  }
  function mapMightHaveLoosePrim(a, b2, prim, item, opts, channel) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    var curB = $mapGet(b2, altValue), looseOpts = assign({}, opts, { strict: false });
    return typeof curB > "u" && !$mapHas(b2, altValue) || !internalDeepEqual(item, curB, looseOpts, channel) ? false : !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
  }
  function setMightHaveLoosePrim(a, b2, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    return altValue ?? ($setHas(b2, altValue) && !$setHas(a, altValue));
  }
  function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
    for (var i2 = getIterator(set), result, key2; (result = i2.next()) && !result.done; ) if (key2 = result.value, internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)) return $setDelete(set, key2), true;
    return false;
  }
  function internalDeepEqual(actual, expected, options, channel) {
    var opts = options || {};
    if (opts.strict ? is(actual, expected) : actual === expected) return true;
    var actualBoxed = whichBoxedPrimitive(actual), expectedBoxed = whichBoxedPrimitive(expected);
    if (actualBoxed !== expectedBoxed) return false;
    if (!actual || !expected || typeof actual != "object" && typeof expected != "object") return opts.strict ? is(actual, expected) : actual == expected;
    var hasActual = channel.has(actual), hasExpected = channel.has(expected), sentinel;
    if (hasActual && hasExpected) {
      if (channel.get(actual) === channel.get(expected)) return true;
    } else sentinel = {};
    return hasActual || channel.set(actual, sentinel), hasExpected || channel.set(expected, sentinel), objEquiv(actual, expected, opts, channel);
  }
  function isBuffer(x2) {
    return !x2 || typeof x2 != "object" || typeof x2.length != "number" || typeof x2.copy != "function" || typeof x2.slice != "function" || x2.length > 0 && typeof x2[0] != "number" ? false : !!(x2.constructor && x2.constructor.isBuffer && x2.constructor.isBuffer(x2));
  }
  function setEquiv(a, b2, opts, channel) {
    if ($setSize(a) !== $setSize(b2)) return false;
    for (var iA = getIterator(a), iB = getIterator(b2), resultA, resultB, set; (resultA = iA.next()) && !resultA.done; ) if (resultA.value && typeof resultA.value == "object") set || (set = new $Set()), $setAdd(set, resultA.value);
    else if (!$setHas(b2, resultA.value)) {
      if (opts.strict || !setMightHaveLoosePrim(a, b2, resultA.value)) return false;
      set || (set = new $Set()), $setAdd(set, resultA.value);
    }
    if (set) {
      for (; (resultB = iB.next()) && !resultB.done; ) if (resultB.value && typeof resultB.value == "object") {
        if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) return false;
      } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) return false;
      return $setSize(set) === 0;
    }
    return true;
  }
  function mapEquiv(a, b2, opts, channel) {
    if ($mapSize(a) !== $mapSize(b2)) return false;
    for (var iA = getIterator(a), iB = getIterator(b2), resultA, resultB, set, key, item1, item2; (resultA = iA.next()) && !resultA.done; ) if (key = resultA.value[0], item1 = resultA.value[1], key && typeof key == "object") set || (set = new $Set()), $setAdd(set, key);
    else if (item2 = $mapGet(b2, key), typeof item2 > "u" && !$mapHas(b2, key) || !internalDeepEqual(item1, item2, opts, channel)) {
      if (opts.strict || !mapMightHaveLoosePrim(a, b2, key, item1, opts, channel)) return false;
      set || (set = new $Set()), $setAdd(set, key);
    }
    if (set) {
      for (; (resultB = iB.next()) && !resultB.done; ) if (key = resultB.value[0], item2 = resultB.value[1], key && typeof key == "object") {
        if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) return false;
      } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel)) && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)) return false;
      return $setSize(set) === 0;
    }
    return true;
  }
  function objEquiv(a, b2, opts, channel) {
    var i2, key;
    if (typeof a != typeof b2 || a == null || b2 == null || $objToString(a) !== $objToString(b2) || isArguments(a) !== isArguments(b2)) return false;
    var aIsArray = isArray(a), bIsArray = isArray(b2);
    if (aIsArray !== bIsArray) return false;
    var aIsError = a instanceof Error, bIsError = b2 instanceof Error;
    if (aIsError !== bIsError || (aIsError || bIsError) && (a.name !== b2.name || a.message !== b2.message)) return false;
    var aIsRegex = isRegex(a), bIsRegex = isRegex(b2);
    if (aIsRegex !== bIsRegex || (aIsRegex || bIsRegex) && (a.source !== b2.source || flags(a) !== flags(b2))) return false;
    var aIsDate = isDate(a), bIsDate = isDate(b2);
    if (aIsDate !== bIsDate || (aIsDate || bIsDate) && $getTime(a) !== $getTime(b2) || opts.strict && gPO && gPO(a) !== gPO(b2)) return false;
    var aWhich = whichTypedArray(a), bWhich = whichTypedArray(b2);
    if (aWhich !== bWhich) return false;
    if (aWhich || bWhich) {
      if (a.length !== b2.length) return false;
      for (i2 = 0; i2 < a.length; i2++) if (a[i2] !== b2[i2]) return false;
      return true;
    }
    var aIsBuffer = isBuffer(a), bIsBuffer = isBuffer(b2);
    if (aIsBuffer !== bIsBuffer) return false;
    if (aIsBuffer || bIsBuffer) {
      if (a.length !== b2.length) return false;
      for (i2 = 0; i2 < a.length; i2++) if (a[i2] !== b2[i2]) return false;
      return true;
    }
    var aIsArrayBuffer = isArrayBuffer(a), bIsArrayBuffer = isArrayBuffer(b2);
    if (aIsArrayBuffer !== bIsArrayBuffer) return false;
    if (aIsArrayBuffer || bIsArrayBuffer) return byteLength(a) !== byteLength(b2) ? false : typeof Uint8Array == "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b2), opts, channel);
    var aIsSAB = isSharedArrayBuffer(a), bIsSAB = isSharedArrayBuffer(b2);
    if (aIsSAB !== bIsSAB) return false;
    if (aIsSAB || bIsSAB) return sabByteLength(a) !== sabByteLength(b2) ? false : typeof Uint8Array == "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b2), opts, channel);
    if (typeof a != typeof b2) return false;
    var ka = objectKeys(a), kb = objectKeys(b2);
    if (ka.length !== kb.length) return false;
    for (ka.sort(), kb.sort(), i2 = ka.length - 1; i2 >= 0; i2--) if (ka[i2] != kb[i2]) return false;
    for (i2 = ka.length - 1; i2 >= 0; i2--) if (key = ka[i2], !internalDeepEqual(a[key], b2[key], opts, channel)) return false;
    var aCollection = whichCollection(a), bCollection = whichCollection(b2);
    return aCollection !== bCollection ? false : aCollection === "Set" || bCollection === "Set" ? setEquiv(a, b2, opts, channel) : aCollection === "Map" ? mapEquiv(a, b2, opts, channel) : true;
  }
  module2.exports = function(a, b2, opts) {
    return internalDeepEqual(a, b2, opts, getSideChannel());
  };
} });
var require_elementRoleMap = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/elementRoleMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _deepEqual = _interopRequireDefault2(require_deep_equal()), _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator()), _rolesMap2 = _interopRequireDefault2(require_rolesMap());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i22) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i22) || _unsupportedIterableToArray2(arr, i22) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i22) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i22 && _arr.length === i22)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i22 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i22 >= o.length ? { done: true } : { done: false, value: o[i22++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i22 = 0, arr2 = new Array(len); i22 < len; i22++) arr2[i22] = arr[i22];
    return arr2;
  }
  var elementRoles3 = [], keys22 = _rolesMap2.default.keys();
  for (i2 = 0; i2 < keys22.length; i2++) if (key = keys22[i2], role = _rolesMap2.default.get(key), role) for (concepts = [].concat(role.baseConcepts, role.relatedConcepts), k2 = 0; k2 < concepts.length; k2++) relation = concepts[k2], relation.module === "HTML" && (concept = relation.concept, concept && function() {
    var conceptStr = JSON.stringify(concept), elementRoleRelation = elementRoles3.find(function(relation2) {
      return JSON.stringify(relation2[0]) === conceptStr;
    }), roles3 = void 0;
    elementRoleRelation ? roles3 = elementRoleRelation[1] : roles3 = [];
    for (var isUnique = true, _i2 = 0; _i2 < roles3.length; _i2++) if (roles3[_i2] === key) {
      isUnique = false;
      break;
    }
    isUnique && roles3.push(key), elementRoles3.push([concept, roles3]);
  }());
  var key, role, concepts, relation, concept, k2, i2, elementRoleMap2 = { entries: function() {
    return elementRoles3;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(elementRoles3), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), _key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, _key, elementRoles3);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key2) {
    var item = elementRoles3.find(function(tuple) {
      return (0, _deepEqual.default)(key2, tuple[0]);
    });
    return item && item[1];
  }, has: function(key2) {
    return !!elementRoleMap2.get(key2);
  }, keys: function() {
    return elementRoles3.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key2 = _ref2[0];
      return key2;
    });
  }, values: function() {
    return elementRoles3.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(elementRoleMap2, elementRoleMap2.entries());
  exports.default = _default2;
} });
var require_roleElementMap = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/roleElementMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator()), _rolesMap2 = _interopRequireDefault2(require_rolesMap());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i22) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i22) || _unsupportedIterableToArray2(arr, i22) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i22) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i22 && _arr.length === i22)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i22 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i22 >= o.length ? { done: true } : { done: false, value: o[i22++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i22 = 0, arr2 = new Array(len); i22 < len; i22++) arr2[i22] = arr[i22];
    return arr2;
  }
  var roleElement2 = [], keys22 = _rolesMap2.default.keys(), _loop = function(i22) {
    var key = keys22[i22], role = _rolesMap2.default.get(key);
    if (role) for (var concepts = [].concat(role.baseConcepts, role.relatedConcepts), k2 = 0; k2 < concepts.length; k2++) {
      var relation = concepts[k2];
      if (relation.module === "HTML") {
        var concept = relation.concept;
        if (concept) {
          var roleElementRelation = roleElement2.find(function(item) {
            return item[0] === key;
          }), relationConcepts = void 0;
          roleElementRelation ? relationConcepts = roleElementRelation[1] : relationConcepts = [], relationConcepts.push(concept), roleElement2.push([key, relationConcepts]);
        }
      }
    }
  };
  for (i2 = 0; i2 < keys22.length; i2++) _loop(i2);
  var i2, roleElementMap2 = { entries: function() {
    return roleElement2;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(roleElement2), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, key, roleElement2);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key) {
    var item = roleElement2.find(function(tuple) {
      return tuple[0] === key;
    });
    return item && item[1];
  }, has: function(key) {
    return !!roleElementMap2.get(key);
  }, keys: function() {
    return roleElement2.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key = _ref2[0];
      return key;
    });
  }, values: function() {
    return roleElement2.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(roleElementMap2, roleElementMap2.entries());
  exports.default = _default2;
} });
var require_lib = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/aria-query/lib/index.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.roles = exports.roleElements = exports.elementRoles = exports.dom = exports.aria = void 0;
  var _ariaPropsMap2 = _interopRequireDefault2(require_ariaPropsMap()), _domMap2 = _interopRequireDefault2(require_domMap()), _rolesMap2 = _interopRequireDefault2(require_rolesMap()), _elementRoleMap2 = _interopRequireDefault2(require_elementRoleMap()), _roleElementMap2 = _interopRequireDefault2(require_roleElementMap());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var aria2 = _ariaPropsMap2.default;
  exports.aria = aria2;
  var dom2 = _domMap2.default;
  exports.dom = dom2;
  var roles3 = _rolesMap2.default;
  exports.roles = roles3;
  var elementRoles3 = _elementRoleMap2.default;
  exports.elementRoles = elementRoles3;
  var roleElements2 = _roleElementMap2.default;
  exports.roleElements = roleElements2;
} });
var require_color_name = __commonJS({ "../../node_modules/color-name/index.js"(exports, module2) {
  module2.exports = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };
} });
var require_conversions = __commonJS({ "../../node_modules/color-convert/conversions.js"(exports, module2) {
  var cssKeywords = require_color_name(), reverseKeywords = {};
  for (let key of Object.keys(cssKeywords)) reverseKeywords[cssKeywords[key]] = key;
  var convert = { rgb: { channels: 3, labels: "rgb" }, hsl: { channels: 3, labels: "hsl" }, hsv: { channels: 3, labels: "hsv" }, hwb: { channels: 3, labels: "hwb" }, cmyk: { channels: 4, labels: "cmyk" }, xyz: { channels: 3, labels: "xyz" }, lab: { channels: 3, labels: "lab" }, lch: { channels: 3, labels: "lch" }, hex: { channels: 1, labels: ["hex"] }, keyword: { channels: 1, labels: ["keyword"] }, ansi16: { channels: 1, labels: ["ansi16"] }, ansi256: { channels: 1, labels: ["ansi256"] }, hcg: { channels: 3, labels: ["h", "c", "g"] }, apple: { channels: 3, labels: ["r16", "g16", "b16"] }, gray: { channels: 1, labels: ["gray"] } };
  module2.exports = convert;
  for (let model of Object.keys(convert)) {
    if (!("channels" in convert[model])) throw new Error("missing channels property: " + model);
    if (!("labels" in convert[model])) throw new Error("missing channel labels property: " + model);
    if (convert[model].labels.length !== convert[model].channels) throw new Error("channel and label counts mismatch: " + model);
    let { channels, labels } = convert[model];
    delete convert[model].channels, delete convert[model].labels, Object.defineProperty(convert[model], "channels", { value: channels }), Object.defineProperty(convert[model], "labels", { value: labels });
  }
  convert.rgb.hsl = function(rgb) {
    let r2 = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, min = Math.min(r2, g2, b2), max = Math.max(r2, g2, b2), delta = max - min, h2, s2;
    max === min ? h2 = 0 : r2 === max ? h2 = (g2 - b2) / delta : g2 === max ? h2 = 2 + (b2 - r2) / delta : b2 === max && (h2 = 4 + (r2 - g2) / delta), h2 = Math.min(h2 * 60, 360), h2 < 0 && (h2 += 360);
    let l2 = (min + max) / 2;
    return max === min ? s2 = 0 : l2 <= 0.5 ? s2 = delta / (max + min) : s2 = delta / (2 - max - min), [h2, s2 * 100, l2 * 100];
  };
  convert.rgb.hsv = function(rgb) {
    let rdif, gdif, bdif, h2, s2, r2 = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, v2 = Math.max(r2, g2, b2), diff2 = v2 - Math.min(r2, g2, b2), diffc = function(c2) {
      return (v2 - c2) / 6 / diff2 + 1 / 2;
    };
    return diff2 === 0 ? (h2 = 0, s2 = 0) : (s2 = diff2 / v2, rdif = diffc(r2), gdif = diffc(g2), bdif = diffc(b2), r2 === v2 ? h2 = bdif - gdif : g2 === v2 ? h2 = 1 / 3 + rdif - bdif : b2 === v2 && (h2 = 2 / 3 + gdif - rdif), h2 < 0 ? h2 += 1 : h2 > 1 && (h2 -= 1)), [h2 * 360, s2 * 100, v2 * 100];
  };
  convert.rgb.hwb = function(rgb) {
    let r2 = rgb[0], g2 = rgb[1], b2 = rgb[2], h2 = convert.rgb.hsl(rgb)[0], w2 = 1 / 255 * Math.min(r2, Math.min(g2, b2));
    return b2 = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b2)), [h2, w2 * 100, b2 * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    let r2 = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, k2 = Math.min(1 - r2, 1 - g2, 1 - b2), c2 = (1 - r2 - k2) / (1 - k2) || 0, m2 = (1 - g2 - k2) / (1 - k2) || 0, y2 = (1 - b2 - k2) / (1 - k2) || 0;
    return [c2 * 100, m2 * 100, y2 * 100, k2 * 100];
  };
  function comparativeDistance(x2, y2) {
    return (x2[0] - y2[0]) ** 2 + (x2[1] - y2[1]) ** 2 + (x2[2] - y2[2]) ** 2;
  }
  convert.rgb.keyword = function(rgb) {
    let reversed = reverseKeywords[rgb];
    if (reversed) return reversed;
    let currentClosestDistance = 1 / 0, currentClosestKeyword;
    for (let keyword of Object.keys(cssKeywords)) {
      let value = cssKeywords[keyword], distance = comparativeDistance(rgb, value);
      distance < currentClosestDistance && (currentClosestDistance = distance, currentClosestKeyword = keyword);
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function(rgb) {
    let r2 = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255;
    r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92, g2 = g2 > 0.04045 ? ((g2 + 0.055) / 1.055) ** 2.4 : g2 / 12.92, b2 = b2 > 0.04045 ? ((b2 + 0.055) / 1.055) ** 2.4 : b2 / 12.92;
    let x2 = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805, y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722, z2 = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
    return [x2 * 100, y2 * 100, z2 * 100];
  };
  convert.rgb.lab = function(rgb) {
    let xyz = convert.rgb.xyz(rgb), x2 = xyz[0], y2 = xyz[1], z2 = xyz[2];
    x2 /= 95.047, y2 /= 100, z2 /= 108.883, x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116, y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116, z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
    let l2 = 116 * y2 - 16, a = 500 * (x2 - y2), b2 = 200 * (y2 - z2);
    return [l2, a, b2];
  };
  convert.hsl.rgb = function(hsl) {
    let h2 = hsl[0] / 360, s2 = hsl[1] / 100, l2 = hsl[2] / 100, t2, t3, val;
    if (s2 === 0) return val = l2 * 255, [val, val, val];
    l2 < 0.5 ? t2 = l2 * (1 + s2) : t2 = l2 + s2 - l2 * s2;
    let t1 = 2 * l2 - t2, rgb = [0, 0, 0];
    for (let i2 = 0; i2 < 3; i2++) t3 = h2 + 1 / 3 * -(i2 - 1), t3 < 0 && t3++, t3 > 1 && t3--, 6 * t3 < 1 ? val = t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? val = t2 : 3 * t3 < 2 ? val = t1 + (t2 - t1) * (2 / 3 - t3) * 6 : val = t1, rgb[i2] = val * 255;
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    let h2 = hsl[0], s2 = hsl[1] / 100, l2 = hsl[2] / 100, smin = s2, lmin = Math.max(l2, 0.01);
    l2 *= 2, s2 *= l2 <= 1 ? l2 : 2 - l2, smin *= lmin <= 1 ? lmin : 2 - lmin;
    let v2 = (l2 + s2) / 2, sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
    return [h2, sv * 100, v2 * 100];
  };
  convert.hsv.rgb = function(hsv) {
    let h2 = hsv[0] / 60, s2 = hsv[1] / 100, v2 = hsv[2] / 100, hi = Math.floor(h2) % 6, f2 = h2 - Math.floor(h2), p2 = 255 * v2 * (1 - s2), q2 = 255 * v2 * (1 - s2 * f2), t = 255 * v2 * (1 - s2 * (1 - f2));
    switch (v2 *= 255, hi) {
      case 0:
        return [v2, t, p2];
      case 1:
        return [q2, v2, p2];
      case 2:
        return [p2, v2, t];
      case 3:
        return [p2, q2, v2];
      case 4:
        return [t, p2, v2];
      case 5:
        return [v2, p2, q2];
    }
  };
  convert.hsv.hsl = function(hsv) {
    let h2 = hsv[0], s2 = hsv[1] / 100, v2 = hsv[2] / 100, vmin = Math.max(v2, 0.01), sl, l2;
    l2 = (2 - s2) * v2;
    let lmin = (2 - s2) * vmin;
    return sl = s2 * vmin, sl /= lmin <= 1 ? lmin : 2 - lmin, sl = sl || 0, l2 /= 2, [h2, sl * 100, l2 * 100];
  };
  convert.hwb.rgb = function(hwb) {
    let h2 = hwb[0] / 360, wh = hwb[1] / 100, bl = hwb[2] / 100, ratio = wh + bl, f2;
    ratio > 1 && (wh /= ratio, bl /= ratio);
    let i2 = Math.floor(6 * h2), v2 = 1 - bl;
    f2 = 6 * h2 - i2, i2 & 1 && (f2 = 1 - f2);
    let n2 = wh + f2 * (v2 - wh), r2, g2, b2;
    switch (i2) {
      default:
      case 6:
      case 0:
        r2 = v2, g2 = n2, b2 = wh;
        break;
      case 1:
        r2 = n2, g2 = v2, b2 = wh;
        break;
      case 2:
        r2 = wh, g2 = v2, b2 = n2;
        break;
      case 3:
        r2 = wh, g2 = n2, b2 = v2;
        break;
      case 4:
        r2 = n2, g2 = wh, b2 = v2;
        break;
      case 5:
        r2 = v2, g2 = wh, b2 = n2;
        break;
    }
    return [r2 * 255, g2 * 255, b2 * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    let c2 = cmyk[0] / 100, m2 = cmyk[1] / 100, y2 = cmyk[2] / 100, k2 = cmyk[3] / 100, r2 = 1 - Math.min(1, c2 * (1 - k2) + k2), g2 = 1 - Math.min(1, m2 * (1 - k2) + k2), b2 = 1 - Math.min(1, y2 * (1 - k2) + k2);
    return [r2 * 255, g2 * 255, b2 * 255];
  };
  convert.xyz.rgb = function(xyz) {
    let x2 = xyz[0] / 100, y2 = xyz[1] / 100, z2 = xyz[2] / 100, r2, g2, b2;
    return r2 = x2 * 3.2406 + y2 * -1.5372 + z2 * -0.4986, g2 = x2 * -0.9689 + y2 * 1.8758 + z2 * 0.0415, b2 = x2 * 0.0557 + y2 * -0.204 + z2 * 1.057, r2 = r2 > 31308e-7 ? 1.055 * r2 ** (1 / 2.4) - 0.055 : r2 * 12.92, g2 = g2 > 31308e-7 ? 1.055 * g2 ** (1 / 2.4) - 0.055 : g2 * 12.92, b2 = b2 > 31308e-7 ? 1.055 * b2 ** (1 / 2.4) - 0.055 : b2 * 12.92, r2 = Math.min(Math.max(0, r2), 1), g2 = Math.min(Math.max(0, g2), 1), b2 = Math.min(Math.max(0, b2), 1), [r2 * 255, g2 * 255, b2 * 255];
  };
  convert.xyz.lab = function(xyz) {
    let x2 = xyz[0], y2 = xyz[1], z2 = xyz[2];
    x2 /= 95.047, y2 /= 100, z2 /= 108.883, x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116, y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116, z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
    let l2 = 116 * y2 - 16, a = 500 * (x2 - y2), b2 = 200 * (y2 - z2);
    return [l2, a, b2];
  };
  convert.lab.xyz = function(lab) {
    let l2 = lab[0], a = lab[1], b2 = lab[2], x2, y2, z2;
    y2 = (l2 + 16) / 116, x2 = a / 500 + y2, z2 = y2 - b2 / 200;
    let y22 = y2 ** 3, x22 = x2 ** 3, z22 = z2 ** 3;
    return y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787, x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787, z2 = z22 > 8856e-6 ? z22 : (z2 - 16 / 116) / 7.787, x2 *= 95.047, y2 *= 100, z2 *= 108.883, [x2, y2, z2];
  };
  convert.lab.lch = function(lab) {
    let l2 = lab[0], a = lab[1], b2 = lab[2], h2;
    h2 = Math.atan2(b2, a) * 360 / 2 / Math.PI, h2 < 0 && (h2 += 360);
    let c2 = Math.sqrt(a * a + b2 * b2);
    return [l2, c2, h2];
  };
  convert.lch.lab = function(lch) {
    let l2 = lch[0], c2 = lch[1], hr = lch[2] / 360 * 2 * Math.PI, a = c2 * Math.cos(hr), b2 = c2 * Math.sin(hr);
    return [l2, a, b2];
  };
  convert.rgb.ansi16 = function(args, saturation = null) {
    let [r2, g2, b2] = args, value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
    if (value = Math.round(value / 50), value === 0) return 30;
    let ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
    return value === 2 && (ansi += 60), ansi;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    let r2 = args[0], g2 = args[1], b2 = args[2];
    return r2 === g2 && g2 === b2 ? r2 < 8 ? 16 : r2 > 248 ? 231 : Math.round((r2 - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
  };
  convert.ansi16.rgb = function(args) {
    let color = args % 10;
    if (color === 0 || color === 7) return args > 50 && (color += 3.5), color = color / 10.5 * 255, [color, color, color];
    let mult = (~~(args > 50) + 1) * 0.5, r2 = (color & 1) * mult * 255, g2 = (color >> 1 & 1) * mult * 255, b2 = (color >> 2 & 1) * mult * 255;
    return [r2, g2, b2];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      let c2 = (args - 232) * 10 + 8;
      return [c2, c2, c2];
    }
    args -= 16;
    let rem, r2 = Math.floor(args / 36) / 5 * 255, g2 = Math.floor((rem = args % 36) / 6) / 5 * 255, b2 = rem % 6 / 5 * 255;
    return [r2, g2, b2];
  };
  convert.rgb.hex = function(args) {
    let string2 = (((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255)).toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.hex.rgb = function(args) {
    let match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) return [0, 0, 0];
    let colorString = match[0];
    match[0].length === 3 && (colorString = colorString.split("").map((char) => char + char).join(""));
    let integer = parseInt(colorString, 16), r2 = integer >> 16 & 255, g2 = integer >> 8 & 255, b2 = integer & 255;
    return [r2, g2, b2];
  };
  convert.rgb.hcg = function(rgb) {
    let r2 = rgb[0] / 255, g2 = rgb[1] / 255, b2 = rgb[2] / 255, max = Math.max(Math.max(r2, g2), b2), min = Math.min(Math.min(r2, g2), b2), chroma = max - min, grayscale, hue;
    return chroma < 1 ? grayscale = min / (1 - chroma) : grayscale = 0, chroma <= 0 ? hue = 0 : max === r2 ? hue = (g2 - b2) / chroma % 6 : max === g2 ? hue = 2 + (b2 - r2) / chroma : hue = 4 + (r2 - g2) / chroma, hue /= 6, hue %= 1, [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    let s2 = hsl[1] / 100, l2 = hsl[2] / 100, c2 = l2 < 0.5 ? 2 * s2 * l2 : 2 * s2 * (1 - l2), f2 = 0;
    return c2 < 1 && (f2 = (l2 - 0.5 * c2) / (1 - c2)), [hsl[0], c2 * 100, f2 * 100];
  };
  convert.hsv.hcg = function(hsv) {
    let s2 = hsv[1] / 100, v2 = hsv[2] / 100, c2 = s2 * v2, f2 = 0;
    return c2 < 1 && (f2 = (v2 - c2) / (1 - c2)), [hsv[0], c2 * 100, f2 * 100];
  };
  convert.hcg.rgb = function(hcg) {
    let h2 = hcg[0] / 360, c2 = hcg[1] / 100, g2 = hcg[2] / 100;
    if (c2 === 0) return [g2 * 255, g2 * 255, g2 * 255];
    let pure = [0, 0, 0], hi = h2 % 1 * 6, v2 = hi % 1, w2 = 1 - v2, mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1, pure[1] = v2, pure[2] = 0;
        break;
      case 1:
        pure[0] = w2, pure[1] = 1, pure[2] = 0;
        break;
      case 2:
        pure[0] = 0, pure[1] = 1, pure[2] = v2;
        break;
      case 3:
        pure[0] = 0, pure[1] = w2, pure[2] = 1;
        break;
      case 4:
        pure[0] = v2, pure[1] = 0, pure[2] = 1;
        break;
      default:
        pure[0] = 1, pure[1] = 0, pure[2] = w2;
    }
    return mg = (1 - c2) * g2, [(c2 * pure[0] + mg) * 255, (c2 * pure[1] + mg) * 255, (c2 * pure[2] + mg) * 255];
  };
  convert.hcg.hsv = function(hcg) {
    let c2 = hcg[1] / 100, g2 = hcg[2] / 100, v2 = c2 + g2 * (1 - c2), f2 = 0;
    return v2 > 0 && (f2 = c2 / v2), [hcg[0], f2 * 100, v2 * 100];
  };
  convert.hcg.hsl = function(hcg) {
    let c2 = hcg[1] / 100, l2 = hcg[2] / 100 * (1 - c2) + 0.5 * c2, s2 = 0;
    return l2 > 0 && l2 < 0.5 ? s2 = c2 / (2 * l2) : l2 >= 0.5 && l2 < 1 && (s2 = c2 / (2 * (1 - l2))), [hcg[0], s2 * 100, l2 * 100];
  };
  convert.hcg.hwb = function(hcg) {
    let c2 = hcg[1] / 100, g2 = hcg[2] / 100, v2 = c2 + g2 * (1 - c2);
    return [hcg[0], (v2 - c2) * 100, (1 - v2) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    let w2 = hwb[1] / 100, v2 = 1 - hwb[2] / 100, c2 = v2 - w2, g2 = 0;
    return c2 < 1 && (g2 = (v2 - c2) / (1 - c2)), [hwb[0], c2 * 100, g2 * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hsv = convert.gray.hsl;
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    let val = Math.round(gray[0] / 100 * 255) & 255, string2 = ((val << 16) + (val << 8) + val).toString(16).toUpperCase();
    return "000000".substring(string2.length) + string2;
  };
  convert.rgb.gray = function(rgb) {
    return [(rgb[0] + rgb[1] + rgb[2]) / 3 / 255 * 100];
  };
} });
var require_route = __commonJS({ "../../node_modules/color-convert/route.js"(exports, module2) {
  var conversions = require_conversions();
  function buildGraph() {
    let graph = {}, models = Object.keys(conversions);
    for (let len = models.length, i2 = 0; i2 < len; i2++) graph[models[i2]] = { distance: -1, parent: null };
    return graph;
  }
  function deriveBFS(fromModel) {
    let graph = buildGraph(), queue = [fromModel];
    for (graph[fromModel].distance = 0; queue.length; ) {
      let current = queue.pop(), adjacents = Object.keys(conversions[current]);
      for (let len = adjacents.length, i2 = 0; i2 < len; i2++) {
        let adjacent = adjacents[i2], node = graph[adjacent];
        node.distance === -1 && (node.distance = graph[current].distance + 1, node.parent = current, queue.unshift(adjacent));
      }
    }
    return graph;
  }
  function link(from, to2) {
    return function(args) {
      return to2(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    let path = [graph[toModel].parent, toModel], fn3 = conversions[graph[toModel].parent][toModel], cur = graph[toModel].parent;
    for (; graph[cur].parent; ) path.unshift(graph[cur].parent), fn3 = link(conversions[graph[cur].parent][cur], fn3), cur = graph[cur].parent;
    return fn3.conversion = path, fn3;
  }
  module2.exports = function(fromModel) {
    let graph = deriveBFS(fromModel), conversion = {}, models = Object.keys(graph);
    for (let len = models.length, i2 = 0; i2 < len; i2++) {
      let toModel = models[i2];
      graph[toModel].parent !== null && (conversion[toModel] = wrapConversion(toModel, graph));
    }
    return conversion;
  };
} });
var require_color_convert = __commonJS({ "../../node_modules/color-convert/index.js"(exports, module2) {
  var conversions = require_conversions(), route = require_route(), convert = {}, models = Object.keys(conversions);
  function wrapRaw(fn3) {
    let wrappedFn = function(...args) {
      let arg0 = args[0];
      return arg0 == null ? arg0 : (arg0.length > 1 && (args = arg0), fn3(args));
    };
    return "conversion" in fn3 && (wrappedFn.conversion = fn3.conversion), wrappedFn;
  }
  function wrapRounded(fn3) {
    let wrappedFn = function(...args) {
      let arg0 = args[0];
      if (arg0 == null) return arg0;
      arg0.length > 1 && (args = arg0);
      let result = fn3(args);
      if (typeof result == "object") for (let len = result.length, i2 = 0; i2 < len; i2++) result[i2] = Math.round(result[i2]);
      return result;
    };
    return "conversion" in fn3 && (wrappedFn.conversion = fn3.conversion), wrappedFn;
  }
  models.forEach((fromModel) => {
    convert[fromModel] = {}, Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels }), Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
    let routes = route(fromModel);
    Object.keys(routes).forEach((toModel) => {
      let fn3 = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn3), convert[fromModel][toModel].raw = wrapRaw(fn3);
    });
  });
  module2.exports = convert;
} });
var require_ansi_styles2 = __commonJS({ "../../node_modules/ansi-styles/index.js"(exports, module2) {
  var wrapAnsi16 = (fn3, offset) => (...args) => `\x1B[${fn3(...args) + offset}m`, wrapAnsi256 = (fn3, offset) => (...args) => {
    let code = fn3(...args);
    return `\x1B[${38 + offset};5;${code}m`;
  }, wrapAnsi16m = (fn3, offset) => (...args) => {
    let rgb = fn3(...args);
    return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  }, ansi2ansi = (n2) => n2, rgb2rgb = (r2, g2, b2) => [r2, g2, b2], setLazyProperty = (object, property, get6) => {
    Object.defineProperty(object, property, { get: () => {
      let value = get6();
      return Object.defineProperty(object, property, { value, enumerable: true, configurable: true }), value;
    }, enumerable: true, configurable: true });
  }, colorConvert, makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    colorConvert === void 0 && (colorConvert = require_color_convert());
    let offset = isBackground ? 10 : 0, styles = {};
    for (let [sourceSpace, suite] of Object.entries(colorConvert)) {
      let name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      sourceSpace === targetSpace ? styles[name] = wrap(identity, offset) : typeof suite == "object" && (styles[name] = wrap(suite[targetSpace], offset));
    }
    return styles;
  };
  function assembleStyles() {
    let codes = /* @__PURE__ */ new Map(), styles = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
    styles.color.gray = styles.color.blackBright, styles.bgColor.bgGray = styles.bgColor.bgBlackBright, styles.color.grey = styles.color.blackBright, styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (let [groupName, group] of Object.entries(styles)) {
      for (let [styleName, style] of Object.entries(group)) styles[styleName] = { open: `\x1B[${style[0]}m`, close: `\x1B[${style[1]}m` }, group[styleName] = styles[styleName], codes.set(style[0], style[1]);
      Object.defineProperty(styles, groupName, { value: group, enumerable: false });
    }
    return Object.defineProperty(styles, "codes", { value: codes, enumerable: false }), styles.color.close = "\x1B[39m", styles.bgColor.close = "\x1B[49m", setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false)), setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false)), setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false)), setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true)), setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true)), setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true)), styles;
  }
  Object.defineProperty(module2, "exports", { enumerable: true, get: assembleStyles });
} });
var require_browser = __commonJS({ "../../node_modules/supports-color/browser.js"(exports, module2) {
  module2.exports = { stdout: false, stderr: false };
} });
var require_util2 = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/chalk/source/util.js"(exports, module2) {
  var stringReplaceAll = (string2, substring, replacer) => {
    let index = string2.indexOf(substring);
    if (index === -1) return string2;
    let substringLength = substring.length, endIndex = 0, returnValue = "";
    do
      returnValue += string2.substr(endIndex, index - endIndex) + substring + replacer, endIndex = index + substringLength, index = string2.indexOf(substring, endIndex);
    while (index !== -1);
    return returnValue += string2.substr(endIndex), returnValue;
  }, stringEncaseCRLFWithFirstIndex = (string2, prefix, postfix, index) => {
    let endIndex = 0, returnValue = "";
    do {
      let gotCR = string2[index - 1] === "\r";
      returnValue += string2.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? `\r
` : `
`) + postfix, endIndex = index + 1, index = string2.indexOf(`
`, endIndex);
    } while (index !== -1);
    return returnValue += string2.substr(endIndex), returnValue;
  };
  module2.exports = { stringReplaceAll, stringEncaseCRLFWithFirstIndex };
} });
var require_templates = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/chalk/source/templates.js"(exports, module2) {
  var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi, STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g, STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/, ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.)|([^\\])/gi, ESCAPES = /* @__PURE__ */ new Map([["n", `
`], ["r", "\r"], ["t", "	"], ["b", "\b"], ["f", "\f"], ["v", "\v"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);
  function unescape(c2) {
    let u2 = c2[0] === "u", bracket = c2[1] === "{";
    return u2 && !bracket && c2.length === 5 || c2[0] === "x" && c2.length === 3 ? String.fromCharCode(parseInt(c2.slice(1), 16)) : u2 && bracket ? String.fromCodePoint(parseInt(c2.slice(2, -1), 16)) : ESCAPES.get(c2) || c2;
  }
  function parseArguments(name, arguments_) {
    let results = [], chunks = arguments_.trim().split(/\s*,\s*/g), matches3;
    for (let chunk of chunks) {
      let number = Number(chunk);
      if (!Number.isNaN(number)) results.push(number);
      else if (matches3 = chunk.match(STRING_REGEX)) results.push(matches3[2].replace(ESCAPE_REGEX, (m2, escape2, character) => escape2 ? unescape(escape2) : character));
      else throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    let results = [], matches3;
    for (; (matches3 = STYLE_REGEX.exec(style)) !== null; ) {
      let name = matches3[1];
      if (matches3[2]) {
        let args = parseArguments(name, matches3[2]);
        results.push([name].concat(args));
      } else results.push([name]);
    }
    return results;
  }
  function buildStyle(chalk3, styles) {
    let enabled = {};
    for (let layer of styles) for (let style of layer.styles) enabled[style[0]] = layer.inverse ? null : style.slice(1);
    let current = chalk3;
    for (let [styleName, styles2] of Object.entries(enabled)) if (Array.isArray(styles2)) {
      if (!(styleName in current)) throw new Error(`Unknown Chalk style: ${styleName}`);
      current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
    }
    return current;
  }
  module2.exports = (chalk3, temporary) => {
    let styles = [], chunks = [], chunk = [];
    if (temporary.replace(TEMPLATE_REGEX, (m2, escapeCharacter, inverse, style, close, character) => {
      if (escapeCharacter) chunk.push(unescape(escapeCharacter));
      else if (style) {
        let string2 = chunk.join("");
        chunk = [], chunks.push(styles.length === 0 ? string2 : buildStyle(chalk3, styles)(string2)), styles.push({ inverse, styles: parseStyle(style) });
      } else if (close) {
        if (styles.length === 0) throw new Error("Found extraneous } in Chalk template literal");
        chunks.push(buildStyle(chalk3, styles)(chunk.join(""))), chunk = [], styles.pop();
      } else chunk.push(character);
    }), chunks.push(chunk.join("")), styles.length > 0) {
      let errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMsg);
    }
    return chunks.join("");
  };
} });
var require_source = __commonJS({ "../../node_modules/@testing-library/jest-dom/node_modules/chalk/source/index.js"(exports, module2) {
  var ansiStyles2 = require_ansi_styles2(), { stdout: stdoutColor, stderr: stderrColor } = require_browser(), { stringReplaceAll, stringEncaseCRLFWithFirstIndex } = require_util2(), levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"], styles = /* @__PURE__ */ Object.create(null), applyOptions = (object, options = {}) => {
    if (options.level > 3 || options.level < 0) throw new Error("The `level` option should be an integer from 0 to 3");
    let colorLevel = stdoutColor ? stdoutColor.level : 0;
    object.level = options.level === void 0 ? colorLevel : options.level;
  }, ChalkClass = class {
    constructor(options) {
      return chalkFactory(options);
    }
  }, chalkFactory = (options) => {
    let chalk4 = {};
    return applyOptions(chalk4, options), chalk4.template = (...arguments_) => chalkTag(chalk4.template, ...arguments_), Object.setPrototypeOf(chalk4, Chalk.prototype), Object.setPrototypeOf(chalk4.template, chalk4), chalk4.template.constructor = () => {
      throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
    }, chalk4.template.Instance = ChalkClass, chalk4.template;
  };
  function Chalk(options) {
    return chalkFactory(options);
  }
  for (let [styleName, style] of Object.entries(ansiStyles2)) styles[styleName] = { get() {
    let builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
    return Object.defineProperty(this, styleName, { value: builder }), builder;
  } };
  styles.visible = { get() {
    let builder = createBuilder(this, this._styler, true);
    return Object.defineProperty(this, "visible", { value: builder }), builder;
  } };
  var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
  for (let model of usedModels) styles[model] = { get() {
    let { level } = this;
    return function(...arguments_) {
      let styler = createStyler(ansiStyles2.color[levelMapping[level]][model](...arguments_), ansiStyles2.color.close, this._styler);
      return createBuilder(this, styler, this._isEmpty);
    };
  } };
  for (let model of usedModels) {
    let bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
    styles[bgModel] = { get() {
      let { level } = this;
      return function(...arguments_) {
        let styler = createStyler(ansiStyles2.bgColor[levelMapping[level]][model](...arguments_), ansiStyles2.bgColor.close, this._styler);
        return createBuilder(this, styler, this._isEmpty);
      };
    } };
  }
  var proto = Object.defineProperties(() => {
  }, { ...styles, level: { enumerable: true, get() {
    return this._generator.level;
  }, set(level) {
    this._generator.level = level;
  } } }), createStyler = (open, close, parent) => {
    let openAll, closeAll;
    return parent === void 0 ? (openAll = open, closeAll = close) : (openAll = parent.openAll + open, closeAll = close + parent.closeAll), { open, close, openAll, closeAll, parent };
  }, createBuilder = (self2, _styler, _isEmpty) => {
    let builder = (...arguments_) => applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
    return builder.__proto__ = proto, builder._generator = self2, builder._styler = _styler, builder._isEmpty = _isEmpty, builder;
  }, applyStyle = (self2, string2) => {
    if (self2.level <= 0 || !string2) return self2._isEmpty ? "" : string2;
    let styler = self2._styler;
    if (styler === void 0) return string2;
    let { openAll, closeAll } = styler;
    if (string2.indexOf("\x1B") !== -1) for (; styler !== void 0; ) string2 = stringReplaceAll(string2, styler.close, styler.open), styler = styler.parent;
    let lfIndex = string2.indexOf(`
`);
    return lfIndex !== -1 && (string2 = stringEncaseCRLFWithFirstIndex(string2, closeAll, openAll, lfIndex)), openAll + string2 + closeAll;
  }, template, chalkTag = (chalk4, ...strings) => {
    let [firstString] = strings;
    if (!Array.isArray(firstString)) return strings.join(" ");
    let arguments_ = strings.slice(1), parts = [firstString.raw[0]];
    for (let i2 = 1; i2 < firstString.length; i2++) parts.push(String(arguments_[i2 - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i2]));
    return template === void 0 && (template = require_templates()), template(chalk4, parts.join(""));
  };
  Object.defineProperties(Chalk.prototype, styles);
  var chalk3 = Chalk();
  chalk3.supportsColor = stdoutColor;
  chalk3.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
  chalk3.stderr.supportsColor = stderrColor;
  chalk3.Level = { None: 0, Basic: 1, Ansi256: 2, TrueColor: 3, 0: "None", 1: "Basic", 2: "Ansi256", 3: "TrueColor" };
  module2.exports = chalk3;
} });
var require_listCacheClear = __commonJS({ "../../node_modules/lodash/_listCacheClear.js"(exports, module2) {
  function listCacheClear() {
    this.__data__ = [], this.size = 0;
  }
  module2.exports = listCacheClear;
} });
var require_eq = __commonJS({ "../../node_modules/lodash/eq.js"(exports, module2) {
  function eq2(value, other) {
    return value === other || value !== value && other !== other;
  }
  module2.exports = eq2;
} });
var require_assocIndexOf = __commonJS({ "../../node_modules/lodash/_assocIndexOf.js"(exports, module2) {
  var eq2 = require_eq();
  function assocIndexOf(array, key) {
    for (var length = array.length; length--; ) if (eq2(array[length][0], key)) return length;
    return -1;
  }
  module2.exports = assocIndexOf;
} });
var require_listCacheDelete = __commonJS({ "../../node_modules/lodash/_listCacheDelete.js"(exports, module2) {
  var assocIndexOf = require_assocIndexOf(), arrayProto = Array.prototype, splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    return index == lastIndex ? data.pop() : splice.call(data, index, 1), --this.size, true;
  }
  module2.exports = listCacheDelete;
} });
var require_listCacheGet = __commonJS({ "../../node_modules/lodash/_listCacheGet.js"(exports, module2) {
  var assocIndexOf = require_assocIndexOf();
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  module2.exports = listCacheGet;
} });
var require_listCacheHas = __commonJS({ "../../node_modules/lodash/_listCacheHas.js"(exports, module2) {
  var assocIndexOf = require_assocIndexOf();
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  module2.exports = listCacheHas;
} });
var require_listCacheSet = __commonJS({ "../../node_modules/lodash/_listCacheSet.js"(exports, module2) {
  var assocIndexOf = require_assocIndexOf();
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? (++this.size, data.push([key, value])) : data[index][1] = value, this;
  }
  module2.exports = listCacheSet;
} });
var require_ListCache = __commonJS({ "../../node_modules/lodash/_ListCache.js"(exports, module2) {
  var listCacheClear = require_listCacheClear(), listCacheDelete = require_listCacheDelete(), listCacheGet = require_listCacheGet(), listCacheHas = require_listCacheHas(), listCacheSet = require_listCacheSet();
  function ListCache(entries6) {
    var index = -1, length = entries6 == null ? 0 : entries6.length;
    for (this.clear(); ++index < length; ) {
      var entry = entries6[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype.delete = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  module2.exports = ListCache;
} });
var require_stackClear = __commonJS({ "../../node_modules/lodash/_stackClear.js"(exports, module2) {
  var ListCache = require_ListCache();
  function stackClear() {
    this.__data__ = new ListCache(), this.size = 0;
  }
  module2.exports = stackClear;
} });
var require_stackDelete = __commonJS({ "../../node_modules/lodash/_stackDelete.js"(exports, module2) {
  function stackDelete(key) {
    var data = this.__data__, result = data.delete(key);
    return this.size = data.size, result;
  }
  module2.exports = stackDelete;
} });
var require_stackGet = __commonJS({ "../../node_modules/lodash/_stackGet.js"(exports, module2) {
  function stackGet(key) {
    return this.__data__.get(key);
  }
  module2.exports = stackGet;
} });
var require_stackHas = __commonJS({ "../../node_modules/lodash/_stackHas.js"(exports, module2) {
  function stackHas(key) {
    return this.__data__.has(key);
  }
  module2.exports = stackHas;
} });
var require_freeGlobal = __commonJS({ "../../node_modules/lodash/_freeGlobal.js"(exports, module2) {
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  module2.exports = freeGlobal;
} });
var require_root = __commonJS({ "../../node_modules/lodash/_root.js"(exports, module2) {
  var freeGlobal = require_freeGlobal(), freeSelf = typeof self == "object" && self && self.Object === Object && self, root = freeGlobal || freeSelf || Function("return this")();
  module2.exports = root;
} });
var require_Symbol = __commonJS({ "../../node_modules/lodash/_Symbol.js"(exports, module2) {
  var root = require_root(), Symbol2 = root.Symbol;
  module2.exports = Symbol2;
} });
var require_getRawTag = __commonJS({ "../../node_modules/lodash/_getRawTag.js"(exports, module2) {
  var Symbol2 = require_Symbol(), objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty, nativeObjectToString = objectProto.toString, symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch {
    }
    var result = nativeObjectToString.call(value);
    return unmasked && (isOwn ? value[symToStringTag] = tag : delete value[symToStringTag]), result;
  }
  module2.exports = getRawTag;
} });
var require_objectToString = __commonJS({ "../../node_modules/lodash/_objectToString.js"(exports, module2) {
  var objectProto = Object.prototype, nativeObjectToString = objectProto.toString;
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  module2.exports = objectToString;
} });
var require_baseGetTag = __commonJS({ "../../node_modules/lodash/_baseGetTag.js"(exports, module2) {
  var Symbol2 = require_Symbol(), getRawTag = require_getRawTag(), objectToString = require_objectToString(), nullTag = "[object Null]", undefinedTag = "[object Undefined]", symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function baseGetTag(value) {
    return value == null ? value === void 0 ? undefinedTag : nullTag : symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  module2.exports = baseGetTag;
} });
var require_isObject = __commonJS({ "../../node_modules/lodash/isObject.js"(exports, module2) {
  function isObject2(value) {
    var type3 = typeof value;
    return value != null && (type3 == "object" || type3 == "function");
  }
  module2.exports = isObject2;
} });
var require_isFunction = __commonJS({ "../../node_modules/lodash/isFunction.js"(exports, module2) {
  var baseGetTag = require_baseGetTag(), isObject2 = require_isObject(), asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction(value) {
    if (!isObject2(value)) return false;
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  module2.exports = isFunction;
} });
var require_coreJsData = __commonJS({ "../../node_modules/lodash/_coreJsData.js"(exports, module2) {
  var root = require_root(), coreJsData = root["__core-js_shared__"];
  module2.exports = coreJsData;
} });
var require_isMasked = __commonJS({ "../../node_modules/lodash/_isMasked.js"(exports, module2) {
  var coreJsData = require_coreJsData(), maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  module2.exports = isMasked;
} });
var require_toSource = __commonJS({ "../../node_modules/lodash/_toSource.js"(exports, module2) {
  var funcProto = Function.prototype, funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch {
      }
      try {
        return func + "";
      } catch {
      }
    }
    return "";
  }
  module2.exports = toSource;
} });
var require_baseIsNative = __commonJS({ "../../node_modules/lodash/_baseIsNative.js"(exports, module2) {
  var isFunction = require_isFunction(), isMasked = require_isMasked(), isObject2 = require_isObject(), toSource = require_toSource(), reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reIsHostCtor = /^\[object .+?Constructor\]$/, funcProto = Function.prototype, objectProto = Object.prototype, funcToString = funcProto.toString, hasOwnProperty = objectProto.hasOwnProperty, reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  function baseIsNative(value) {
    if (!isObject2(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  module2.exports = baseIsNative;
} });
var require_getValue = __commonJS({ "../../node_modules/lodash/_getValue.js"(exports, module2) {
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  module2.exports = getValue;
} });
var require_getNative = __commonJS({ "../../node_modules/lodash/_getNative.js"(exports, module2) {
  var baseIsNative = require_baseIsNative(), getValue = require_getValue();
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  module2.exports = getNative;
} });
var require_Map = __commonJS({ "../../node_modules/lodash/_Map.js"(exports, module2) {
  var getNative = require_getNative(), root = require_root(), Map2 = getNative(root, "Map");
  module2.exports = Map2;
} });
var require_nativeCreate = __commonJS({ "../../node_modules/lodash/_nativeCreate.js"(exports, module2) {
  var getNative = require_getNative(), nativeCreate = getNative(Object, "create");
  module2.exports = nativeCreate;
} });
var require_hashClear = __commonJS({ "../../node_modules/lodash/_hashClear.js"(exports, module2) {
  var nativeCreate = require_nativeCreate();
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {}, this.size = 0;
  }
  module2.exports = hashClear;
} });
var require_hashDelete = __commonJS({ "../../node_modules/lodash/_hashDelete.js"(exports, module2) {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    return this.size -= result ? 1 : 0, result;
  }
  module2.exports = hashDelete;
} });
var require_hashGet = __commonJS({ "../../node_modules/lodash/_hashGet.js"(exports, module2) {
  var nativeCreate = require_nativeCreate(), HASH_UNDEFINED = "__lodash_hash_undefined__", objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : void 0;
  }
  module2.exports = hashGet;
} });
var require_hashHas = __commonJS({ "../../node_modules/lodash/_hashHas.js"(exports, module2) {
  var nativeCreate = require_nativeCreate(), objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
  }
  module2.exports = hashHas;
} });
var require_hashSet = __commonJS({ "../../node_modules/lodash/_hashSet.js"(exports, module2) {
  var nativeCreate = require_nativeCreate(), HASH_UNDEFINED = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    return this.size += this.has(key) ? 0 : 1, data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value, this;
  }
  module2.exports = hashSet;
} });
var require_Hash = __commonJS({ "../../node_modules/lodash/_Hash.js"(exports, module2) {
  var hashClear = require_hashClear(), hashDelete = require_hashDelete(), hashGet = require_hashGet(), hashHas = require_hashHas(), hashSet = require_hashSet();
  function Hash(entries6) {
    var index = -1, length = entries6 == null ? 0 : entries6.length;
    for (this.clear(); ++index < length; ) {
      var entry = entries6[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype.delete = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  module2.exports = Hash;
} });
var require_mapCacheClear = __commonJS({ "../../node_modules/lodash/_mapCacheClear.js"(exports, module2) {
  var Hash = require_Hash(), ListCache = require_ListCache(), Map2 = require_Map();
  function mapCacheClear() {
    this.size = 0, this.__data__ = { hash: new Hash(), map: new (Map2 || ListCache)(), string: new Hash() };
  }
  module2.exports = mapCacheClear;
} });
var require_isKeyable = __commonJS({ "../../node_modules/lodash/_isKeyable.js"(exports, module2) {
  function isKeyable(value) {
    var type3 = typeof value;
    return type3 == "string" || type3 == "number" || type3 == "symbol" || type3 == "boolean" ? value !== "__proto__" : value === null;
  }
  module2.exports = isKeyable;
} });
var require_getMapData = __commonJS({ "../../node_modules/lodash/_getMapData.js"(exports, module2) {
  var isKeyable = require_isKeyable();
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  module2.exports = getMapData;
} });
var require_mapCacheDelete = __commonJS({ "../../node_modules/lodash/_mapCacheDelete.js"(exports, module2) {
  var getMapData = require_getMapData();
  function mapCacheDelete(key) {
    var result = getMapData(this, key).delete(key);
    return this.size -= result ? 1 : 0, result;
  }
  module2.exports = mapCacheDelete;
} });
var require_mapCacheGet = __commonJS({ "../../node_modules/lodash/_mapCacheGet.js"(exports, module2) {
  var getMapData = require_getMapData();
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  module2.exports = mapCacheGet;
} });
var require_mapCacheHas = __commonJS({ "../../node_modules/lodash/_mapCacheHas.js"(exports, module2) {
  var getMapData = require_getMapData();
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  module2.exports = mapCacheHas;
} });
var require_mapCacheSet = __commonJS({ "../../node_modules/lodash/_mapCacheSet.js"(exports, module2) {
  var getMapData = require_getMapData();
  function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    return data.set(key, value), this.size += data.size == size ? 0 : 1, this;
  }
  module2.exports = mapCacheSet;
} });
var require_MapCache = __commonJS({ "../../node_modules/lodash/_MapCache.js"(exports, module2) {
  var mapCacheClear = require_mapCacheClear(), mapCacheDelete = require_mapCacheDelete(), mapCacheGet = require_mapCacheGet(), mapCacheHas = require_mapCacheHas(), mapCacheSet = require_mapCacheSet();
  function MapCache(entries6) {
    var index = -1, length = entries6 == null ? 0 : entries6.length;
    for (this.clear(); ++index < length; ) {
      var entry = entries6[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype.delete = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  module2.exports = MapCache;
} });
var require_stackSet = __commonJS({ "../../node_modules/lodash/_stackSet.js"(exports, module2) {
  var ListCache = require_ListCache(), Map2 = require_Map(), MapCache = require_MapCache(), LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) return pairs.push([key, value]), this.size = ++data.size, this;
      data = this.__data__ = new MapCache(pairs);
    }
    return data.set(key, value), this.size = data.size, this;
  }
  module2.exports = stackSet;
} });
var require_Stack = __commonJS({ "../../node_modules/lodash/_Stack.js"(exports, module2) {
  var ListCache = require_ListCache(), stackClear = require_stackClear(), stackDelete = require_stackDelete(), stackGet = require_stackGet(), stackHas = require_stackHas(), stackSet = require_stackSet();
  function Stack(entries6) {
    var data = this.__data__ = new ListCache(entries6);
    this.size = data.size;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype.delete = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module2.exports = Stack;
} });
var require_setCacheAdd = __commonJS({ "../../node_modules/lodash/_setCacheAdd.js"(exports, module2) {
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    return this.__data__.set(value, HASH_UNDEFINED), this;
  }
  module2.exports = setCacheAdd;
} });
var require_setCacheHas = __commonJS({ "../../node_modules/lodash/_setCacheHas.js"(exports, module2) {
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  module2.exports = setCacheHas;
} });
var require_SetCache = __commonJS({ "../../node_modules/lodash/_SetCache.js"(exports, module2) {
  var MapCache = require_MapCache(), setCacheAdd = require_setCacheAdd(), setCacheHas = require_setCacheHas();
  function SetCache(values6) {
    var index = -1, length = values6 == null ? 0 : values6.length;
    for (this.__data__ = new MapCache(); ++index < length; ) this.add(values6[index]);
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  module2.exports = SetCache;
} });
var require_arraySome = __commonJS({ "../../node_modules/lodash/_arraySome.js"(exports, module2) {
  function arraySome(array, predicate) {
    for (var index = -1, length = array == null ? 0 : array.length; ++index < length; ) if (predicate(array[index], index, array)) return true;
    return false;
  }
  module2.exports = arraySome;
} });
var require_cacheHas = __commonJS({ "../../node_modules/lodash/_cacheHas.js"(exports, module2) {
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  module2.exports = cacheHas;
} });
var require_equalArrays = __commonJS({ "../../node_modules/lodash/_equalArrays.js"(exports, module2) {
  var SetCache = require_SetCache(), arraySome = require_arraySome(), cacheHas = require_cacheHas(), COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    var arrStacked = stack.get(array), othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
    for (stack.set(array, other), stack.set(other, array); ++index < arrLength; ) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      if (compared !== void 0) {
        if (compared) continue;
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) return seen.push(othIndex);
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    return stack.delete(array), stack.delete(other), result;
  }
  module2.exports = equalArrays;
} });
var require_Uint8Array = __commonJS({ "../../node_modules/lodash/_Uint8Array.js"(exports, module2) {
  var root = require_root(), Uint8Array2 = root.Uint8Array;
  module2.exports = Uint8Array2;
} });
var require_mapToArray = __commonJS({ "../../node_modules/lodash/_mapToArray.js"(exports, module2) {
  function mapToArray(map) {
    var index = -1, result = Array(map.size);
    return map.forEach(function(value, key) {
      result[++index] = [key, value];
    }), result;
  }
  module2.exports = mapToArray;
} });
var require_setToArray = __commonJS({ "../../node_modules/lodash/_setToArray.js"(exports, module2) {
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    return set.forEach(function(value) {
      result[++index] = value;
    }), result;
  }
  module2.exports = setToArray;
} });
var require_equalByTag = __commonJS({ "../../node_modules/lodash/_equalByTag.js"(exports, module2) {
  var Symbol2 = require_Symbol(), Uint8Array2 = require_Uint8Array(), eq2 = require_eq(), equalArrays = require_equalArrays(), mapToArray = require_mapToArray(), setToArray = require_setToArray(), COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2, boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
        object = object.buffer, other = other.buffer;
      case arrayBufferTag:
        return !(object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other)));
      case boolTag:
      case dateTag:
      case numberTag:
        return eq2(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        if (convert || (convert = setToArray), object.size != other.size && !isPartial) return false;
        var stacked = stack.get(object);
        if (stacked) return stacked == other;
        bitmask |= COMPARE_UNORDERED_FLAG, stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        return stack.delete(object), result;
      case symbolTag:
        if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
  }
  module2.exports = equalByTag;
} });
var require_arrayPush = __commonJS({ "../../node_modules/lodash/_arrayPush.js"(exports, module2) {
  function arrayPush(array, values6) {
    for (var index = -1, length = values6.length, offset = array.length; ++index < length; ) array[offset + index] = values6[index];
    return array;
  }
  module2.exports = arrayPush;
} });
var require_isArray = __commonJS({ "../../node_modules/lodash/isArray.js"(exports, module2) {
  var isArray = Array.isArray;
  module2.exports = isArray;
} });
var require_baseGetAllKeys = __commonJS({ "../../node_modules/lodash/_baseGetAllKeys.js"(exports, module2) {
  var arrayPush = require_arrayPush(), isArray = require_isArray();
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  module2.exports = baseGetAllKeys;
} });
var require_arrayFilter = __commonJS({ "../../node_modules/lodash/_arrayFilter.js"(exports, module2) {
  function arrayFilter(array, predicate) {
    for (var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = []; ++index < length; ) {
      var value = array[index];
      predicate(value, index, array) && (result[resIndex++] = value);
    }
    return result;
  }
  module2.exports = arrayFilter;
} });
var require_stubArray = __commonJS({ "../../node_modules/lodash/stubArray.js"(exports, module2) {
  function stubArray() {
    return [];
  }
  module2.exports = stubArray;
} });
var require_getSymbols = __commonJS({ "../../node_modules/lodash/_getSymbols.js"(exports, module2) {
  var arrayFilter = require_arrayFilter(), stubArray = require_stubArray(), objectProto = Object.prototype, propertyIsEnumerable = objectProto.propertyIsEnumerable, nativeGetSymbols = Object.getOwnPropertySymbols, getSymbols = nativeGetSymbols ? function(object) {
    return object == null ? [] : (object = Object(object), arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    }));
  } : stubArray;
  module2.exports = getSymbols;
} });
var require_baseTimes = __commonJS({ "../../node_modules/lodash/_baseTimes.js"(exports, module2) {
  function baseTimes(n2, iteratee) {
    for (var index = -1, result = Array(n2); ++index < n2; ) result[index] = iteratee(index);
    return result;
  }
  module2.exports = baseTimes;
} });
var require_isObjectLike = __commonJS({ "../../node_modules/lodash/isObjectLike.js"(exports, module2) {
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  module2.exports = isObjectLike;
} });
var require_baseIsArguments = __commonJS({ "../../node_modules/lodash/_baseIsArguments.js"(exports, module2) {
  var baseGetTag = require_baseGetTag(), isObjectLike = require_isObjectLike(), argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  module2.exports = baseIsArguments;
} });
var require_isArguments2 = __commonJS({ "../../node_modules/lodash/isArguments.js"(exports, module2) {
  var baseIsArguments = require_baseIsArguments(), isObjectLike = require_isObjectLike(), objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty, propertyIsEnumerable = objectProto.propertyIsEnumerable, isArguments = baseIsArguments(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  module2.exports = isArguments;
} });
var require_stubFalse = __commonJS({ "../../node_modules/lodash/stubFalse.js"(exports, module2) {
  function stubFalse() {
    return false;
  }
  module2.exports = stubFalse;
} });
var require_isBuffer = __commonJS({ "../../node_modules/lodash/isBuffer.js"(exports, module2) {
  var root = require_root(), stubFalse = require_stubFalse(), freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root.Buffer : void 0, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, isBuffer = nativeIsBuffer || stubFalse;
  module2.exports = isBuffer;
} });
var require_isIndex = __commonJS({ "../../node_modules/lodash/_isIndex.js"(exports, module2) {
  var MAX_SAFE_INTEGER = 9007199254740991, reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length) {
    var type3 = typeof value;
    return length = length ?? MAX_SAFE_INTEGER, !!length && (type3 == "number" || type3 != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }
  module2.exports = isIndex;
} });
var require_isLength = __commonJS({ "../../node_modules/lodash/isLength.js"(exports, module2) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  module2.exports = isLength;
} });
var require_baseIsTypedArray = __commonJS({ "../../node_modules/lodash/_baseIsTypedArray.js"(exports, module2) {
  var baseGetTag = require_baseGetTag(), isLength = require_isLength(), isObjectLike = require_isObjectLike(), argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  module2.exports = baseIsTypedArray;
} });
var require_baseUnary = __commonJS({ "../../node_modules/lodash/_baseUnary.js"(exports, module2) {
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  module2.exports = baseUnary;
} });
var require_nodeUtil = __commonJS({ "../../node_modules/lodash/_nodeUtil.js"(exports, module2) {
  var freeGlobal = require_freeGlobal(), freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2, moduleExports = freeModule && freeModule.exports === freeExports, freeProcess = moduleExports && freeGlobal.process, nodeUtil = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      return types || freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch {
    }
  }();
  module2.exports = nodeUtil;
} });
var require_isTypedArray = __commonJS({ "../../node_modules/lodash/isTypedArray.js"(exports, module2) {
  var baseIsTypedArray = require_baseIsTypedArray(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil(), nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray, isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module2.exports = isTypedArray;
} });
var require_arrayLikeKeys = __commonJS({ "../../node_modules/lodash/_arrayLikeKeys.js"(exports, module2) {
  var baseTimes = require_baseTimes(), isArguments = require_isArguments2(), isArray = require_isArray(), isBuffer = require_isBuffer(), isIndex = require_isIndex(), isTypedArray = require_isTypedArray(), objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) (inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length))) && result.push(key);
    return result;
  }
  module2.exports = arrayLikeKeys;
} });
var require_isPrototype = __commonJS({ "../../node_modules/lodash/_isPrototype.js"(exports, module2) {
  var objectProto = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  module2.exports = isPrototype;
} });
var require_overArg = __commonJS({ "../../node_modules/lodash/_overArg.js"(exports, module2) {
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  module2.exports = overArg;
} });
var require_nativeKeys = __commonJS({ "../../node_modules/lodash/_nativeKeys.js"(exports, module2) {
  var overArg = require_overArg(), nativeKeys = overArg(Object.keys, Object);
  module2.exports = nativeKeys;
} });
var require_baseKeys = __commonJS({ "../../node_modules/lodash/_baseKeys.js"(exports, module2) {
  var isPrototype = require_isPrototype(), nativeKeys = require_nativeKeys(), objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for (var key in Object(object)) hasOwnProperty.call(object, key) && key != "constructor" && result.push(key);
    return result;
  }
  module2.exports = baseKeys;
} });
var require_isArrayLike = __commonJS({ "../../node_modules/lodash/isArrayLike.js"(exports, module2) {
  var isFunction = require_isFunction(), isLength = require_isLength();
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  module2.exports = isArrayLike;
} });
var require_keys = __commonJS({ "../../node_modules/lodash/keys.js"(exports, module2) {
  var arrayLikeKeys = require_arrayLikeKeys(), baseKeys = require_baseKeys(), isArrayLike = require_isArrayLike();
  function keys22(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  module2.exports = keys22;
} });
var require_getAllKeys = __commonJS({ "../../node_modules/lodash/_getAllKeys.js"(exports, module2) {
  var baseGetAllKeys = require_baseGetAllKeys(), getSymbols = require_getSymbols(), keys22 = require_keys();
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys22, getSymbols);
  }
  module2.exports = getAllKeys;
} });
var require_equalObjects = __commonJS({ "../../node_modules/lodash/_equalObjects.js"(exports, module2) {
  var getAllKeys = require_getAllKeys(), COMPARE_PARTIAL_FLAG = 1, objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    for (var index = objLength; index--; ) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    var objStacked = stack.get(object), othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other), stack.set(other, object);
    for (var skipCtor = isPartial; ++index < objLength; ) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor) && (result = false);
    }
    return stack.delete(object), stack.delete(other), result;
  }
  module2.exports = equalObjects;
} });
var require_DataView = __commonJS({ "../../node_modules/lodash/_DataView.js"(exports, module2) {
  var getNative = require_getNative(), root = require_root(), DataView2 = getNative(root, "DataView");
  module2.exports = DataView2;
} });
var require_Promise = __commonJS({ "../../node_modules/lodash/_Promise.js"(exports, module2) {
  var getNative = require_getNative(), root = require_root(), Promise2 = getNative(root, "Promise");
  module2.exports = Promise2;
} });
var require_Set = __commonJS({ "../../node_modules/lodash/_Set.js"(exports, module2) {
  var getNative = require_getNative(), root = require_root(), Set2 = getNative(root, "Set");
  module2.exports = Set2;
} });
var require_WeakMap = __commonJS({ "../../node_modules/lodash/_WeakMap.js"(exports, module2) {
  var getNative = require_getNative(), root = require_root(), WeakMap2 = getNative(root, "WeakMap");
  module2.exports = WeakMap2;
} });
var require_getTag = __commonJS({ "../../node_modules/lodash/_getTag.js"(exports, module2) {
  var DataView2 = require_DataView(), Map2 = require_Map(), Promise2 = require_Promise(), Set2 = require_Set(), WeakMap2 = require_WeakMap(), baseGetTag = require_baseGetTag(), toSource = require_toSource(), mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]", dataViewTag = "[object DataView]", dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2), getTag2 = baseGetTag;
  (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag2(new Map2()) != mapTag || Promise2 && getTag2(Promise2.resolve()) != promiseTag || Set2 && getTag2(new Set2()) != setTag || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag) && (getTag2 = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) switch (ctorString) {
      case dataViewCtorString:
        return dataViewTag;
      case mapCtorString:
        return mapTag;
      case promiseCtorString:
        return promiseTag;
      case setCtorString:
        return setTag;
      case weakMapCtorString:
        return weakMapTag;
    }
    return result;
  });
  module2.exports = getTag2;
} });
var require_baseIsEqualDeep = __commonJS({ "../../node_modules/lodash/_baseIsEqualDeep.js"(exports, module2) {
  var Stack = require_Stack(), equalArrays = require_equalArrays(), equalByTag = require_equalByTag(), equalObjects = require_equalObjects(), getTag2 = require_getTag(), isArray = require_isArray(), isBuffer = require_isBuffer(), isTypedArray = require_isTypedArray(), COMPARE_PARTIAL_FLAG = 1, argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]", objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag2(object), othTag = othIsArr ? arrayTag : getTag2(other);
    objTag = objTag == argsTag ? objectTag : objTag, othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) return false;
      objIsArr = true, objIsObj = false;
    }
    if (isSameTag && !objIsObj) return stack || (stack = new Stack()), objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        return stack || (stack = new Stack()), equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    return isSameTag ? (stack || (stack = new Stack()), equalObjects(object, other, bitmask, customizer, equalFunc, stack)) : false;
  }
  module2.exports = baseIsEqualDeep;
} });
var require_baseIsEqual = __commonJS({ "../../node_modules/lodash/_baseIsEqual.js"(exports, module2) {
  var baseIsEqualDeep = require_baseIsEqualDeep(), isObjectLike = require_isObjectLike();
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    return value === other ? true : value == null || other == null || !isObjectLike(value) && !isObjectLike(other) ? value !== value && other !== other : baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  module2.exports = baseIsEqual;
} });
var require_isEqualWith = __commonJS({ "../../node_modules/lodash/isEqualWith.js"(exports, module2) {
  var baseIsEqual = require_baseIsEqual();
  function isEqualWith2(value, other, customizer) {
    customizer = typeof customizer == "function" ? customizer : void 0;
    var result = customizer ? customizer(value, other) : void 0;
    return result === void 0 ? baseIsEqual(value, other, void 0, customizer) : !!result;
  }
  module2.exports = isEqualWith2;
} });
var require_css_escape = __commonJS({ "../../node_modules/css.escape/css.escape.js"(exports, module2) {
  (function(root, factory) {
    typeof exports == "object" ? module2.exports = factory(root) : typeof define == "function" && define.amd ? define([], factory.bind(root, root)) : factory(root);
  })(typeof global < "u" ? global : exports, function(root) {
    if (root.CSS && root.CSS.escape) return root.CSS.escape;
    var cssEscape = function(value) {
      if (arguments.length == 0) throw new TypeError("`CSS.escape` requires an argument.");
      for (var string2 = String(value), length = string2.length, index = -1, codeUnit, result = "", firstCodeUnit = string2.charCodeAt(0); ++index < length; ) {
        if (codeUnit = string2.charCodeAt(index), codeUnit == 0) {
          result += "�";
          continue;
        }
        if (codeUnit >= 1 && codeUnit <= 31 || codeUnit == 127 || index == 0 && codeUnit >= 48 && codeUnit <= 57 || index == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45) {
          result += "\\" + codeUnit.toString(16) + " ";
          continue;
        }
        if (index == 0 && length == 1 && codeUnit == 45) {
          result += "\\" + string2.charAt(index);
          continue;
        }
        if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
          result += string2.charAt(index);
          continue;
        }
        result += "\\" + string2.charAt(index);
      }
      return result;
    };
    return root.CSS || (root.CSS = {}), root.CSS.escape = cssEscape, cssEscape;
  });
} });
var require_ansi_styles3 = __commonJS({ "node_modules/ansi-styles/index.js"(exports, module2) {
  var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`, wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
  function assembleStyles() {
    let codes = /* @__PURE__ */ new Map(), styles = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], overline: [53, 55], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
    styles.color.gray = styles.color.blackBright, styles.bgColor.bgGray = styles.bgColor.bgBlackBright, styles.color.grey = styles.color.blackBright, styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (let [groupName, group] of Object.entries(styles)) {
      for (let [styleName, style] of Object.entries(group)) styles[styleName] = { open: `\x1B[${style[0]}m`, close: `\x1B[${style[1]}m` }, group[styleName] = styles[styleName], codes.set(style[0], style[1]);
      Object.defineProperty(styles, groupName, { value: group, enumerable: false });
    }
    return Object.defineProperty(styles, "codes", { value: codes, enumerable: false }), styles.color.close = "\x1B[39m", styles.bgColor.close = "\x1B[49m", styles.color.ansi256 = wrapAnsi256(), styles.color.ansi16m = wrapAnsi16m(), styles.bgColor.ansi256 = wrapAnsi256(10), styles.bgColor.ansi16m = wrapAnsi16m(10), Object.defineProperties(styles, { rgbToAnsi256: { value: (red, green, blue) => red === green && green === blue ? red < 8 ? 16 : red > 248 ? 231 : Math.round((red - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5), enumerable: false }, hexToRgb: { value: (hex) => {
      let matches3 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
      if (!matches3) return [0, 0, 0];
      let { colorString } = matches3.groups;
      colorString.length === 3 && (colorString = colorString.split("").map((character) => character + character).join(""));
      let integer = Number.parseInt(colorString, 16);
      return [integer >> 16 & 255, integer >> 8 & 255, integer & 255];
    }, enumerable: false }, hexToAnsi256: { value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)), enumerable: false } }), styles;
  }
  Object.defineProperty(module2, "exports", { enumerable: true, get: assembleStyles });
} });
var require_collections2 = __commonJS({ "node_modules/pretty-format/build/collections.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.printIteratorEntries = printIteratorEntries2;
  exports.printIteratorValues = printIteratorValues2;
  exports.printListItems = printListItems2;
  exports.printObjectProperties = printObjectProperties2;
  var getKeysOfEnumerableProperties2 = (object, compareKeys) => {
    let keys22 = Object.keys(object).sort(compareKeys);
    return Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(object).forEach((symbol) => {
      Object.getOwnPropertyDescriptor(object, symbol).enumerable && keys22.push(symbol);
    }), keys22;
  };
  function printIteratorEntries2(iterator, config3, indentation, depth, refs, printer2, separator = ": ") {
    let result = "", current = iterator.next();
    if (!current.done) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (; !current.done; ) {
        let name = printer2(current.value[0], config3, indentationNext, depth, refs), value = printer2(current.value[1], config3, indentationNext, depth, refs);
        result += indentationNext + name + separator + value, current = iterator.next(), current.done ? config3.min || (result += ",") : result += "," + config3.spacingInner;
      }
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
  function printIteratorValues2(iterator, config3, indentation, depth, refs, printer2) {
    let result = "", current = iterator.next();
    if (!current.done) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (; !current.done; ) result += indentationNext + printer2(current.value, config3, indentationNext, depth, refs), current = iterator.next(), current.done ? config3.min || (result += ",") : result += "," + config3.spacingInner;
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
  function printListItems2(list, config3, indentation, depth, refs, printer2) {
    let result = "";
    if (list.length) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (let i2 = 0; i2 < list.length; i2++) result += indentationNext, i2 in list && (result += printer2(list[i2], config3, indentationNext, depth, refs)), i2 < list.length - 1 ? result += "," + config3.spacingInner : config3.min || (result += ",");
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
  function printObjectProperties2(val, config3, indentation, depth, refs, printer2) {
    let result = "", keys22 = getKeysOfEnumerableProperties2(val, config3.compareKeys);
    if (keys22.length) {
      result += config3.spacingOuter;
      let indentationNext = indentation + config3.indent;
      for (let i2 = 0; i2 < keys22.length; i2++) {
        let key = keys22[i2], name = printer2(key, config3, indentationNext, depth, refs), value = printer2(val[key], config3, indentationNext, depth, refs);
        result += indentationNext + name + ": " + value, i2 < keys22.length - 1 ? result += "," + config3.spacingInner : config3.min || (result += ",");
      }
      result += config3.spacingOuter + indentation;
    }
    return result;
  }
} });
var require_AsymmetricMatcher2 = __commonJS({ "node_modules/pretty-format/build/plugins/AsymmetricMatcher.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _collections2 = require_collections2(), global2 = function() {
    return typeof globalThis < "u" ? globalThis : typeof global2 < "u" ? global2 : typeof self < "u" ? self : typeof window < "u" ? window : Function("return this")();
  }(), Symbol2 = global2["jest-symbol-do-not-touch"] || global2.Symbol, asymmetricMatcher2 = typeof Symbol2 == "function" && Symbol2.for ? Symbol2.for("jest.asymmetricMatcher") : 1267621, SPACE2 = " ", serialize2 = (val, config3, indentation, depth, refs, printer2) => {
    let stringedValue = val.toString();
    return stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining" ? ++depth > config3.maxDepth ? "[" + stringedValue + "]" : stringedValue + SPACE2 + "[" + (0, _collections2.printListItems)(val.sample, config3, indentation, depth, refs, printer2) + "]" : stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining" ? ++depth > config3.maxDepth ? "[" + stringedValue + "]" : stringedValue + SPACE2 + "{" + (0, _collections2.printObjectProperties)(val.sample, config3, indentation, depth, refs, printer2) + "}" : stringedValue === "StringMatching" || stringedValue === "StringNotMatching" || stringedValue === "StringContaining" || stringedValue === "StringNotContaining" ? stringedValue + SPACE2 + printer2(val.sample, config3, indentation, depth, refs) : val.toAsymmetricMatcher();
  };
  exports.serialize = serialize2;
  var test2 = (val) => val && val.$$typeof === asymmetricMatcher2;
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_ansi_regex = __commonJS({ "../../node_modules/ansi-regex/index.js"(exports, module2) {
  module2.exports = ({ onlyFirst = false } = {}) => {
    let pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
    return new RegExp(pattern, onlyFirst ? void 0 : "g");
  };
} });
var require_ConvertAnsi = __commonJS({ "node_modules/pretty-format/build/plugins/ConvertAnsi.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _ansiRegex2 = _interopRequireDefault2(require_ansi_regex()), _ansiStyles2 = _interopRequireDefault2(require_ansi_styles3());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var toHumanReadableAnsi2 = (text) => text.replace((0, _ansiRegex2.default)(), (match) => {
    switch (match) {
      case _ansiStyles2.default.red.close:
      case _ansiStyles2.default.green.close:
      case _ansiStyles2.default.cyan.close:
      case _ansiStyles2.default.gray.close:
      case _ansiStyles2.default.white.close:
      case _ansiStyles2.default.yellow.close:
      case _ansiStyles2.default.bgRed.close:
      case _ansiStyles2.default.bgGreen.close:
      case _ansiStyles2.default.bgYellow.close:
      case _ansiStyles2.default.inverse.close:
      case _ansiStyles2.default.dim.close:
      case _ansiStyles2.default.bold.close:
      case _ansiStyles2.default.reset.open:
      case _ansiStyles2.default.reset.close:
        return "</>";
      case _ansiStyles2.default.red.open:
        return "<red>";
      case _ansiStyles2.default.green.open:
        return "<green>";
      case _ansiStyles2.default.cyan.open:
        return "<cyan>";
      case _ansiStyles2.default.gray.open:
        return "<gray>";
      case _ansiStyles2.default.white.open:
        return "<white>";
      case _ansiStyles2.default.yellow.open:
        return "<yellow>";
      case _ansiStyles2.default.bgRed.open:
        return "<bgRed>";
      case _ansiStyles2.default.bgGreen.open:
        return "<bgGreen>";
      case _ansiStyles2.default.bgYellow.open:
        return "<bgYellow>";
      case _ansiStyles2.default.inverse.open:
        return "<inverse>";
      case _ansiStyles2.default.dim.open:
        return "<dim>";
      case _ansiStyles2.default.bold.open:
        return "<bold>";
      default:
        return "";
    }
  }), test2 = (val) => typeof val == "string" && !!val.match((0, _ansiRegex2.default)());
  exports.test = test2;
  var serialize2 = (val, config3, indentation, depth, refs, printer2) => printer2(toHumanReadableAnsi2(val), config3, indentation, depth, refs);
  exports.serialize = serialize2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_DOMCollection2 = __commonJS({ "node_modules/pretty-format/build/plugins/DOMCollection.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _collections2 = require_collections2(), SPACE2 = " ", OBJECT_NAMES2 = ["DOMStringMap", "NamedNodeMap"], ARRAY_REGEXP2 = /^(HTML\w*Collection|NodeList)$/, testName2 = (name) => OBJECT_NAMES2.indexOf(name) !== -1 || ARRAY_REGEXP2.test(name), test2 = (val) => val && val.constructor && !!val.constructor.name && testName2(val.constructor.name);
  exports.test = test2;
  var isNamedNodeMap2 = (collection) => collection.constructor.name === "NamedNodeMap", serialize2 = (collection, config3, indentation, depth, refs, printer2) => {
    let name = collection.constructor.name;
    return ++depth > config3.maxDepth ? "[" + name + "]" : (config3.min ? "" : name + SPACE2) + (OBJECT_NAMES2.indexOf(name) !== -1 ? "{" + (0, _collections2.printObjectProperties)(isNamedNodeMap2(collection) ? Array.from(collection).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}) : { ...collection }, config3, indentation, depth, refs, printer2) + "}" : "[" + (0, _collections2.printListItems)(Array.from(collection), config3, indentation, depth, refs, printer2) + "]");
  };
  exports.serialize = serialize2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_escapeHTML2 = __commonJS({ "node_modules/pretty-format/build/plugins/lib/escapeHTML.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = escapeHTML2;
  function escapeHTML2(str) {
    return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
} });
var require_markup2 = __commonJS({ "node_modules/pretty-format/build/plugins/lib/markup.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.printText = exports.printProps = exports.printElementAsLeaf = exports.printElement = exports.printComment = exports.printChildren = void 0;
  var _escapeHTML2 = _interopRequireDefault2(require_escapeHTML2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var printProps2 = (keys22, props, config3, indentation, depth, refs, printer2) => {
    let indentationNext = indentation + config3.indent, colors = config3.colors;
    return keys22.map((key) => {
      let value = props[key], printed = printer2(value, config3, indentationNext, depth, refs);
      return typeof value != "string" && (printed.indexOf(`
`) !== -1 && (printed = config3.spacingOuter + indentationNext + printed + config3.spacingOuter + indentation), printed = "{" + printed + "}"), config3.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
    }).join("");
  };
  exports.printProps = printProps2;
  var printChildren2 = (children, config3, indentation, depth, refs, printer2) => children.map((child) => config3.spacingOuter + indentation + (typeof child == "string" ? printText2(child, config3) : printer2(child, config3, indentation, depth, refs))).join("");
  exports.printChildren = printChildren2;
  var printText2 = (text, config3) => {
    let contentColor = config3.colors.content;
    return contentColor.open + (0, _escapeHTML2.default)(text) + contentColor.close;
  };
  exports.printText = printText2;
  var printComment2 = (comment, config3) => {
    let commentColor = config3.colors.comment;
    return commentColor.open + "<!--" + (0, _escapeHTML2.default)(comment) + "-->" + commentColor.close;
  };
  exports.printComment = printComment2;
  var printElement2 = (type3, printedProps, printedChildren, config3, indentation) => {
    let tagColor = config3.colors.tag;
    return tagColor.open + "<" + type3 + (printedProps && tagColor.close + printedProps + config3.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config3.spacingOuter + indentation + tagColor.open + "</" + type3 : (printedProps && !config3.min ? "" : " ") + "/") + ">" + tagColor.close;
  };
  exports.printElement = printElement2;
  var printElementAsLeaf2 = (type3, config3) => {
    let tagColor = config3.colors.tag;
    return tagColor.open + "<" + type3 + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
  };
  exports.printElementAsLeaf = printElementAsLeaf2;
} });
var require_DOMElement2 = __commonJS({ "node_modules/pretty-format/build/plugins/DOMElement.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _markup2 = require_markup2(), ELEMENT_NODE2 = 1, TEXT_NODE2 = 3, COMMENT_NODE2 = 8, FRAGMENT_NODE2 = 11, ELEMENT_REGEXP2 = /^((HTML|SVG)\w*)?Element$/, testHasAttribute2 = (val) => {
    try {
      return typeof val.hasAttribute == "function" && val.hasAttribute("is");
    } catch {
      return false;
    }
  }, testNode2 = (val) => {
    let constructorName = val.constructor.name, { nodeType, tagName } = val, isCustomElement2 = typeof tagName == "string" && tagName.includes("-") || testHasAttribute2(val);
    return nodeType === ELEMENT_NODE2 && (ELEMENT_REGEXP2.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE2 && constructorName === "Text" || nodeType === COMMENT_NODE2 && constructorName === "Comment" || nodeType === FRAGMENT_NODE2 && constructorName === "DocumentFragment";
  }, test2 = (val) => {
    var _val$constructor;
    return (val == null || (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode2(val);
  };
  exports.test = test2;
  function nodeIsText2(node) {
    return node.nodeType === TEXT_NODE2;
  }
  function nodeIsComment2(node) {
    return node.nodeType === COMMENT_NODE2;
  }
  function nodeIsFragment2(node) {
    return node.nodeType === FRAGMENT_NODE2;
  }
  var serialize2 = (node, config3, indentation, depth, refs, printer2) => {
    if (nodeIsText2(node)) return (0, _markup2.printText)(node.data, config3);
    if (nodeIsComment2(node)) return (0, _markup2.printComment)(node.data, config3);
    let type3 = nodeIsFragment2(node) ? "DocumentFragment" : node.tagName.toLowerCase();
    return ++depth > config3.maxDepth ? (0, _markup2.printElementAsLeaf)(type3, config3) : (0, _markup2.printElement)(type3, (0, _markup2.printProps)(nodeIsFragment2(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment2(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}), config3, indentation + config3.indent, depth, refs, printer2), (0, _markup2.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config3, indentation + config3.indent, depth, refs, printer2), config3, indentation);
  };
  exports.serialize = serialize2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_Immutable2 = __commonJS({ "node_modules/pretty-format/build/plugins/Immutable.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _collections2 = require_collections2(), IS_ITERABLE_SENTINEL2 = "@@__IMMUTABLE_ITERABLE__@@", IS_LIST_SENTINEL2 = "@@__IMMUTABLE_LIST__@@", IS_KEYED_SENTINEL2 = "@@__IMMUTABLE_KEYED__@@", IS_MAP_SENTINEL2 = "@@__IMMUTABLE_MAP__@@", IS_ORDERED_SENTINEL2 = "@@__IMMUTABLE_ORDERED__@@", IS_RECORD_SENTINEL2 = "@@__IMMUTABLE_RECORD__@@", IS_SEQ_SENTINEL2 = "@@__IMMUTABLE_SEQ__@@", IS_SET_SENTINEL2 = "@@__IMMUTABLE_SET__@@", IS_STACK_SENTINEL2 = "@@__IMMUTABLE_STACK__@@", getImmutableName2 = (name) => "Immutable." + name, printAsLeaf2 = (name) => "[" + name + "]", SPACE2 = " ", LAZY2 = "…", printImmutableEntries2 = (val, config3, indentation, depth, refs, printer2, type3) => ++depth > config3.maxDepth ? printAsLeaf2(getImmutableName2(type3)) : getImmutableName2(type3) + SPACE2 + "{" + (0, _collections2.printIteratorEntries)(val.entries(), config3, indentation, depth, refs, printer2) + "}";
  function getRecordEntries2(val) {
    let i2 = 0;
    return { next() {
      if (i2 < val._keys.length) {
        let key = val._keys[i2++];
        return { done: false, value: [key, val.get(key)] };
      }
      return { done: true, value: void 0 };
    } };
  }
  var printImmutableRecord2 = (val, config3, indentation, depth, refs, printer2) => {
    let name = getImmutableName2(val._name || "Record");
    return ++depth > config3.maxDepth ? printAsLeaf2(name) : name + SPACE2 + "{" + (0, _collections2.printIteratorEntries)(getRecordEntries2(val), config3, indentation, depth, refs, printer2) + "}";
  }, printImmutableSeq2 = (val, config3, indentation, depth, refs, printer2) => {
    let name = getImmutableName2("Seq");
    return ++depth > config3.maxDepth ? printAsLeaf2(name) : val[IS_KEYED_SENTINEL2] ? name + SPACE2 + "{" + (val._iter || val._object ? (0, _collections2.printIteratorEntries)(val.entries(), config3, indentation, depth, refs, printer2) : LAZY2) + "}" : name + SPACE2 + "[" + (val._iter || val._array || val._collection || val._iterable ? (0, _collections2.printIteratorValues)(val.values(), config3, indentation, depth, refs, printer2) : LAZY2) + "]";
  }, printImmutableValues2 = (val, config3, indentation, depth, refs, printer2, type3) => ++depth > config3.maxDepth ? printAsLeaf2(getImmutableName2(type3)) : getImmutableName2(type3) + SPACE2 + "[" + (0, _collections2.printIteratorValues)(val.values(), config3, indentation, depth, refs, printer2) + "]", serialize2 = (val, config3, indentation, depth, refs, printer2) => val[IS_MAP_SENTINEL2] ? printImmutableEntries2(val, config3, indentation, depth, refs, printer2, val[IS_ORDERED_SENTINEL2] ? "OrderedMap" : "Map") : val[IS_LIST_SENTINEL2] ? printImmutableValues2(val, config3, indentation, depth, refs, printer2, "List") : val[IS_SET_SENTINEL2] ? printImmutableValues2(val, config3, indentation, depth, refs, printer2, val[IS_ORDERED_SENTINEL2] ? "OrderedSet" : "Set") : val[IS_STACK_SENTINEL2] ? printImmutableValues2(val, config3, indentation, depth, refs, printer2, "Stack") : val[IS_SEQ_SENTINEL2] ? printImmutableSeq2(val, config3, indentation, depth, refs, printer2) : printImmutableRecord2(val, config3, indentation, depth, refs, printer2);
  exports.serialize = serialize2;
  var test2 = (val) => val && (val[IS_ITERABLE_SENTINEL2] === true || val[IS_RECORD_SENTINEL2] === true);
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_react_is_development2 = __commonJS({ "node_modules/react-is/cjs/react-is.development.js"(exports) {
  (function() {
    var REACT_ELEMENT_TYPE = 60103, REACT_PORTAL_TYPE = 60106, REACT_FRAGMENT_TYPE = 60107, REACT_STRICT_MODE_TYPE = 60108, REACT_PROFILER_TYPE = 60114, REACT_PROVIDER_TYPE = 60109, REACT_CONTEXT_TYPE = 60110, REACT_FORWARD_REF_TYPE = 60112, REACT_SUSPENSE_TYPE = 60113, REACT_SUSPENSE_LIST_TYPE = 60120, REACT_MEMO_TYPE = 60115, REACT_LAZY_TYPE = 60116, REACT_BLOCK_TYPE = 60121, REACT_SERVER_BLOCK_TYPE = 60122, REACT_FUNDAMENTAL_TYPE = 60117, REACT_DEBUG_TRACING_MODE_TYPE = 60129, REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol == "function" && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor("react.element"), REACT_PORTAL_TYPE = symbolFor("react.portal"), REACT_FRAGMENT_TYPE = symbolFor("react.fragment"), REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode"), REACT_PROFILER_TYPE = symbolFor("react.profiler"), REACT_PROVIDER_TYPE = symbolFor("react.provider"), REACT_CONTEXT_TYPE = symbolFor("react.context"), REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref"), REACT_SUSPENSE_TYPE = symbolFor("react.suspense"), REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list"), REACT_MEMO_TYPE = symbolFor("react.memo"), REACT_LAZY_TYPE = symbolFor("react.lazy"), REACT_BLOCK_TYPE = symbolFor("react.block"), REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block"), REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental"), symbolFor("react.scope"), symbolFor("react.opaque.id"), REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode"), symbolFor("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
    }
    var enableScopeAPI = false;
    function isValidElementType(type3) {
      return !!(typeof type3 == "string" || typeof type3 == "function" || type3 === REACT_FRAGMENT_TYPE || type3 === REACT_PROFILER_TYPE || type3 === REACT_DEBUG_TRACING_MODE_TYPE || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || type3 === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI || typeof type3 == "object" && type3 !== null && (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_FUNDAMENTAL_TYPE || type3.$$typeof === REACT_BLOCK_TYPE || type3[0] === REACT_SERVER_BLOCK_TYPE));
    }
    function typeOf(object) {
      if (typeof object == "object" && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type3 = object.type;
            switch (type3) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type3;
              default:
                var $$typeofType = type3 && type3.$$typeof;
                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
    }
    var ContextConsumer = REACT_CONTEXT_TYPE, ContextProvider = REACT_PROVIDER_TYPE, Element2 = REACT_ELEMENT_TYPE, ForwardRef = REACT_FORWARD_REF_TYPE, Fragment = REACT_FRAGMENT_TYPE, Lazy = REACT_LAZY_TYPE, Memo = REACT_MEMO_TYPE, Portal = REACT_PORTAL_TYPE, Profiler = REACT_PROFILER_TYPE, StrictMode = REACT_STRICT_MODE_TYPE, Suspense = REACT_SUSPENSE_TYPE, hasWarnedAboutDeprecatedIsAsyncMode = false, hasWarnedAboutDeprecatedIsConcurrentMode = false;
    function isAsyncMode(object) {
      return hasWarnedAboutDeprecatedIsAsyncMode || (hasWarnedAboutDeprecatedIsAsyncMode = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), false;
    }
    function isConcurrentMode(object) {
      return hasWarnedAboutDeprecatedIsConcurrentMode || (hasWarnedAboutDeprecatedIsConcurrentMode = true, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement5(object) {
      return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.ContextConsumer = ContextConsumer, exports.ContextProvider = ContextProvider, exports.Element = Element2, exports.ForwardRef = ForwardRef, exports.Fragment = Fragment, exports.Lazy = Lazy, exports.Memo = Memo, exports.Portal = Portal, exports.Profiler = Profiler, exports.StrictMode = StrictMode, exports.Suspense = Suspense, exports.isAsyncMode = isAsyncMode, exports.isConcurrentMode = isConcurrentMode, exports.isContextConsumer = isContextConsumer, exports.isContextProvider = isContextProvider, exports.isElement = isElement5, exports.isForwardRef = isForwardRef, exports.isFragment = isFragment, exports.isLazy = isLazy, exports.isMemo = isMemo, exports.isPortal = isPortal, exports.isProfiler = isProfiler, exports.isStrictMode = isStrictMode, exports.isSuspense = isSuspense, exports.isValidElementType = isValidElementType, exports.typeOf = typeOf;
  })();
} });
var require_react_is2 = __commonJS({ "node_modules/react-is/index.js"(exports, module2) {
  module2.exports = require_react_is_development2();
} });
var require_ReactElement2 = __commonJS({ "node_modules/pretty-format/build/plugins/ReactElement.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var ReactIs2 = _interopRequireWildcard2(require_react_is2()), _markup2 = require_markup2();
  function _getRequireWildcardCache2(nodeInterop) {
    if (typeof WeakMap != "function") return null;
    var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard2(obj, nodeInterop) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj != "object" && typeof obj != "function") return { default: obj };
    var cache = _getRequireWildcardCache2(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];
    }
    return newObj.default = obj, cache && cache.set(obj, newObj), newObj;
  }
  var getChildren2 = (arg, children = []) => (Array.isArray(arg) ? arg.forEach((item) => {
    getChildren2(item, children);
  }) : arg != null && arg !== false && children.push(arg), children), getType3 = (element) => {
    let type3 = element.type;
    if (typeof type3 == "string") return type3;
    if (typeof type3 == "function") return type3.displayName || type3.name || "Unknown";
    if (ReactIs2.isFragment(element)) return "React.Fragment";
    if (ReactIs2.isSuspense(element)) return "React.Suspense";
    if (typeof type3 == "object" && type3 !== null) {
      if (ReactIs2.isContextProvider(element)) return "Context.Provider";
      if (ReactIs2.isContextConsumer(element)) return "Context.Consumer";
      if (ReactIs2.isForwardRef(element)) {
        if (type3.displayName) return type3.displayName;
        let functionName = type3.render.displayName || type3.render.name || "";
        return functionName !== "" ? "ForwardRef(" + functionName + ")" : "ForwardRef";
      }
      if (ReactIs2.isMemo(element)) {
        let functionName = type3.displayName || type3.type.displayName || type3.type.name || "";
        return functionName !== "" ? "Memo(" + functionName + ")" : "Memo";
      }
    }
    return "UNDEFINED";
  }, getPropKeys2 = (element) => {
    let { props } = element;
    return Object.keys(props).filter((key) => key !== "children" && props[key] !== void 0).sort();
  }, serialize2 = (element, config3, indentation, depth, refs, printer2) => ++depth > config3.maxDepth ? (0, _markup2.printElementAsLeaf)(getType3(element), config3) : (0, _markup2.printElement)(getType3(element), (0, _markup2.printProps)(getPropKeys2(element), element.props, config3, indentation + config3.indent, depth, refs, printer2), (0, _markup2.printChildren)(getChildren2(element.props.children), config3, indentation + config3.indent, depth, refs, printer2), config3, indentation);
  exports.serialize = serialize2;
  var test2 = (val) => val != null && ReactIs2.isElement(val);
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_ReactTestComponent2 = __commonJS({ "node_modules/pretty-format/build/plugins/ReactTestComponent.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.test = exports.serialize = exports.default = void 0;
  var _markup2 = require_markup2(), global2 = function() {
    return typeof globalThis < "u" ? globalThis : typeof global2 < "u" ? global2 : typeof self < "u" ? self : typeof window < "u" ? window : Function("return this")();
  }(), Symbol2 = global2["jest-symbol-do-not-touch"] || global2.Symbol, testSymbol2 = typeof Symbol2 == "function" && Symbol2.for ? Symbol2.for("react.test.json") : 245830487, getPropKeys2 = (object) => {
    let { props } = object;
    return props ? Object.keys(props).filter((key) => props[key] !== void 0).sort() : [];
  }, serialize2 = (object, config3, indentation, depth, refs, printer2) => ++depth > config3.maxDepth ? (0, _markup2.printElementAsLeaf)(object.type, config3) : (0, _markup2.printElement)(object.type, object.props ? (0, _markup2.printProps)(getPropKeys2(object), object.props, config3, indentation + config3.indent, depth, refs, printer2) : "", object.children ? (0, _markup2.printChildren)(object.children, config3, indentation + config3.indent, depth, refs, printer2) : "", config3, indentation);
  exports.serialize = serialize2;
  var test2 = (val) => val && val.$$typeof === testSymbol2;
  exports.test = test2;
  var plugin2 = { serialize: serialize2, test: test2 }, _default2 = plugin2;
  exports.default = _default2;
} });
var require_build3 = __commonJS({ "node_modules/pretty-format/build/index.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = exports.DEFAULT_OPTIONS = void 0;
  exports.format = format4;
  exports.plugins = void 0;
  var _ansiStyles2 = _interopRequireDefault2(require_ansi_styles3()), _collections2 = require_collections2(), _AsymmetricMatcher2 = _interopRequireDefault2(require_AsymmetricMatcher2()), _ConvertAnsi2 = _interopRequireDefault2(require_ConvertAnsi()), _DOMCollection2 = _interopRequireDefault2(require_DOMCollection2()), _DOMElement2 = _interopRequireDefault2(require_DOMElement2()), _Immutable2 = _interopRequireDefault2(require_Immutable2()), _ReactElement2 = _interopRequireDefault2(require_ReactElement2()), _ReactTestComponent2 = _interopRequireDefault2(require_ReactTestComponent2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var toString2 = Object.prototype.toString, toISOString2 = Date.prototype.toISOString, errorToString2 = Error.prototype.toString, regExpToString2 = RegExp.prototype.toString, getConstructorName2 = (val) => typeof val.constructor == "function" && val.constructor.name || "Object", isWindow2 = (val) => typeof window < "u" && val === window, SYMBOL_REGEXP2 = /^Symbol\((.*)\)(.*)$/, NEWLINE_REGEXP2 = /\n/gi, PrettyFormatPluginError2 = class extends Error {
    constructor(message, stack) {
      super(message), this.stack = stack, this.name = this.constructor.name;
    }
  };
  function isToStringedArrayType2(toStringed) {
    return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
  }
  function printNumber2(val) {
    return Object.is(val, -0) ? "-0" : String(val);
  }
  function printBigInt2(val) {
    return `${val}n`;
  }
  function printFunction2(val, printFunctionName) {
    return printFunctionName ? "[Function " + (val.name || "anonymous") + "]" : "[Function]";
  }
  function printSymbol2(val) {
    return String(val).replace(SYMBOL_REGEXP2, "Symbol($1)");
  }
  function printError2(val) {
    return "[" + errorToString2.call(val) + "]";
  }
  function printBasicValue2(val, printFunctionName, escapeRegex, escapeString) {
    if (val === true || val === false) return "" + val;
    if (val === void 0) return "undefined";
    if (val === null) return "null";
    let typeOf = typeof val;
    if (typeOf === "number") return printNumber2(val);
    if (typeOf === "bigint") return printBigInt2(val);
    if (typeOf === "string") return escapeString ? '"' + val.replace(/"|\\/g, "\\$&") + '"' : '"' + val + '"';
    if (typeOf === "function") return printFunction2(val, printFunctionName);
    if (typeOf === "symbol") return printSymbol2(val);
    let toStringed = toString2.call(val);
    return toStringed === "[object WeakMap]" ? "WeakMap {}" : toStringed === "[object WeakSet]" ? "WeakSet {}" : toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]" ? printFunction2(val, printFunctionName) : toStringed === "[object Symbol]" ? printSymbol2(val) : toStringed === "[object Date]" ? isNaN(+val) ? "Date { NaN }" : toISOString2.call(val) : toStringed === "[object Error]" ? printError2(val) : toStringed === "[object RegExp]" ? escapeRegex ? regExpToString2.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&") : regExpToString2.call(val) : val instanceof Error ? printError2(val) : null;
  }
  function printComplexValue2(val, config3, indentation, depth, refs, hasCalledToJSON) {
    if (refs.indexOf(val) !== -1) return "[Circular]";
    refs = refs.slice(), refs.push(val);
    let hitMaxDepth = ++depth > config3.maxDepth, min = config3.min;
    if (config3.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON == "function" && !hasCalledToJSON) return printer2(val.toJSON(), config3, indentation, depth, refs, true);
    let toStringed = toString2.call(val);
    return toStringed === "[object Arguments]" ? hitMaxDepth ? "[Arguments]" : (min ? "" : "Arguments ") + "[" + (0, _collections2.printListItems)(val, config3, indentation, depth, refs, printer2) + "]" : isToStringedArrayType2(toStringed) ? hitMaxDepth ? "[" + val.constructor.name + "]" : (min || !config3.printBasicPrototype && val.constructor.name === "Array" ? "" : val.constructor.name + " ") + "[" + (0, _collections2.printListItems)(val, config3, indentation, depth, refs, printer2) + "]" : toStringed === "[object Map]" ? hitMaxDepth ? "[Map]" : "Map {" + (0, _collections2.printIteratorEntries)(val.entries(), config3, indentation, depth, refs, printer2, " => ") + "}" : toStringed === "[object Set]" ? hitMaxDepth ? "[Set]" : "Set {" + (0, _collections2.printIteratorValues)(val.values(), config3, indentation, depth, refs, printer2) + "}" : hitMaxDepth || isWindow2(val) ? "[" + getConstructorName2(val) + "]" : (min || !config3.printBasicPrototype && getConstructorName2(val) === "Object" ? "" : getConstructorName2(val) + " ") + "{" + (0, _collections2.printObjectProperties)(val, config3, indentation, depth, refs, printer2) + "}";
  }
  function isNewPlugin2(plugin2) {
    return plugin2.serialize != null;
  }
  function printPlugin2(plugin2, val, config3, indentation, depth, refs) {
    let printed;
    try {
      printed = isNewPlugin2(plugin2) ? plugin2.serialize(val, config3, indentation, depth, refs, printer2) : plugin2.print(val, (valChild) => printer2(valChild, config3, indentation, depth, refs), (str) => {
        let indentationNext = indentation + config3.indent;
        return indentationNext + str.replace(NEWLINE_REGEXP2, `
` + indentationNext);
      }, { edgeSpacing: config3.spacingOuter, min: config3.min, spacing: config3.spacingInner }, config3.colors);
    } catch (error) {
      throw new PrettyFormatPluginError2(error.message, error.stack);
    }
    if (typeof printed != "string") throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`);
    return printed;
  }
  function findPlugin2(plugins5, val) {
    for (let p2 = 0; p2 < plugins5.length; p2++) try {
      if (plugins5[p2].test(val)) return plugins5[p2];
    } catch (error) {
      throw new PrettyFormatPluginError2(error.message, error.stack);
    }
    return null;
  }
  function printer2(val, config3, indentation, depth, refs, hasCalledToJSON) {
    let plugin2 = findPlugin2(config3.plugins, val);
    if (plugin2 !== null) return printPlugin2(plugin2, val, config3, indentation, depth, refs);
    let basicResult = printBasicValue2(val, config3.printFunctionName, config3.escapeRegex, config3.escapeString);
    return basicResult !== null ? basicResult : printComplexValue2(val, config3, indentation, depth, refs, hasCalledToJSON);
  }
  var DEFAULT_THEME2 = { comment: "gray", content: "reset", prop: "yellow", tag: "cyan", value: "green" }, DEFAULT_THEME_KEYS2 = Object.keys(DEFAULT_THEME2), DEFAULT_OPTIONS2 = { callToJSON: true, compareKeys: void 0, escapeRegex: false, escapeString: true, highlight: false, indent: 2, maxDepth: 1 / 0, min: false, plugins: [], printBasicPrototype: true, printFunctionName: true, theme: DEFAULT_THEME2 };
  exports.DEFAULT_OPTIONS = DEFAULT_OPTIONS2;
  function validateOptions2(options) {
    if (Object.keys(options).forEach((key) => {
      if (!DEFAULT_OPTIONS2.hasOwnProperty(key)) throw new Error(`pretty-format: Unknown option "${key}".`);
    }), options.min && options.indent !== void 0 && options.indent !== 0) throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
    if (options.theme !== void 0) {
      if (options.theme === null) throw new Error('pretty-format: Option "theme" must not be null.');
      if (typeof options.theme != "object") throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof options.theme}".`);
    }
  }
  var getColorsHighlight2 = (options) => DEFAULT_THEME_KEYS2.reduce((colors, key) => {
    let value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME2[key], color = value && _ansiStyles2.default[value];
    if (color && typeof color.close == "string" && typeof color.open == "string") colors[key] = color;
    else throw new Error(`pretty-format: Option "theme" has a key "${key}" whose value "${value}" is undefined in ansi-styles.`);
    return colors;
  }, /* @__PURE__ */ Object.create(null)), getColorsEmpty2 = () => DEFAULT_THEME_KEYS2.reduce((colors, key) => (colors[key] = { close: "", open: "" }, colors), /* @__PURE__ */ Object.create(null)), getPrintFunctionName2 = (options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS2.printFunctionName, getEscapeRegex2 = (options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS2.escapeRegex, getEscapeString2 = (options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS2.escapeString, getConfig3 = (options) => {
    var _options$printBasicPr;
    return { callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS2.callToJSON, colors: options && options.highlight ? getColorsHighlight2(options) : getColorsEmpty2(), compareKeys: options && typeof options.compareKeys == "function" ? options.compareKeys : DEFAULT_OPTIONS2.compareKeys, escapeRegex: getEscapeRegex2(options), escapeString: getEscapeString2(options), indent: options && options.min ? "" : createIndent2(options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS2.indent), maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS2.maxDepth, min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS2.min, plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS2.plugins, printBasicPrototype: (_options$printBasicPr = options == null ? void 0 : options.printBasicPrototype) !== null && _options$printBasicPr !== void 0 ? _options$printBasicPr : true, printFunctionName: getPrintFunctionName2(options), spacingInner: options && options.min ? " " : `
`, spacingOuter: options && options.min ? "" : `
` };
  };
  function createIndent2(indent) {
    return new Array(indent + 1).join(" ");
  }
  function format4(val, options) {
    if (options && (validateOptions2(options), options.plugins)) {
      let plugin2 = findPlugin2(options.plugins, val);
      if (plugin2 !== null) return printPlugin2(plugin2, val, getConfig3(options), "", 0, []);
    }
    let basicResult = printBasicValue2(val, getPrintFunctionName2(options), getEscapeRegex2(options), getEscapeString2(options));
    return basicResult !== null ? basicResult : printComplexValue2(val, getConfig3(options), "", 0, []);
  }
  var plugins4 = { AsymmetricMatcher: _AsymmetricMatcher2.default, ConvertAnsi: _ConvertAnsi2.default, DOMCollection: _DOMCollection2.default, DOMElement: _DOMElement2.default, Immutable: _Immutable2.default, ReactElement: _ReactElement2.default, ReactTestComponent: _ReactTestComponent2.default };
  exports.plugins = plugins4;
  var _default2 = format4;
  exports.default = _default2;
} });
var require_iteratorProxy2 = __commonJS({ "../../node_modules/aria-query/lib/util/iteratorProxy.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  function iteratorProxy2() {
    var values6 = this, index = 0, iter = { "@@iterator": function() {
      return iter;
    }, next: function() {
      if (index < values6.length) {
        var value = values6[index];
        return index = index + 1, { done: false, value };
      } else return { done: true };
    } };
    return iter;
  }
  var _default2 = iteratorProxy2;
  exports.default = _default2;
} });
var require_iterationDecorator2 = __commonJS({ "../../node_modules/aria-query/lib/util/iterationDecorator.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = iterationDecorator2;
  var _iteratorProxy2 = _interopRequireDefault2(require_iteratorProxy2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _typeof5(obj) {
    "@babel/helpers - typeof";
    return _typeof5 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof5(obj);
  }
  function iterationDecorator2(collection, entries6) {
    return typeof Symbol == "function" && _typeof5(Symbol.iterator) === "symbol" && Object.defineProperty(collection, Symbol.iterator, { value: _iteratorProxy2.default.bind(entries6) }), collection;
  }
} });
var require_ariaPropsMap2 = __commonJS({ "../../node_modules/aria-query/lib/ariaPropsMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i2) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i2) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i2 && _arr.length === i2)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i2 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
    return arr2;
  }
  var properties2 = [["aria-activedescendant", { type: "id" }], ["aria-atomic", { type: "boolean" }], ["aria-autocomplete", { type: "token", values: ["inline", "list", "both", "none"] }], ["aria-braillelabel", { type: "string" }], ["aria-brailleroledescription", { type: "string" }], ["aria-busy", { type: "boolean" }], ["aria-checked", { type: "tristate" }], ["aria-colcount", { type: "integer" }], ["aria-colindex", { type: "integer" }], ["aria-colspan", { type: "integer" }], ["aria-controls", { type: "idlist" }], ["aria-current", { type: "token", values: ["page", "step", "location", "date", "time", true, false] }], ["aria-describedby", { type: "idlist" }], ["aria-description", { type: "string" }], ["aria-details", { type: "id" }], ["aria-disabled", { type: "boolean" }], ["aria-dropeffect", { type: "tokenlist", values: ["copy", "execute", "link", "move", "none", "popup"] }], ["aria-errormessage", { type: "id" }], ["aria-expanded", { type: "boolean", allowundefined: true }], ["aria-flowto", { type: "idlist" }], ["aria-grabbed", { type: "boolean", allowundefined: true }], ["aria-haspopup", { type: "token", values: [false, true, "menu", "listbox", "tree", "grid", "dialog"] }], ["aria-hidden", { type: "boolean", allowundefined: true }], ["aria-invalid", { type: "token", values: ["grammar", false, "spelling", true] }], ["aria-keyshortcuts", { type: "string" }], ["aria-label", { type: "string" }], ["aria-labelledby", { type: "idlist" }], ["aria-level", { type: "integer" }], ["aria-live", { type: "token", values: ["assertive", "off", "polite"] }], ["aria-modal", { type: "boolean" }], ["aria-multiline", { type: "boolean" }], ["aria-multiselectable", { type: "boolean" }], ["aria-orientation", { type: "token", values: ["vertical", "undefined", "horizontal"] }], ["aria-owns", { type: "idlist" }], ["aria-placeholder", { type: "string" }], ["aria-posinset", { type: "integer" }], ["aria-pressed", { type: "tristate" }], ["aria-readonly", { type: "boolean" }], ["aria-relevant", { type: "tokenlist", values: ["additions", "all", "removals", "text"] }], ["aria-required", { type: "boolean" }], ["aria-roledescription", { type: "string" }], ["aria-rowcount", { type: "integer" }], ["aria-rowindex", { type: "integer" }], ["aria-rowspan", { type: "integer" }], ["aria-selected", { type: "boolean", allowundefined: true }], ["aria-setsize", { type: "integer" }], ["aria-sort", { type: "token", values: ["ascending", "descending", "none", "other"] }], ["aria-valuemax", { type: "number" }], ["aria-valuemin", { type: "number" }], ["aria-valuenow", { type: "number" }], ["aria-valuetext", { type: "string" }]], ariaPropsMap2 = { entries: function() {
    return properties2;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(properties2), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, key, properties2);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key) {
    var item = properties2.find(function(tuple) {
      return tuple[0] === key;
    });
    return item && item[1];
  }, has: function(key) {
    return !!ariaPropsMap2.get(key);
  }, keys: function() {
    return properties2.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key = _ref2[0];
      return key;
    });
  }, values: function() {
    return properties2.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(ariaPropsMap2, ariaPropsMap2.entries());
  exports.default = _default2;
} });
var require_domMap2 = __commonJS({ "../../node_modules/aria-query/lib/domMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i2) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i2) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i2 && _arr.length === i2)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i2 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
    return arr2;
  }
  var dom2 = [["a", { reserved: false }], ["abbr", { reserved: false }], ["acronym", { reserved: false }], ["address", { reserved: false }], ["applet", { reserved: false }], ["area", { reserved: false }], ["article", { reserved: false }], ["aside", { reserved: false }], ["audio", { reserved: false }], ["b", { reserved: false }], ["base", { reserved: true }], ["bdi", { reserved: false }], ["bdo", { reserved: false }], ["big", { reserved: false }], ["blink", { reserved: false }], ["blockquote", { reserved: false }], ["body", { reserved: false }], ["br", { reserved: false }], ["button", { reserved: false }], ["canvas", { reserved: false }], ["caption", { reserved: false }], ["center", { reserved: false }], ["cite", { reserved: false }], ["code", { reserved: false }], ["col", { reserved: true }], ["colgroup", { reserved: true }], ["content", { reserved: false }], ["data", { reserved: false }], ["datalist", { reserved: false }], ["dd", { reserved: false }], ["del", { reserved: false }], ["details", { reserved: false }], ["dfn", { reserved: false }], ["dialog", { reserved: false }], ["dir", { reserved: false }], ["div", { reserved: false }], ["dl", { reserved: false }], ["dt", { reserved: false }], ["em", { reserved: false }], ["embed", { reserved: false }], ["fieldset", { reserved: false }], ["figcaption", { reserved: false }], ["figure", { reserved: false }], ["font", { reserved: false }], ["footer", { reserved: false }], ["form", { reserved: false }], ["frame", { reserved: false }], ["frameset", { reserved: false }], ["h1", { reserved: false }], ["h2", { reserved: false }], ["h3", { reserved: false }], ["h4", { reserved: false }], ["h5", { reserved: false }], ["h6", { reserved: false }], ["head", { reserved: true }], ["header", { reserved: false }], ["hgroup", { reserved: false }], ["hr", { reserved: false }], ["html", { reserved: true }], ["i", { reserved: false }], ["iframe", { reserved: false }], ["img", { reserved: false }], ["input", { reserved: false }], ["ins", { reserved: false }], ["kbd", { reserved: false }], ["keygen", { reserved: false }], ["label", { reserved: false }], ["legend", { reserved: false }], ["li", { reserved: false }], ["link", { reserved: true }], ["main", { reserved: false }], ["map", { reserved: false }], ["mark", { reserved: false }], ["marquee", { reserved: false }], ["menu", { reserved: false }], ["menuitem", { reserved: false }], ["meta", { reserved: true }], ["meter", { reserved: false }], ["nav", { reserved: false }], ["noembed", { reserved: true }], ["noscript", { reserved: true }], ["object", { reserved: false }], ["ol", { reserved: false }], ["optgroup", { reserved: false }], ["option", { reserved: false }], ["output", { reserved: false }], ["p", { reserved: false }], ["param", { reserved: true }], ["picture", { reserved: true }], ["pre", { reserved: false }], ["progress", { reserved: false }], ["q", { reserved: false }], ["rp", { reserved: false }], ["rt", { reserved: false }], ["rtc", { reserved: false }], ["ruby", { reserved: false }], ["s", { reserved: false }], ["samp", { reserved: false }], ["script", { reserved: true }], ["section", { reserved: false }], ["select", { reserved: false }], ["small", { reserved: false }], ["source", { reserved: true }], ["spacer", { reserved: false }], ["span", { reserved: false }], ["strike", { reserved: false }], ["strong", { reserved: false }], ["style", { reserved: true }], ["sub", { reserved: false }], ["summary", { reserved: false }], ["sup", { reserved: false }], ["table", { reserved: false }], ["tbody", { reserved: false }], ["td", { reserved: false }], ["textarea", { reserved: false }], ["tfoot", { reserved: false }], ["th", { reserved: false }], ["thead", { reserved: false }], ["time", { reserved: false }], ["title", { reserved: true }], ["tr", { reserved: false }], ["track", { reserved: true }], ["tt", { reserved: false }], ["u", { reserved: false }], ["ul", { reserved: false }], ["var", { reserved: false }], ["video", { reserved: false }], ["wbr", { reserved: false }], ["xmp", { reserved: false }]], domMap2 = { entries: function() {
    return dom2;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(dom2), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, key, dom2);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key) {
    var item = dom2.find(function(tuple) {
      return tuple[0] === key;
    });
    return item && item[1];
  }, has: function(key) {
    return !!domMap2.get(key);
  }, keys: function() {
    return dom2.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key = _ref2[0];
      return key;
    });
  }, values: function() {
    return dom2.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(domMap2, domMap2.entries());
  exports.default = _default2;
} });
var require_commandRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/commandRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var commandRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default2 = commandRole2;
  exports.default = _default2;
} });
var require_compositeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/compositeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var compositeRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default2 = compositeRole2;
  exports.default = _default2;
} });
var require_inputRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/inputRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var inputRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null }, relatedConcepts: [{ concept: { name: "input" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget"]] }, _default2 = inputRole2;
  exports.default = _default2;
} });
var require_landmarkRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/landmarkRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var landmarkRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = landmarkRole2;
  exports.default = _default2;
} });
var require_rangeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/rangeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rangeRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuemax": null, "aria-valuemin": null, "aria-valuenow": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = rangeRole2;
  exports.default = _default2;
} });
var require_roletypeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/roletypeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var roletypeRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: { "aria-atomic": null, "aria-busy": null, "aria-controls": null, "aria-current": null, "aria-describedby": null, "aria-details": null, "aria-dropeffect": null, "aria-flowto": null, "aria-grabbed": null, "aria-hidden": null, "aria-keyshortcuts": null, "aria-label": null, "aria-labelledby": null, "aria-live": null, "aria-owns": null, "aria-relevant": null, "aria-roledescription": null }, relatedConcepts: [{ concept: { name: "role" }, module: "XHTML" }, { concept: { name: "type" }, module: "Dublin Core" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [] }, _default2 = roletypeRole2;
  exports.default = _default2;
} });
var require_sectionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/sectionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var sectionRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "frontmatter" }, module: "DTB" }, { concept: { name: "level" }, module: "DTB" }, { concept: { name: "level" }, module: "SMIL" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = sectionRole2;
  exports.default = _default2;
} });
var require_sectionheadRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/sectionheadRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var sectionheadRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = sectionheadRole2;
  exports.default = _default2;
} });
var require_selectRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/selectRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var selectRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]] }, _default2 = selectRole2;
  exports.default = _default2;
} });
var require_structureRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/structureRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var structureRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default2 = structureRole2;
  exports.default = _default2;
} });
var require_widgetRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/widgetRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var widgetRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default2 = widgetRole2;
  exports.default = _default2;
} });
var require_windowRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/abstract/windowRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var windowRole2 = { abstract: true, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-modal": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype"]] }, _default2 = windowRole2;
  exports.default = _default2;
} });
var require_ariaAbstractRoles2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/ariaAbstractRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _commandRole2 = _interopRequireDefault2(require_commandRole2()), _compositeRole2 = _interopRequireDefault2(require_compositeRole2()), _inputRole2 = _interopRequireDefault2(require_inputRole2()), _landmarkRole2 = _interopRequireDefault2(require_landmarkRole2()), _rangeRole2 = _interopRequireDefault2(require_rangeRole2()), _roletypeRole2 = _interopRequireDefault2(require_roletypeRole2()), _sectionRole2 = _interopRequireDefault2(require_sectionRole2()), _sectionheadRole2 = _interopRequireDefault2(require_sectionheadRole2()), _selectRole2 = _interopRequireDefault2(require_selectRole2()), _structureRole2 = _interopRequireDefault2(require_structureRole2()), _widgetRole2 = _interopRequireDefault2(require_widgetRole2()), _windowRole2 = _interopRequireDefault2(require_windowRole2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaAbstractRoles2 = [["command", _commandRole2.default], ["composite", _compositeRole2.default], ["input", _inputRole2.default], ["landmark", _landmarkRole2.default], ["range", _rangeRole2.default], ["roletype", _roletypeRole2.default], ["section", _sectionRole2.default], ["sectionhead", _sectionheadRole2.default], ["select", _selectRole2.default], ["structure", _structureRole2.default], ["widget", _widgetRole2.default], ["window", _windowRole2.default]], _default2 = ariaAbstractRoles2;
  exports.default = _default2;
} });
var require_alertRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/alertRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var alertRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-atomic": "true", "aria-live": "assertive" }, relatedConcepts: [{ concept: { name: "alert" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = alertRole2;
  exports.default = _default2;
} });
var require_alertdialogRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/alertdialogRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var alertdialogRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "alert" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]] }, _default2 = alertdialogRole2;
  exports.default = _default2;
} });
var require_applicationRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/applicationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var applicationRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "Device Independence Delivery Unit" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = applicationRole2;
  exports.default = _default2;
} });
var require_articleRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/articleRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var articleRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "article" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "document"]] }, _default2 = articleRole2;
  exports.default = _default2;
} });
var require_bannerRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/bannerRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var bannerRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { constraints: ["scoped to the body element"], name: "header" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = bannerRole2;
  exports.default = _default2;
} });
var require_blockquoteRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/blockquoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var blockquoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "blockquote" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = blockquoteRole2;
  exports.default = _default2;
} });
var require_buttonRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/buttonRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var buttonRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-pressed": null }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "button" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "image" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "reset" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ name: "type", value: "submit" }], name: "input" }, module: "HTML" }, { concept: { name: "button" }, module: "HTML" }, { concept: { name: "trigger" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default2 = buttonRole2;
  exports.default = _default2;
} });
var require_captionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/captionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var captionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "caption" }, module: "HTML" }], requireContextRole: ["figure", "grid", "table"], requiredContextRole: ["figure", "grid", "table"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = captionRole2;
  exports.default = _default2;
} });
var require_cellRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/cellRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var cellRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-colindex": null, "aria-colspan": null, "aria-rowindex": null, "aria-rowspan": null }, relatedConcepts: [{ concept: { constraints: ["ancestor table element has table role"], name: "td" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = cellRole2;
  exports.default = _default2;
} });
var require_checkboxRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/checkboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var checkboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-errormessage": null, "aria-expanded": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "checkbox" }], name: "input" }, module: "HTML" }, { concept: { name: "option" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input"]] }, _default2 = checkboxRole2;
  exports.default = _default2;
} });
var require_codeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/codeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var codeRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "code" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = codeRole2;
  exports.default = _default2;
} });
var require_columnheaderRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/columnheaderRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var columnheaderRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-sort": null }, relatedConcepts: [{ concept: { name: "th" }, module: "HTML" }, { concept: { attributes: [{ name: "scope", value: "col" }], name: "th" }, module: "HTML" }, { concept: { attributes: [{ name: "scope", value: "colgroup" }], name: "th" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]] }, _default2 = columnheaderRole2;
  exports.default = _default2;
} });
var require_comboboxRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/comboboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var comboboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-autocomplete": null, "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-expanded": "false", "aria-haspopup": "listbox" }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "email" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "search" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "tel" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "text" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "list" }, { name: "type", value: "url" }], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "multiple" }, { constraints: ["undefined"], name: "size" }], constraints: ["the multiple attribute is not set and the size attribute does not have a value greater than 1"], name: "select" }, module: "HTML" }, { concept: { name: "select" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-controls": null, "aria-expanded": "false" }, superClass: [["roletype", "widget", "input"]] }, _default2 = comboboxRole2;
  exports.default = _default2;
} });
var require_complementaryRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/complementaryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var complementaryRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "aside" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-label" }], constraints: ["scoped to a sectioning content element", "scoped to a sectioning root element other than body"], name: "aside" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-labelledby" }], constraints: ["scoped to a sectioning content element", "scoped to a sectioning root element other than body"], name: "aside" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = complementaryRole2;
  exports.default = _default2;
} });
var require_contentinfoRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/contentinfoRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var contentinfoRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { constraints: ["scoped to the body element"], name: "footer" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = contentinfoRole2;
  exports.default = _default2;
} });
var require_definitionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/definitionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var definitionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dd" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = definitionRole2;
  exports.default = _default2;
} });
var require_deletionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/deletionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var deletionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "del" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = deletionRole2;
  exports.default = _default2;
} });
var require_dialogRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/dialogRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var dialogRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dialog" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "window"]] }, _default2 = dialogRole2;
  exports.default = _default2;
} });
var require_directoryRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/directoryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var directoryRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ module: "DAISY Guide" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "list"]] }, _default2 = directoryRole2;
  exports.default = _default2;
} });
var require_documentRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/documentRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var documentRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "Device Independence Delivery Unit" } }, { concept: { name: "html" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = documentRole2;
  exports.default = _default2;
} });
var require_emphasisRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/emphasisRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var emphasisRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "em" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = emphasisRole2;
  exports.default = _default2;
} });
var require_feedRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/feedRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var feedRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["article"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "list"]] }, _default2 = feedRole2;
  exports.default = _default2;
} });
var require_figureRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/figureRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var figureRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "figure" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = figureRole2;
  exports.default = _default2;
} });
var require_formRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/formRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var formRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-label" }], name: "form" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-labelledby" }], name: "form" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "name" }], name: "form" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = formRole2;
  exports.default = _default2;
} });
var require_genericRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/genericRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var genericRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "a" }, module: "HTML" }, { concept: { name: "area" }, module: "HTML" }, { concept: { name: "aside" }, module: "HTML" }, { concept: { name: "b" }, module: "HTML" }, { concept: { name: "bdo" }, module: "HTML" }, { concept: { name: "body" }, module: "HTML" }, { concept: { name: "data" }, module: "HTML" }, { concept: { name: "div" }, module: "HTML" }, { concept: { constraints: ["scoped to the main element", "scoped to a sectioning content element", "scoped to a sectioning root element other than body"], name: "footer" }, module: "HTML" }, { concept: { constraints: ["scoped to the main element", "scoped to a sectioning content element", "scoped to a sectioning root element other than body"], name: "header" }, module: "HTML" }, { concept: { name: "hgroup" }, module: "HTML" }, { concept: { name: "i" }, module: "HTML" }, { concept: { name: "pre" }, module: "HTML" }, { concept: { name: "q" }, module: "HTML" }, { concept: { name: "samp" }, module: "HTML" }, { concept: { name: "section" }, module: "HTML" }, { concept: { name: "small" }, module: "HTML" }, { concept: { name: "span" }, module: "HTML" }, { concept: { name: "u" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = genericRole2;
  exports.default = _default2;
} });
var require_gridRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/gridRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var gridRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-multiselectable": null, "aria-readonly": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]] }, _default2 = gridRole2;
  exports.default = _default2;
} });
var require_gridcellRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/gridcellRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var gridcellRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-selected": null }, relatedConcepts: [{ concept: { constraints: ["ancestor table element has grid role", "ancestor table element has treegrid role"], name: "td" }, module: "HTML" }], requireContextRole: ["row"], requiredContextRole: ["row"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]] }, _default2 = gridcellRole2;
  exports.default = _default2;
} });
var require_groupRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/groupRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var groupRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-disabled": null }, relatedConcepts: [{ concept: { name: "details" }, module: "HTML" }, { concept: { name: "fieldset" }, module: "HTML" }, { concept: { name: "optgroup" }, module: "HTML" }, { concept: { name: "address" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = groupRole2;
  exports.default = _default2;
} });
var require_headingRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/headingRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var headingRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-level": "2" }, relatedConcepts: [{ concept: { name: "h1" }, module: "HTML" }, { concept: { name: "h2" }, module: "HTML" }, { concept: { name: "h3" }, module: "HTML" }, { concept: { name: "h4" }, module: "HTML" }, { concept: { name: "h5" }, module: "HTML" }, { concept: { name: "h6" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-level": "2" }, superClass: [["roletype", "structure", "sectionhead"]] }, _default2 = headingRole2;
  exports.default = _default2;
} });
var require_imgRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/imgRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var imgRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "alt" }], name: "img" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "alt" }], name: "img" }, module: "HTML" }, { concept: { name: "imggroup" }, module: "DTB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = imgRole2;
  exports.default = _default2;
} });
var require_insertionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/insertionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var insertionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "ins" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = insertionRole2;
  exports.default = _default2;
} });
var require_linkRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/linkRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var linkRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "href" }], name: "a" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "href" }], name: "area" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default2 = linkRole2;
  exports.default = _default2;
} });
var require_listRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/listRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var listRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menu" }, module: "HTML" }, { concept: { name: "ol" }, module: "HTML" }, { concept: { name: "ul" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["listitem"]], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = listRole2;
  exports.default = _default2;
} });
var require_listboxRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/listboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var listboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-invalid": null, "aria-multiselectable": null, "aria-readonly": null, "aria-required": null, "aria-orientation": "vertical" }, relatedConcepts: [{ concept: { attributes: [{ constraints: [">1"], name: "size" }], constraints: ["the size attribute value is greater than 1"], name: "select" }, module: "HTML" }, { concept: { attributes: [{ name: "multiple" }], name: "select" }, module: "HTML" }, { concept: { name: "datalist" }, module: "HTML" }, { concept: { name: "list" }, module: "ARIA" }, { concept: { name: "select" }, module: "XForms" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["option", "group"], ["option"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = listboxRole2;
  exports.default = _default2;
} });
var require_listitemRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/listitemRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var listitemRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-level": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { constraints: ["direct descendant of ol", "direct descendant of ul", "direct descendant of menu"], name: "li" }, module: "HTML" }, { concept: { name: "item" }, module: "XForms" }], requireContextRole: ["directory", "list"], requiredContextRole: ["directory", "list"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = listitemRole2;
  exports.default = _default2;
} });
var require_logRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/logRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var logRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-live": "polite" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = logRole2;
  exports.default = _default2;
} });
var require_mainRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/mainRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var mainRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "main" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = mainRole2;
  exports.default = _default2;
} });
var require_markRole = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/markRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var markRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: [], props: { "aria-braillelabel": null, "aria-brailleroledescription": null, "aria-description": null }, relatedConcepts: [{ concept: { name: "mark" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = markRole2;
  exports.default = _default2;
} });
var require_marqueeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/marqueeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var marqueeRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = marqueeRole2;
  exports.default = _default2;
} });
var require_mathRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/mathRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var mathRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "math" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = mathRole2;
  exports.default = _default2;
} });
var require_menuRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/menuRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "vertical" }, relatedConcepts: [{ concept: { name: "MENU" }, module: "JAPI" }, { concept: { name: "list" }, module: "ARIA" }, { concept: { name: "select" }, module: "XForms" }, { concept: { name: "sidebar" }, module: "DTB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = menuRole2;
  exports.default = _default2;
} });
var require_menubarRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/menubarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menubarRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "horizontal" }, relatedConcepts: [{ concept: { name: "toolbar" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]] }, _default2 = menubarRole2;
  exports.default = _default2;
} });
var require_menuitemRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/menuitemRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuitemRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "MENU_ITEM" }, module: "JAPI" }, { concept: { name: "listitem" }, module: "ARIA" }, { concept: { name: "option" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command"]] }, _default2 = menuitemRole2;
  exports.default = _default2;
} });
var require_menuitemcheckboxRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/menuitemcheckboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuitemcheckboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]] }, _default2 = menuitemcheckboxRole2;
  exports.default = _default2;
} });
var require_menuitemradioRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/menuitemradioRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var menuitemradioRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "menuitem" }, module: "ARIA" }], requireContextRole: ["group", "menu", "menubar"], requiredContextRole: ["group", "menu", "menubar"], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]] }, _default2 = menuitemradioRole2;
  exports.default = _default2;
} });
var require_meterRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/meterRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var meterRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuetext": null, "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [{ concept: { name: "meter" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-valuenow": null }, superClass: [["roletype", "structure", "range"]] }, _default2 = meterRole2;
  exports.default = _default2;
} });
var require_navigationRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/navigationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var navigationRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "nav" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = navigationRole2;
  exports.default = _default2;
} });
var require_noneRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/noneRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var noneRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: [], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [] }, _default2 = noneRole2;
  exports.default = _default2;
} });
var require_noteRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/noteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var noteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = noteRole2;
  exports.default = _default2;
} });
var require_optionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/optionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var optionRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-posinset": null, "aria-setsize": null, "aria-selected": "false" }, relatedConcepts: [{ concept: { name: "item" }, module: "XForms" }, { concept: { name: "listitem" }, module: "ARIA" }, { concept: { name: "option" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-selected": "false" }, superClass: [["roletype", "widget", "input"]] }, _default2 = optionRole2;
  exports.default = _default2;
} });
var require_paragraphRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/paragraphRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var paragraphRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "p" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = paragraphRole2;
  exports.default = _default2;
} });
var require_presentationRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/presentationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var presentationRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { attributes: [{ name: "alt", value: "" }], name: "img" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = presentationRole2;
  exports.default = _default2;
} });
var require_progressbarRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/progressbarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var progressbarRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-valuetext": null }, relatedConcepts: [{ concept: { name: "progress" }, module: "HTML" }, { concept: { name: "status" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "range"], ["roletype", "widget"]] }, _default2 = progressbarRole2;
  exports.default = _default2;
} });
var require_radioRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/radioRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var radioRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-checked": null, "aria-posinset": null, "aria-setsize": null }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "radio" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input"]] }, _default2 = radioRole2;
  exports.default = _default2;
} });
var require_radiogroupRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/radiogroupRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var radiogroupRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { name: "list" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["radio"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = radiogroupRole2;
  exports.default = _default2;
} });
var require_regionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/regionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var regionRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["set"], name: "aria-label" }], name: "section" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["set"], name: "aria-labelledby" }], name: "section" }, module: "HTML" }, { concept: { name: "Device Independence Glossart perceivable unit" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = regionRole2;
  exports.default = _default2;
} });
var require_rowRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/rowRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rowRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-colindex": null, "aria-expanded": null, "aria-level": null, "aria-posinset": null, "aria-rowindex": null, "aria-selected": null, "aria-setsize": null }, relatedConcepts: [{ concept: { name: "tr" }, module: "HTML" }], requireContextRole: ["grid", "rowgroup", "table", "treegrid"], requiredContextRole: ["grid", "rowgroup", "table", "treegrid"], requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]] }, _default2 = rowRole2;
  exports.default = _default2;
} });
var require_rowgroupRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/rowgroupRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rowgroupRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "tbody" }, module: "HTML" }, { concept: { name: "tfoot" }, module: "HTML" }, { concept: { name: "thead" }, module: "HTML" }], requireContextRole: ["grid", "table", "treegrid"], requiredContextRole: ["grid", "table", "treegrid"], requiredOwnedElements: [["row"]], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = rowgroupRole2;
  exports.default = _default2;
} });
var require_rowheaderRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/rowheaderRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var rowheaderRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-sort": null }, relatedConcepts: [{ concept: { attributes: [{ name: "scope", value: "row" }], name: "th" }, module: "HTML" }, { concept: { attributes: [{ name: "scope", value: "rowgroup" }], name: "th" }, module: "HTML" }], requireContextRole: ["row", "rowgroup"], requiredContextRole: ["row", "rowgroup"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]] }, _default2 = rowheaderRole2;
  exports.default = _default2;
} });
var require_scrollbarRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/scrollbarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var scrollbarRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-valuetext": null, "aria-orientation": "vertical", "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-controls": null, "aria-valuenow": null }, superClass: [["roletype", "structure", "range"], ["roletype", "widget"]] }, _default2 = scrollbarRole2;
  exports.default = _default2;
} });
var require_searchRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/searchRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var searchRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = searchRole2;
  exports.default = _default2;
} });
var require_searchboxRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/searchboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var searchboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "search" }], constraints: ["the list attribute is not set"], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "input", "textbox"]] }, _default2 = searchboxRole2;
  exports.default = _default2;
} });
var require_separatorRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/separatorRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var separatorRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-orientation": "horizontal", "aria-valuemax": "100", "aria-valuemin": "0", "aria-valuenow": null, "aria-valuetext": null }, relatedConcepts: [{ concept: { name: "hr" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure"]] }, _default2 = separatorRole2;
  exports.default = _default2;
} });
var require_sliderRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/sliderRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var sliderRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-haspopup": null, "aria-invalid": null, "aria-readonly": null, "aria-valuetext": null, "aria-orientation": "horizontal", "aria-valuemax": "100", "aria-valuemin": "0" }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "range" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-valuenow": null }, superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]] }, _default2 = sliderRole2;
  exports.default = _default2;
} });
var require_spinbuttonRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/spinbuttonRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var spinbuttonRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-readonly": null, "aria-required": null, "aria-valuetext": null, "aria-valuenow": "0" }, relatedConcepts: [{ concept: { attributes: [{ name: "type", value: "number" }], name: "input" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]] }, _default2 = spinbuttonRole2;
  exports.default = _default2;
} });
var require_statusRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/statusRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var statusRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-atomic": "true", "aria-live": "polite" }, relatedConcepts: [{ concept: { name: "output" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = statusRole2;
  exports.default = _default2;
} });
var require_strongRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/strongRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var strongRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "strong" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = strongRole2;
  exports.default = _default2;
} });
var require_subscriptRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/subscriptRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var subscriptRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "sub" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = subscriptRole2;
  exports.default = _default2;
} });
var require_superscriptRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/superscriptRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var superscriptRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["prohibited"], prohibitedProps: ["aria-label", "aria-labelledby"], props: {}, relatedConcepts: [{ concept: { name: "sup" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = superscriptRole2;
  exports.default = _default2;
} });
var require_switchRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/switchRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var switchRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "button" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: { "aria-checked": null }, superClass: [["roletype", "widget", "input", "checkbox"]] }, _default2 = switchRole2;
  exports.default = _default2;
} });
var require_tabRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/tabRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tabRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: true, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-disabled": null, "aria-expanded": null, "aria-haspopup": null, "aria-posinset": null, "aria-setsize": null, "aria-selected": "false" }, relatedConcepts: [], requireContextRole: ["tablist"], requiredContextRole: ["tablist"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]] }, _default2 = tabRole2;
  exports.default = _default2;
} });
var require_tableRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/tableRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tableRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-colcount": null, "aria-rowcount": null }, relatedConcepts: [{ concept: { name: "table" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = tableRole2;
  exports.default = _default2;
} });
var require_tablistRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/tablistRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tablistRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-level": null, "aria-multiselectable": null, "aria-orientation": "horizontal" }, relatedConcepts: [{ module: "DAISY", concept: { name: "guide" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["tab"]], requiredProps: {}, superClass: [["roletype", "widget", "composite"]] }, _default2 = tablistRole2;
  exports.default = _default2;
} });
var require_tabpanelRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/tabpanelRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tabpanelRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = tabpanelRole2;
  exports.default = _default2;
} });
var require_termRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/termRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var termRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "dfn" }, module: "HTML" }, { concept: { name: "dt" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = termRole2;
  exports.default = _default2;
} });
var require_textboxRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/textboxRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var textboxRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-activedescendant": null, "aria-autocomplete": null, "aria-errormessage": null, "aria-haspopup": null, "aria-invalid": null, "aria-multiline": null, "aria-placeholder": null, "aria-readonly": null, "aria-required": null }, relatedConcepts: [{ concept: { attributes: [{ constraints: ["undefined"], name: "type" }, { constraints: ["undefined"], name: "list" }], constraints: ["the list attribute is not set"], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "email" }], constraints: ["the list attribute is not set"], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "tel" }], constraints: ["the list attribute is not set"], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "text" }], constraints: ["the list attribute is not set"], name: "input" }, module: "HTML" }, { concept: { attributes: [{ constraints: ["undefined"], name: "list" }, { name: "type", value: "url" }], constraints: ["the list attribute is not set"], name: "input" }, module: "HTML" }, { concept: { name: "input" }, module: "XForms" }, { concept: { name: "textarea" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "input"]] }, _default2 = textboxRole2;
  exports.default = _default2;
} });
var require_timeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/timeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var timeRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "time" }, module: "HTML" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = timeRole2;
  exports.default = _default2;
} });
var require_timerRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/timerRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var timerRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "status"]] }, _default2 = timerRole2;
  exports.default = _default2;
} });
var require_toolbarRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/toolbarRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var toolbarRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-orientation": "horizontal" }, relatedConcepts: [{ concept: { name: "menubar" }, module: "ARIA" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"]] }, _default2 = toolbarRole2;
  exports.default = _default2;
} });
var require_tooltipRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/tooltipRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var tooltipRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = tooltipRole2;
  exports.default = _default2;
} });
var require_treeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/treeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var treeRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null, "aria-multiselectable": null, "aria-required": null, "aria-orientation": "vertical" }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["treeitem", "group"], ["treeitem"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]] }, _default2 = treeRole2;
  exports.default = _default2;
} });
var require_treegridRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/treegridRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var treegridRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["row"], ["row", "rowgroup"]], requiredProps: {}, superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]] }, _default2 = treegridRole2;
  exports.default = _default2;
} });
var require_treeitemRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/literal/treeitemRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var treeitemRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-expanded": null, "aria-haspopup": null }, relatedConcepts: [], requireContextRole: ["group", "tree"], requiredContextRole: ["group", "tree"], requiredOwnedElements: [], requiredProps: { "aria-selected": null }, superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]] }, _default2 = treeitemRole2;
  exports.default = _default2;
} });
var require_ariaLiteralRoles2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/ariaLiteralRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _alertRole2 = _interopRequireDefault2(require_alertRole2()), _alertdialogRole2 = _interopRequireDefault2(require_alertdialogRole2()), _applicationRole2 = _interopRequireDefault2(require_applicationRole2()), _articleRole2 = _interopRequireDefault2(require_articleRole2()), _bannerRole2 = _interopRequireDefault2(require_bannerRole2()), _blockquoteRole2 = _interopRequireDefault2(require_blockquoteRole2()), _buttonRole2 = _interopRequireDefault2(require_buttonRole2()), _captionRole2 = _interopRequireDefault2(require_captionRole2()), _cellRole2 = _interopRequireDefault2(require_cellRole2()), _checkboxRole2 = _interopRequireDefault2(require_checkboxRole2()), _codeRole2 = _interopRequireDefault2(require_codeRole2()), _columnheaderRole2 = _interopRequireDefault2(require_columnheaderRole2()), _comboboxRole2 = _interopRequireDefault2(require_comboboxRole2()), _complementaryRole2 = _interopRequireDefault2(require_complementaryRole2()), _contentinfoRole2 = _interopRequireDefault2(require_contentinfoRole2()), _definitionRole2 = _interopRequireDefault2(require_definitionRole2()), _deletionRole2 = _interopRequireDefault2(require_deletionRole2()), _dialogRole2 = _interopRequireDefault2(require_dialogRole2()), _directoryRole2 = _interopRequireDefault2(require_directoryRole2()), _documentRole2 = _interopRequireDefault2(require_documentRole2()), _emphasisRole2 = _interopRequireDefault2(require_emphasisRole2()), _feedRole2 = _interopRequireDefault2(require_feedRole2()), _figureRole2 = _interopRequireDefault2(require_figureRole2()), _formRole2 = _interopRequireDefault2(require_formRole2()), _genericRole2 = _interopRequireDefault2(require_genericRole2()), _gridRole2 = _interopRequireDefault2(require_gridRole2()), _gridcellRole2 = _interopRequireDefault2(require_gridcellRole2()), _groupRole2 = _interopRequireDefault2(require_groupRole2()), _headingRole2 = _interopRequireDefault2(require_headingRole2()), _imgRole2 = _interopRequireDefault2(require_imgRole2()), _insertionRole2 = _interopRequireDefault2(require_insertionRole2()), _linkRole2 = _interopRequireDefault2(require_linkRole2()), _listRole2 = _interopRequireDefault2(require_listRole2()), _listboxRole2 = _interopRequireDefault2(require_listboxRole2()), _listitemRole2 = _interopRequireDefault2(require_listitemRole2()), _logRole2 = _interopRequireDefault2(require_logRole2()), _mainRole2 = _interopRequireDefault2(require_mainRole2()), _markRole2 = _interopRequireDefault2(require_markRole()), _marqueeRole2 = _interopRequireDefault2(require_marqueeRole2()), _mathRole2 = _interopRequireDefault2(require_mathRole2()), _menuRole2 = _interopRequireDefault2(require_menuRole2()), _menubarRole2 = _interopRequireDefault2(require_menubarRole2()), _menuitemRole2 = _interopRequireDefault2(require_menuitemRole2()), _menuitemcheckboxRole2 = _interopRequireDefault2(require_menuitemcheckboxRole2()), _menuitemradioRole2 = _interopRequireDefault2(require_menuitemradioRole2()), _meterRole2 = _interopRequireDefault2(require_meterRole2()), _navigationRole2 = _interopRequireDefault2(require_navigationRole2()), _noneRole2 = _interopRequireDefault2(require_noneRole2()), _noteRole2 = _interopRequireDefault2(require_noteRole2()), _optionRole2 = _interopRequireDefault2(require_optionRole2()), _paragraphRole2 = _interopRequireDefault2(require_paragraphRole2()), _presentationRole2 = _interopRequireDefault2(require_presentationRole2()), _progressbarRole2 = _interopRequireDefault2(require_progressbarRole2()), _radioRole2 = _interopRequireDefault2(require_radioRole2()), _radiogroupRole2 = _interopRequireDefault2(require_radiogroupRole2()), _regionRole2 = _interopRequireDefault2(require_regionRole2()), _rowRole2 = _interopRequireDefault2(require_rowRole2()), _rowgroupRole2 = _interopRequireDefault2(require_rowgroupRole2()), _rowheaderRole2 = _interopRequireDefault2(require_rowheaderRole2()), _scrollbarRole2 = _interopRequireDefault2(require_scrollbarRole2()), _searchRole2 = _interopRequireDefault2(require_searchRole2()), _searchboxRole2 = _interopRequireDefault2(require_searchboxRole2()), _separatorRole2 = _interopRequireDefault2(require_separatorRole2()), _sliderRole2 = _interopRequireDefault2(require_sliderRole2()), _spinbuttonRole2 = _interopRequireDefault2(require_spinbuttonRole2()), _statusRole2 = _interopRequireDefault2(require_statusRole2()), _strongRole2 = _interopRequireDefault2(require_strongRole2()), _subscriptRole2 = _interopRequireDefault2(require_subscriptRole2()), _superscriptRole2 = _interopRequireDefault2(require_superscriptRole2()), _switchRole2 = _interopRequireDefault2(require_switchRole2()), _tabRole2 = _interopRequireDefault2(require_tabRole2()), _tableRole2 = _interopRequireDefault2(require_tableRole2()), _tablistRole2 = _interopRequireDefault2(require_tablistRole2()), _tabpanelRole2 = _interopRequireDefault2(require_tabpanelRole2()), _termRole2 = _interopRequireDefault2(require_termRole2()), _textboxRole2 = _interopRequireDefault2(require_textboxRole2()), _timeRole2 = _interopRequireDefault2(require_timeRole2()), _timerRole2 = _interopRequireDefault2(require_timerRole2()), _toolbarRole2 = _interopRequireDefault2(require_toolbarRole2()), _tooltipRole2 = _interopRequireDefault2(require_tooltipRole2()), _treeRole2 = _interopRequireDefault2(require_treeRole2()), _treegridRole2 = _interopRequireDefault2(require_treegridRole2()), _treeitemRole2 = _interopRequireDefault2(require_treeitemRole2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaLiteralRoles2 = [["alert", _alertRole2.default], ["alertdialog", _alertdialogRole2.default], ["application", _applicationRole2.default], ["article", _articleRole2.default], ["banner", _bannerRole2.default], ["blockquote", _blockquoteRole2.default], ["button", _buttonRole2.default], ["caption", _captionRole2.default], ["cell", _cellRole2.default], ["checkbox", _checkboxRole2.default], ["code", _codeRole2.default], ["columnheader", _columnheaderRole2.default], ["combobox", _comboboxRole2.default], ["complementary", _complementaryRole2.default], ["contentinfo", _contentinfoRole2.default], ["definition", _definitionRole2.default], ["deletion", _deletionRole2.default], ["dialog", _dialogRole2.default], ["directory", _directoryRole2.default], ["document", _documentRole2.default], ["emphasis", _emphasisRole2.default], ["feed", _feedRole2.default], ["figure", _figureRole2.default], ["form", _formRole2.default], ["generic", _genericRole2.default], ["grid", _gridRole2.default], ["gridcell", _gridcellRole2.default], ["group", _groupRole2.default], ["heading", _headingRole2.default], ["img", _imgRole2.default], ["insertion", _insertionRole2.default], ["link", _linkRole2.default], ["list", _listRole2.default], ["listbox", _listboxRole2.default], ["listitem", _listitemRole2.default], ["log", _logRole2.default], ["main", _mainRole2.default], ["mark", _markRole2.default], ["marquee", _marqueeRole2.default], ["math", _mathRole2.default], ["menu", _menuRole2.default], ["menubar", _menubarRole2.default], ["menuitem", _menuitemRole2.default], ["menuitemcheckbox", _menuitemcheckboxRole2.default], ["menuitemradio", _menuitemradioRole2.default], ["meter", _meterRole2.default], ["navigation", _navigationRole2.default], ["none", _noneRole2.default], ["note", _noteRole2.default], ["option", _optionRole2.default], ["paragraph", _paragraphRole2.default], ["presentation", _presentationRole2.default], ["progressbar", _progressbarRole2.default], ["radio", _radioRole2.default], ["radiogroup", _radiogroupRole2.default], ["region", _regionRole2.default], ["row", _rowRole2.default], ["rowgroup", _rowgroupRole2.default], ["rowheader", _rowheaderRole2.default], ["scrollbar", _scrollbarRole2.default], ["search", _searchRole2.default], ["searchbox", _searchboxRole2.default], ["separator", _separatorRole2.default], ["slider", _sliderRole2.default], ["spinbutton", _spinbuttonRole2.default], ["status", _statusRole2.default], ["strong", _strongRole2.default], ["subscript", _subscriptRole2.default], ["superscript", _superscriptRole2.default], ["switch", _switchRole2.default], ["tab", _tabRole2.default], ["table", _tableRole2.default], ["tablist", _tablistRole2.default], ["tabpanel", _tabpanelRole2.default], ["term", _termRole2.default], ["textbox", _textboxRole2.default], ["time", _timeRole2.default], ["timer", _timerRole2.default], ["toolbar", _toolbarRole2.default], ["tooltip", _tooltipRole2.default], ["tree", _treeRole2.default], ["treegrid", _treegridRole2.default], ["treeitem", _treeitemRole2.default]], _default2 = ariaLiteralRoles2;
  exports.default = _default2;
} });
var require_docAbstractRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docAbstractRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAbstractRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "abstract [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docAbstractRole2;
  exports.default = _default2;
} });
var require_docAcknowledgmentsRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docAcknowledgmentsRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAcknowledgmentsRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "acknowledgments [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docAcknowledgmentsRole2;
  exports.default = _default2;
} });
var require_docAfterwordRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docAfterwordRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAfterwordRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "afterword [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docAfterwordRole2;
  exports.default = _default2;
} });
var require_docAppendixRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docAppendixRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docAppendixRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "appendix [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docAppendixRole2;
  exports.default = _default2;
} });
var require_docBacklinkRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docBacklinkRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBacklinkRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "referrer [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docBacklinkRole2;
  exports.default = _default2;
} });
var require_docBiblioentryRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docBiblioentryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBiblioentryRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "EPUB biblioentry [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: ["doc-bibliography"], requiredContextRole: ["doc-bibliography"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "listitem"]] }, _default2 = docBiblioentryRole2;
  exports.default = _default2;
} });
var require_docBibliographyRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docBibliographyRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBibliographyRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "bibliography [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["doc-biblioentry"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docBibliographyRole2;
  exports.default = _default2;
} });
var require_docBibliorefRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docBibliorefRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docBibliorefRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "biblioref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docBibliorefRole2;
  exports.default = _default2;
} });
var require_docChapterRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docChapterRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docChapterRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "chapter [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docChapterRole2;
  exports.default = _default2;
} });
var require_docColophonRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docColophonRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docColophonRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "colophon [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docColophonRole2;
  exports.default = _default2;
} });
var require_docConclusionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docConclusionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docConclusionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "conclusion [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docConclusionRole2;
  exports.default = _default2;
} });
var require_docCoverRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docCoverRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docCoverRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "cover [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "img"]] }, _default2 = docCoverRole2;
  exports.default = _default2;
} });
var require_docCreditRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docCreditRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docCreditRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "credit [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docCreditRole2;
  exports.default = _default2;
} });
var require_docCreditsRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docCreditsRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docCreditsRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "credits [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docCreditsRole2;
  exports.default = _default2;
} });
var require_docDedicationRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docDedicationRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docDedicationRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "dedication [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docDedicationRole2;
  exports.default = _default2;
} });
var require_docEndnoteRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docEndnoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEndnoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "rearnote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: ["doc-endnotes"], requiredContextRole: ["doc-endnotes"], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "listitem"]] }, _default2 = docEndnoteRole2;
  exports.default = _default2;
} });
var require_docEndnotesRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docEndnotesRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEndnotesRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "rearnotes [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["doc-endnote"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docEndnotesRole2;
  exports.default = _default2;
} });
var require_docEpigraphRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docEpigraphRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEpigraphRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "epigraph [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docEpigraphRole2;
  exports.default = _default2;
} });
var require_docEpilogueRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docEpilogueRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docEpilogueRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "epilogue [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docEpilogueRole2;
  exports.default = _default2;
} });
var require_docErrataRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docErrataRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docErrataRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "errata [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docErrataRole2;
  exports.default = _default2;
} });
var require_docExampleRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docExampleRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docExampleRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docExampleRole2;
  exports.default = _default2;
} });
var require_docFootnoteRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docFootnoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docFootnoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "footnote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docFootnoteRole2;
  exports.default = _default2;
} });
var require_docForewordRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docForewordRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docForewordRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "foreword [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docForewordRole2;
  exports.default = _default2;
} });
var require_docGlossaryRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docGlossaryRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docGlossaryRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "glossary [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [["definition"], ["term"]], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docGlossaryRole2;
  exports.default = _default2;
} });
var require_docGlossrefRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docGlossrefRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docGlossrefRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "glossref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docGlossrefRole2;
  exports.default = _default2;
} });
var require_docIndexRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docIndexRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docIndexRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "index [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default2 = docIndexRole2;
  exports.default = _default2;
} });
var require_docIntroductionRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docIntroductionRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docIntroductionRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "introduction [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docIntroductionRole2;
  exports.default = _default2;
} });
var require_docNoterefRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docNoterefRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docNoterefRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "noteref [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "widget", "command", "link"]] }, _default2 = docNoterefRole2;
  exports.default = _default2;
} });
var require_docNoticeRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docNoticeRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docNoticeRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "notice [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "note"]] }, _default2 = docNoticeRole2;
  exports.default = _default2;
} });
var require_docPagebreakRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docPagebreakRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPagebreakRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "pagebreak [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "separator"]] }, _default2 = docPagebreakRole2;
  exports.default = _default2;
} });
var require_docPagelistRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docPagelistRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPagelistRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "page-list [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default2 = docPagelistRole2;
  exports.default = _default2;
} });
var require_docPartRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docPartRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPartRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "part [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docPartRole2;
  exports.default = _default2;
} });
var require_docPrefaceRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docPrefaceRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPrefaceRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "preface [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docPrefaceRole2;
  exports.default = _default2;
} });
var require_docPrologueRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docPrologueRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPrologueRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "prologue [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark"]] }, _default2 = docPrologueRole2;
  exports.default = _default2;
} });
var require_docPullquoteRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docPullquoteRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docPullquoteRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: {}, relatedConcepts: [{ concept: { name: "pullquote [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["none"]] }, _default2 = docPullquoteRole2;
  exports.default = _default2;
} });
var require_docQnaRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docQnaRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docQnaRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "qna [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section"]] }, _default2 = docQnaRole2;
  exports.default = _default2;
} });
var require_docSubtitleRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docSubtitleRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docSubtitleRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "subtitle [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "sectionhead"]] }, _default2 = docSubtitleRole2;
  exports.default = _default2;
} });
var require_docTipRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docTipRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docTipRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "help [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "note"]] }, _default2 = docTipRole2;
  exports.default = _default2;
} });
var require_docTocRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/dpub/docTocRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var docTocRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ concept: { name: "toc [EPUB-SSV]" }, module: "EPUB" }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "landmark", "navigation"]] }, _default2 = docTocRole2;
  exports.default = _default2;
} });
var require_ariaDpubRoles2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/ariaDpubRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _docAbstractRole2 = _interopRequireDefault2(require_docAbstractRole2()), _docAcknowledgmentsRole2 = _interopRequireDefault2(require_docAcknowledgmentsRole2()), _docAfterwordRole2 = _interopRequireDefault2(require_docAfterwordRole2()), _docAppendixRole2 = _interopRequireDefault2(require_docAppendixRole2()), _docBacklinkRole2 = _interopRequireDefault2(require_docBacklinkRole2()), _docBiblioentryRole2 = _interopRequireDefault2(require_docBiblioentryRole2()), _docBibliographyRole2 = _interopRequireDefault2(require_docBibliographyRole2()), _docBibliorefRole2 = _interopRequireDefault2(require_docBibliorefRole2()), _docChapterRole2 = _interopRequireDefault2(require_docChapterRole2()), _docColophonRole2 = _interopRequireDefault2(require_docColophonRole2()), _docConclusionRole2 = _interopRequireDefault2(require_docConclusionRole2()), _docCoverRole2 = _interopRequireDefault2(require_docCoverRole2()), _docCreditRole2 = _interopRequireDefault2(require_docCreditRole2()), _docCreditsRole2 = _interopRequireDefault2(require_docCreditsRole2()), _docDedicationRole2 = _interopRequireDefault2(require_docDedicationRole2()), _docEndnoteRole2 = _interopRequireDefault2(require_docEndnoteRole2()), _docEndnotesRole2 = _interopRequireDefault2(require_docEndnotesRole2()), _docEpigraphRole2 = _interopRequireDefault2(require_docEpigraphRole2()), _docEpilogueRole2 = _interopRequireDefault2(require_docEpilogueRole2()), _docErrataRole2 = _interopRequireDefault2(require_docErrataRole2()), _docExampleRole2 = _interopRequireDefault2(require_docExampleRole2()), _docFootnoteRole2 = _interopRequireDefault2(require_docFootnoteRole2()), _docForewordRole2 = _interopRequireDefault2(require_docForewordRole2()), _docGlossaryRole2 = _interopRequireDefault2(require_docGlossaryRole2()), _docGlossrefRole2 = _interopRequireDefault2(require_docGlossrefRole2()), _docIndexRole2 = _interopRequireDefault2(require_docIndexRole2()), _docIntroductionRole2 = _interopRequireDefault2(require_docIntroductionRole2()), _docNoterefRole2 = _interopRequireDefault2(require_docNoterefRole2()), _docNoticeRole2 = _interopRequireDefault2(require_docNoticeRole2()), _docPagebreakRole2 = _interopRequireDefault2(require_docPagebreakRole2()), _docPagelistRole2 = _interopRequireDefault2(require_docPagelistRole2()), _docPartRole2 = _interopRequireDefault2(require_docPartRole2()), _docPrefaceRole2 = _interopRequireDefault2(require_docPrefaceRole2()), _docPrologueRole2 = _interopRequireDefault2(require_docPrologueRole2()), _docPullquoteRole2 = _interopRequireDefault2(require_docPullquoteRole2()), _docQnaRole2 = _interopRequireDefault2(require_docQnaRole2()), _docSubtitleRole2 = _interopRequireDefault2(require_docSubtitleRole2()), _docTipRole2 = _interopRequireDefault2(require_docTipRole2()), _docTocRole2 = _interopRequireDefault2(require_docTocRole2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaDpubRoles2 = [["doc-abstract", _docAbstractRole2.default], ["doc-acknowledgments", _docAcknowledgmentsRole2.default], ["doc-afterword", _docAfterwordRole2.default], ["doc-appendix", _docAppendixRole2.default], ["doc-backlink", _docBacklinkRole2.default], ["doc-biblioentry", _docBiblioentryRole2.default], ["doc-bibliography", _docBibliographyRole2.default], ["doc-biblioref", _docBibliorefRole2.default], ["doc-chapter", _docChapterRole2.default], ["doc-colophon", _docColophonRole2.default], ["doc-conclusion", _docConclusionRole2.default], ["doc-cover", _docCoverRole2.default], ["doc-credit", _docCreditRole2.default], ["doc-credits", _docCreditsRole2.default], ["doc-dedication", _docDedicationRole2.default], ["doc-endnote", _docEndnoteRole2.default], ["doc-endnotes", _docEndnotesRole2.default], ["doc-epigraph", _docEpigraphRole2.default], ["doc-epilogue", _docEpilogueRole2.default], ["doc-errata", _docErrataRole2.default], ["doc-example", _docExampleRole2.default], ["doc-footnote", _docFootnoteRole2.default], ["doc-foreword", _docForewordRole2.default], ["doc-glossary", _docGlossaryRole2.default], ["doc-glossref", _docGlossrefRole2.default], ["doc-index", _docIndexRole2.default], ["doc-introduction", _docIntroductionRole2.default], ["doc-noteref", _docNoterefRole2.default], ["doc-notice", _docNoticeRole2.default], ["doc-pagebreak", _docPagebreakRole2.default], ["doc-pagelist", _docPagelistRole2.default], ["doc-part", _docPartRole2.default], ["doc-preface", _docPrefaceRole2.default], ["doc-prologue", _docPrologueRole2.default], ["doc-pullquote", _docPullquoteRole2.default], ["doc-qna", _docQnaRole2.default], ["doc-subtitle", _docSubtitleRole2.default], ["doc-tip", _docTipRole2.default], ["doc-toc", _docTocRole2.default]], _default2 = ariaDpubRoles2;
  exports.default = _default2;
} });
var require_graphicsDocumentRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/graphics/graphicsDocumentRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var graphicsDocumentRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: false, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ module: "GRAPHICS", concept: { name: "graphics-object" } }, { module: "ARIA", concept: { name: "img" } }, { module: "ARIA", concept: { name: "article" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "document"]] }, _default2 = graphicsDocumentRole2;
  exports.default = _default2;
} });
var require_graphicsObjectRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/graphics/graphicsObjectRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var graphicsObjectRole2 = { abstract: false, accessibleNameRequired: false, baseConcepts: [], childrenPresentational: false, nameFrom: ["author", "contents"], prohibitedProps: [], props: { "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [{ module: "GRAPHICS", concept: { name: "graphics-document" } }, { module: "ARIA", concept: { name: "group" } }, { module: "ARIA", concept: { name: "img" } }, { module: "GRAPHICS", concept: { name: "graphics-symbol" } }], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "group"]] }, _default2 = graphicsObjectRole2;
  exports.default = _default2;
} });
var require_graphicsSymbolRole2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/graphics/graphicsSymbolRole.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var graphicsSymbolRole2 = { abstract: false, accessibleNameRequired: true, baseConcepts: [], childrenPresentational: true, nameFrom: ["author"], prohibitedProps: [], props: { "aria-disabled": null, "aria-errormessage": null, "aria-expanded": null, "aria-haspopup": null, "aria-invalid": null }, relatedConcepts: [], requireContextRole: [], requiredContextRole: [], requiredOwnedElements: [], requiredProps: {}, superClass: [["roletype", "structure", "section", "img"]] }, _default2 = graphicsSymbolRole2;
  exports.default = _default2;
} });
var require_ariaGraphicsRoles2 = __commonJS({ "../../node_modules/aria-query/lib/etc/roles/ariaGraphicsRoles.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _graphicsDocumentRole2 = _interopRequireDefault2(require_graphicsDocumentRole2()), _graphicsObjectRole2 = _interopRequireDefault2(require_graphicsObjectRole2()), _graphicsSymbolRole2 = _interopRequireDefault2(require_graphicsSymbolRole2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ariaGraphicsRoles2 = [["graphics-document", _graphicsDocumentRole2.default], ["graphics-object", _graphicsObjectRole2.default], ["graphics-symbol", _graphicsSymbolRole2.default]], _default2 = ariaGraphicsRoles2;
  exports.default = _default2;
} });
var require_rolesMap2 = __commonJS({ "../../node_modules/aria-query/lib/rolesMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _ariaAbstractRoles2 = _interopRequireDefault2(require_ariaAbstractRoles2()), _ariaLiteralRoles2 = _interopRequireDefault2(require_ariaLiteralRoles2()), _ariaDpubRoles2 = _interopRequireDefault2(require_ariaDpubRoles2()), _ariaGraphicsRoles2 = _interopRequireDefault2(require_ariaGraphicsRoles2()), _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _defineProperty5(obj, key, value) {
    return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i2 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i2 >= o.length ? { done: true } : { done: false, value: o[i2++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _slicedToArray2(arr, i2) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
    return arr2;
  }
  function _iterableToArrayLimit2(arr, i2) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i2 && _arr.length === i2)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var roles3 = [].concat(_ariaAbstractRoles2.default, _ariaLiteralRoles2.default, _ariaDpubRoles2.default, _ariaGraphicsRoles2.default);
  roles3.forEach(function(_ref) {
    var _ref2 = _slicedToArray2(_ref, 2), roleDefinition = _ref2[1], _iterator = _createForOfIteratorHelper2(roleDefinition.superClass), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var superClassIter = _step.value, _iterator2 = _createForOfIteratorHelper2(superClassIter), _step2;
        try {
          var _loop = function() {
            var superClassName = _step2.value, superClassRoleTuple = roles3.find(function(_ref3) {
              var _ref4 = _slicedToArray2(_ref3, 1), name = _ref4[0];
              return name === superClassName;
            });
            if (superClassRoleTuple) for (var superClassDefinition = superClassRoleTuple[1], _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
              var prop = _Object$keys[_i2];
              Object.prototype.hasOwnProperty.call(roleDefinition.props, prop) || Object.assign(roleDefinition.props, _defineProperty5({}, prop, superClassDefinition.props[prop]));
            }
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) _loop();
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  var rolesMap2 = { entries: function() {
    return roles3;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator3 = _createForOfIteratorHelper2(roles3), _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
        var _step3$value = _slicedToArray2(_step3.value, 2), key = _step3$value[0], values6 = _step3$value[1];
        fn3.call(thisArg, values6, key, roles3);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }, get: function(key) {
    var item = roles3.find(function(tuple) {
      return tuple[0] === key;
    });
    return item && item[1];
  }, has: function(key) {
    return !!rolesMap2.get(key);
  }, keys: function() {
    return roles3.map(function(_ref5) {
      var _ref6 = _slicedToArray2(_ref5, 1), key = _ref6[0];
      return key;
    });
  }, values: function() {
    return roles3.map(function(_ref7) {
      var _ref8 = _slicedToArray2(_ref7, 2), values22 = _ref8[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(rolesMap2, rolesMap2.entries());
  exports.default = _default2;
} });
var require_lite = __commonJS({ "../../node_modules/dequal/lite/index.js"(exports) {
  var has7 = Object.prototype.hasOwnProperty;
  function dequal2(foo, bar) {
    var ctor, len;
    if (foo === bar) return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
      if (ctor === Date) return foo.getTime() === bar.getTime();
      if (ctor === RegExp) return foo.toString() === bar.toString();
      if (ctor === Array) {
        if ((len = foo.length) === bar.length) for (; len-- && dequal2(foo[len], bar[len]); ) ;
        return len === -1;
      }
      if (!ctor || typeof foo == "object") {
        len = 0;
        for (ctor in foo) if (has7.call(foo, ctor) && ++len && !has7.call(bar, ctor) || !(ctor in bar) || !dequal2(foo[ctor], bar[ctor])) return false;
        return Object.keys(bar).length === len;
      }
    }
    return foo !== foo && bar !== bar;
  }
  exports.dequal = dequal2;
} });
var require_elementRoleMap2 = __commonJS({ "../../node_modules/aria-query/lib/elementRoleMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _lite2 = require_lite(), _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator2()), _rolesMap2 = _interopRequireDefault2(require_rolesMap2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i22) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i22) || _unsupportedIterableToArray2(arr, i22) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i22) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i22 && _arr.length === i22)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i22 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i22 >= o.length ? { done: true } : { done: false, value: o[i22++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i22 = 0, arr2 = new Array(len); i22 < len; i22++) arr2[i22] = arr[i22];
    return arr2;
  }
  var elementRoles3 = [], keys22 = _rolesMap2.default.keys();
  for (i2 = 0; i2 < keys22.length; i2++) if (key = keys22[i2], role = _rolesMap2.default.get(key), role) for (concepts = [].concat(role.baseConcepts, role.relatedConcepts), k2 = 0; k2 < concepts.length; k2++) relation = concepts[k2], relation.module === "HTML" && function() {
    var concept = relation.concept;
    if (concept) {
      var elementRoleRelation = elementRoles3.find(function(relation2) {
        return (0, _lite2.dequal)(relation2, concept);
      }), roles3;
      elementRoleRelation ? roles3 = elementRoleRelation[1] : roles3 = [];
      for (var isUnique = true, _i2 = 0; _i2 < roles3.length; _i2++) if (roles3[_i2] === key) {
        isUnique = false;
        break;
      }
      isUnique && roles3.push(key), elementRoles3.push([concept, roles3]);
    }
  }();
  var key, role, concepts, relation, k2, i2, elementRoleMap2 = { entries: function() {
    return elementRoles3;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(elementRoles3), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), _key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, _key, elementRoles3);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key2) {
    var item = elementRoles3.find(function(tuple) {
      return key2.name === tuple[0].name && (0, _lite2.dequal)(key2.attributes, tuple[0].attributes);
    });
    return item && item[1];
  }, has: function(key2) {
    return !!elementRoleMap2.get(key2);
  }, keys: function() {
    return elementRoles3.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key2 = _ref2[0];
      return key2;
    });
  }, values: function() {
    return elementRoles3.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(elementRoleMap2, elementRoleMap2.entries());
  exports.default = _default2;
} });
var require_roleElementMap2 = __commonJS({ "../../node_modules/aria-query/lib/roleElementMap.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = void 0;
  var _iterationDecorator2 = _interopRequireDefault2(require_iterationDecorator2()), _rolesMap2 = _interopRequireDefault2(require_rolesMap2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _slicedToArray2(arr, i22) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i22) || _unsupportedIterableToArray2(arr, i22) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function _iterableToArrayLimit2(arr, i22) {
    var _i2 = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i2 != null) {
      var _arr = [], _n2 = true, _d2 = false, _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done) && (_arr.push(_s2.value), !(i22 && _arr.length === i22)); _n2 = true) ;
      } catch (err) {
        _d2 = true, _e2 = err;
      } finally {
        try {
          !_n2 && _i2.return != null && _i2.return();
        } finally {
          if (_d2) throw _e2;
        }
      }
      return _arr;
    }
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it2 = typeof Symbol < "u" && o[Symbol.iterator] || o["@@iterator"];
    if (!it2) {
      if (Array.isArray(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike) {
        it2 && (o = it2);
        var i22 = 0, F2 = function() {
        };
        return { s: F2, n: function() {
          return i22 >= o.length ? { done: true } : { done: false, value: o[i22++] };
        }, e: function(_e2) {
          throw _e2;
        }, f: F2 };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var normalCompletion = true, didErr = false, err;
    return { s: function() {
      it2 = it2.call(o);
    }, n: function() {
      var step = it2.next();
      return normalCompletion = step.done, step;
    }, e: function(_e3) {
      didErr = true, err = _e3;
    }, f: function() {
      try {
        !normalCompletion && it2.return != null && it2.return();
      } finally {
        if (didErr) throw err;
      }
    } };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (o) {
      if (typeof o == "string") return _arrayLikeToArray2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor && (n2 = o.constructor.name), n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray2(o, minLen);
    }
  }
  function _arrayLikeToArray2(arr, len) {
    (len == null || len > arr.length) && (len = arr.length);
    for (var i22 = 0, arr2 = new Array(len); i22 < len; i22++) arr2[i22] = arr[i22];
    return arr2;
  }
  var roleElement2 = [], keys22 = _rolesMap2.default.keys();
  for (i2 = 0; i2 < keys22.length; i2++) if (key = keys22[i2], role = _rolesMap2.default.get(key), relationConcepts = [], role) {
    for (concepts = [].concat(role.baseConcepts, role.relatedConcepts), k2 = 0; k2 < concepts.length; k2++) relation = concepts[k2], relation.module === "HTML" && (concept = relation.concept, concept != null && relationConcepts.push(concept));
    relationConcepts.length > 0 && roleElement2.push([key, relationConcepts]);
  }
  var key, role, relationConcepts, concepts, relation, concept, k2, i2, roleElementMap2 = { entries: function() {
    return roleElement2;
  }, forEach: function(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _iterator = _createForOfIteratorHelper2(roleElement2), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray2(_step.value, 2), _key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, _key, roleElement2);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, get: function(key2) {
    var item = roleElement2.find(function(tuple) {
      return tuple[0] === key2;
    });
    return item && item[1];
  }, has: function(key2) {
    return !!roleElementMap2.get(key2);
  }, keys: function() {
    return roleElement2.map(function(_ref) {
      var _ref2 = _slicedToArray2(_ref, 1), key2 = _ref2[0];
      return key2;
    });
  }, values: function() {
    return roleElement2.map(function(_ref3) {
      var _ref4 = _slicedToArray2(_ref3, 2), values22 = _ref4[1];
      return values22;
    });
  } }, _default2 = (0, _iterationDecorator2.default)(roleElementMap2, roleElementMap2.entries());
  exports.default = _default2;
} });
var require_lib2 = __commonJS({ "../../node_modules/aria-query/lib/index.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.roles = exports.roleElements = exports.elementRoles = exports.dom = exports.aria = void 0;
  var _ariaPropsMap2 = _interopRequireDefault2(require_ariaPropsMap2()), _domMap2 = _interopRequireDefault2(require_domMap2()), _rolesMap2 = _interopRequireDefault2(require_rolesMap2()), _elementRoleMap2 = _interopRequireDefault2(require_elementRoleMap2()), _roleElementMap2 = _interopRequireDefault2(require_roleElementMap2());
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var aria2 = _ariaPropsMap2.default;
  exports.aria = aria2;
  var dom2 = _domMap2.default;
  exports.dom = dom2;
  var roles3 = _rolesMap2.default;
  exports.roles = roles3;
  var elementRoles3 = _elementRoleMap2.default;
  exports.elementRoles = elementRoles3;
  var roleElements2 = _roleElementMap2.default;
  exports.roleElements = roleElements2;
} });
var require_lz_string = __commonJS({ "../../node_modules/lz-string/libs/lz-string.js"(exports, module2) {
  var LZString = function() {
    var f2 = String.fromCharCode, keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$", baseReverseDic = {};
    function getBaseValue(alphabet, character) {
      if (!baseReverseDic[alphabet]) {
        baseReverseDic[alphabet] = {};
        for (var i2 = 0; i2 < alphabet.length; i2++) baseReverseDic[alphabet][alphabet.charAt(i2)] = i2;
      }
      return baseReverseDic[alphabet][character];
    }
    var LZString2 = { compressToBase64: function(input2) {
      if (input2 == null) return "";
      var res = LZString2._compress(input2, 6, function(a) {
        return keyStrBase64.charAt(a);
      });
      switch (res.length % 4) {
        default:
        case 0:
          return res;
        case 1:
          return res + "===";
        case 2:
          return res + "==";
        case 3:
          return res + "=";
      }
    }, decompressFromBase64: function(input2) {
      return input2 == null ? "" : input2 == "" ? null : LZString2._decompress(input2.length, 32, function(index) {
        return getBaseValue(keyStrBase64, input2.charAt(index));
      });
    }, compressToUTF16: function(input2) {
      return input2 == null ? "" : LZString2._compress(input2, 15, function(a) {
        return f2(a + 32);
      }) + " ";
    }, decompressFromUTF16: function(compressed) {
      return compressed == null ? "" : compressed == "" ? null : LZString2._decompress(compressed.length, 16384, function(index) {
        return compressed.charCodeAt(index) - 32;
      });
    }, compressToUint8Array: function(uncompressed) {
      for (var compressed = LZString2.compress(uncompressed), buf = new Uint8Array(compressed.length * 2), i2 = 0, TotalLen = compressed.length; i2 < TotalLen; i2++) {
        var current_value = compressed.charCodeAt(i2);
        buf[i2 * 2] = current_value >>> 8, buf[i2 * 2 + 1] = current_value % 256;
      }
      return buf;
    }, decompressFromUint8Array: function(compressed) {
      if (compressed == null) return LZString2.decompress(compressed);
      for (var buf = new Array(compressed.length / 2), i2 = 0, TotalLen = buf.length; i2 < TotalLen; i2++) buf[i2] = compressed[i2 * 2] * 256 + compressed[i2 * 2 + 1];
      var result = [];
      return buf.forEach(function(c2) {
        result.push(f2(c2));
      }), LZString2.decompress(result.join(""));
    }, compressToEncodedURIComponent: function(input2) {
      return input2 == null ? "" : LZString2._compress(input2, 6, function(a) {
        return keyStrUriSafe.charAt(a);
      });
    }, decompressFromEncodedURIComponent: function(input2) {
      return input2 == null ? "" : input2 == "" ? null : (input2 = input2.replace(/ /g, "+"), LZString2._decompress(input2.length, 32, function(index) {
        return getBaseValue(keyStrUriSafe, input2.charAt(index));
      }));
    }, compress: function(uncompressed) {
      return LZString2._compress(uncompressed, 16, function(a) {
        return f2(a);
      });
    }, _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
      if (uncompressed == null) return "";
      var i2, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
      for (ii = 0; ii < uncompressed.length; ii += 1) if (context_c = uncompressed.charAt(ii), Object.prototype.hasOwnProperty.call(context_dictionary, context_c) || (context_dictionary[context_c] = context_dictSize++, context_dictionaryToCreate[context_c] = true), context_wc = context_w + context_c, Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) context_w = context_wc;
      else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
          if (context_w.charCodeAt(0) < 256) {
            for (i2 = 0; i2 < context_numBits; i2++) context_data_val = context_data_val << 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++;
            for (value = context_w.charCodeAt(0), i2 = 0; i2 < 8; i2++) context_data_val = context_data_val << 1 | value & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = value >> 1;
          } else {
            for (value = 1, i2 = 0; i2 < context_numBits; i2++) context_data_val = context_data_val << 1 | value, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = 0;
            for (value = context_w.charCodeAt(0), i2 = 0; i2 < 16; i2++) context_data_val = context_data_val << 1 | value & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = value >> 1;
          }
          context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++), delete context_dictionaryToCreate[context_w];
        } else for (value = context_dictionary[context_w], i2 = 0; i2 < context_numBits; i2++) context_data_val = context_data_val << 1 | value & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = value >> 1;
        context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++), context_dictionary[context_wc] = context_dictSize++, context_w = String(context_c);
      }
      if (context_w !== "") {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
          if (context_w.charCodeAt(0) < 256) {
            for (i2 = 0; i2 < context_numBits; i2++) context_data_val = context_data_val << 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++;
            for (value = context_w.charCodeAt(0), i2 = 0; i2 < 8; i2++) context_data_val = context_data_val << 1 | value & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = value >> 1;
          } else {
            for (value = 1, i2 = 0; i2 < context_numBits; i2++) context_data_val = context_data_val << 1 | value, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = 0;
            for (value = context_w.charCodeAt(0), i2 = 0; i2 < 16; i2++) context_data_val = context_data_val << 1 | value & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = value >> 1;
          }
          context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++), delete context_dictionaryToCreate[context_w];
        } else for (value = context_dictionary[context_w], i2 = 0; i2 < context_numBits; i2++) context_data_val = context_data_val << 1 | value & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = value >> 1;
        context_enlargeIn--, context_enlargeIn == 0 && (context_enlargeIn = Math.pow(2, context_numBits), context_numBits++);
      }
      for (value = 2, i2 = 0; i2 < context_numBits; i2++) context_data_val = context_data_val << 1 | value & 1, context_data_position == bitsPerChar - 1 ? (context_data_position = 0, context_data.push(getCharFromInt(context_data_val)), context_data_val = 0) : context_data_position++, value = value >> 1;
      for (; ; ) if (context_data_val = context_data_val << 1, context_data_position == bitsPerChar - 1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      } else context_data_position++;
      return context_data.join("");
    }, decompress: function(compressed) {
      return compressed == null ? "" : compressed == "" ? null : LZString2._decompress(compressed.length, 32768, function(index) {
        return compressed.charCodeAt(index);
      });
    }, _decompress: function(length, resetValue, getNextValue) {
      var dictionary = [], enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i2, w2, bits, resb, maxpower, power, c2, data = { val: getNextValue(0), position: resetValue, index: 1 };
      for (i2 = 0; i2 < 3; i2 += 1) dictionary[i2] = i2;
      for (bits = 0, maxpower = Math.pow(2, 2), power = 1; power != maxpower; ) resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
      switch (bits) {
        case 0:
          for (bits = 0, maxpower = Math.pow(2, 8), power = 1; power != maxpower; ) resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
          c2 = f2(bits);
          break;
        case 1:
          for (bits = 0, maxpower = Math.pow(2, 16), power = 1; power != maxpower; ) resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
          c2 = f2(bits);
          break;
        case 2:
          return "";
      }
      for (dictionary[3] = c2, w2 = c2, result.push(c2); ; ) {
        if (data.index > length) return "";
        for (bits = 0, maxpower = Math.pow(2, numBits), power = 1; power != maxpower; ) resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
        switch (c2 = bits) {
          case 0:
            for (bits = 0, maxpower = Math.pow(2, 8), power = 1; power != maxpower; ) resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
            dictionary[dictSize++] = f2(bits), c2 = dictSize - 1, enlargeIn--;
            break;
          case 1:
            for (bits = 0, maxpower = Math.pow(2, 16), power = 1; power != maxpower; ) resb = data.val & data.position, data.position >>= 1, data.position == 0 && (data.position = resetValue, data.val = getNextValue(data.index++)), bits |= (resb > 0 ? 1 : 0) * power, power <<= 1;
            dictionary[dictSize++] = f2(bits), c2 = dictSize - 1, enlargeIn--;
            break;
          case 2:
            return result.join("");
        }
        if (enlargeIn == 0 && (enlargeIn = Math.pow(2, numBits), numBits++), dictionary[c2]) entry = dictionary[c2];
        else if (c2 === dictSize) entry = w2 + w2.charAt(0);
        else return null;
        result.push(entry), dictionary[dictSize++] = w2 + entry.charAt(0), enlargeIn--, w2 = entry, enlargeIn == 0 && (enlargeIn = Math.pow(2, numBits), numBits++);
      }
    } };
    return LZString2;
  }();
  typeof define == "function" && define.amd ? define(function() {
    return LZString;
  }) : typeof module2 < "u" && module2 != null ? module2.exports = LZString : typeof angular < "u" && angular != null && angular.module("LZString", []).factory("LZString", function() {
    return LZString;
  });
} });
var import_index = __toESM(require_chai2(), 1), expect = import_index.default.expect;
import_index.default.version;
import_index.default.Assertion;
import_index.default.AssertionError;
var util = import_index.default.util;
import_index.default.config;
var use = import_index.default.use;
import_index.default.should;
var assert = import_index.default.assert;
import_index.default.core;
var chai_default = import_index.default;
var scope = (() => {
  let win;
  return typeof window < "u" ? win = window : typeof globalThis < "u" ? win = globalThis : typeof global < "u" ? win = global : typeof self < "u" ? win = self : win = {}, win;
})();
function assertTypes(value, name, types) {
  let receivedType = typeof value;
  if (!types.includes(receivedType)) throw new TypeError(`${name} value must be ${types.join(" or ")}, received "${receivedType}"`);
}
function isObject(item) {
  return item != null && typeof item == "object" && !Array.isArray(item);
}
function isFinalObj(obj) {
  return obj === Object.prototype || obj === Function.prototype || obj === RegExp.prototype;
}
function getType$1(value) {
  return Object.prototype.toString.apply(value).slice(8, -1);
}
function collectOwnProperties(obj, collector) {
  let collect = typeof collector == "function" ? collector : (key) => collector.add(key);
  Object.getOwnPropertyNames(obj).forEach(collect), Object.getOwnPropertySymbols(obj).forEach(collect);
}
function getOwnProperties(obj) {
  let ownProps = /* @__PURE__ */ new Set();
  return isFinalObj(obj) ? [] : (collectOwnProperties(obj, ownProps), Array.from(ownProps));
}
var defaultCloneOptions = { forceWritable: false };
function deepClone(val, options = defaultCloneOptions) {
  return clone(val, /* @__PURE__ */ new WeakMap(), options);
}
function clone(val, seen, options = defaultCloneOptions) {
  let k2, out;
  if (seen.has(val)) return seen.get(val);
  if (Array.isArray(val)) {
    for (out = Array(k2 = val.length), seen.set(val, out); k2--; ) out[k2] = clone(val[k2], seen, options);
    return out;
  }
  if (Object.prototype.toString.call(val) === "[object Object]") {
    out = Object.create(Object.getPrototypeOf(val)), seen.set(val, out);
    let props = getOwnProperties(val);
    for (let k22 of props) {
      let descriptor = Object.getOwnPropertyDescriptor(val, k22);
      if (!descriptor) continue;
      let cloned = clone(val[k22], seen, options);
      options.forceWritable ? Object.defineProperty(out, k22, { enumerable: descriptor.enumerable, configurable: true, writable: true, value: cloned }) : "get" in descriptor ? Object.defineProperty(out, k22, { ...descriptor, get() {
        return cloned;
      } }) : Object.defineProperty(out, k22, { ...descriptor, value: cloned });
    }
    return out;
  }
  return val;
}
var import_pretty_format = __toESM(require_build(), 1), loupe = __toESM(require_loupe(), 1), { AsymmetricMatcher: AsymmetricMatcher$1, DOMCollection: DOMCollection$2, DOMElement: DOMElement$1, Immutable: Immutable$1, ReactElement: ReactElement$1, ReactTestComponent: ReactTestComponent$1 } = import_pretty_format.plugins, PLUGINS = [ReactTestComponent$1, ReactElement$1, DOMElement$1, DOMCollection$2, Immutable$1, AsymmetricMatcher$1];
function stringify(object, maxDepth = 10, { maxLength, ...options } = {}) {
  let MAX_LENGTH = maxLength ?? 1e4, result;
  try {
    result = (0, import_pretty_format.format)(object, { maxDepth, escapeString: false, plugins: PLUGINS, ...options });
  } catch {
    result = (0, import_pretty_format.format)(object, { callToJSON: false, maxDepth, escapeString: false, plugins: PLUGINS, ...options });
  }
  return result.length >= MAX_LENGTH && maxDepth > 1 ? stringify(object, Math.floor(maxDepth / 2)) : result;
}
var formatRegExp = /%[sdjifoOcj%]/g;
function format$1(...args) {
  if (typeof args[0] != "string") {
    let objects = [];
    for (let i22 = 0; i22 < args.length; i22++) objects.push(inspect2(args[i22], { depth: 0, colors: false, compact: 3 }));
    return objects.join(" ");
  }
  let len = args.length, i2 = 1, template = args[0], str = String(template).replace(formatRegExp, (x2) => {
    if (x2 === "%%") return "%";
    if (i2 >= len) return x2;
    switch (x2) {
      case "%s": {
        let value = args[i2++];
        return typeof value == "bigint" ? `${value.toString()}n` : typeof value == "number" && value === 0 && 1 / value < 0 ? "-0" : typeof value == "object" && value !== null ? inspect2(value, { depth: 0, colors: false, compact: 3 }) : String(value);
      }
      case "%d": {
        let value = args[i2++];
        return typeof value == "bigint" ? `${value.toString()}n` : Number(value).toString();
      }
      case "%i": {
        let value = args[i2++];
        return typeof value == "bigint" ? `${value.toString()}n` : Number.parseInt(String(value)).toString();
      }
      case "%f":
        return Number.parseFloat(String(args[i2++])).toString();
      case "%o":
        return inspect2(args[i2++], { showHidden: true, showProxy: true });
      case "%O":
        return inspect2(args[i2++]);
      case "%c":
        return i2++, "";
      case "%j":
        try {
          return JSON.stringify(args[i2++]);
        } catch (err) {
          let m2 = err.message;
          if (m2.includes("circular structure") || m2.includes("cyclic structures") || m2.includes("cyclic object")) return "[Circular]";
          throw err;
        }
      default:
        return x2;
    }
  });
  for (let x2 = args[i2]; i2 < len; x2 = args[++i2]) x2 === null || typeof x2 != "object" ? str += ` ${x2}` : str += ` ${inspect2(x2)}`;
  return str;
}
function inspect2(obj, options = {}) {
  return options.truncate === 0 && (options.truncate = Number.POSITIVE_INFINITY), loupe.inspect(obj, options);
}
var SAFE_COLORS_SYMBOL = Symbol("vitest:SAFE_COLORS"), colorsMap = { bold: ["\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"], dim: ["\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"], italic: ["\x1B[3m", "\x1B[23m"], underline: ["\x1B[4m", "\x1B[24m"], inverse: ["\x1B[7m", "\x1B[27m"], hidden: ["\x1B[8m", "\x1B[28m"], strikethrough: ["\x1B[9m", "\x1B[29m"], black: ["\x1B[30m", "\x1B[39m"], red: ["\x1B[31m", "\x1B[39m"], green: ["\x1B[32m", "\x1B[39m"], yellow: ["\x1B[33m", "\x1B[39m"], blue: ["\x1B[34m", "\x1B[39m"], magenta: ["\x1B[35m", "\x1B[39m"], cyan: ["\x1B[36m", "\x1B[39m"], white: ["\x1B[37m", "\x1B[39m"], gray: ["\x1B[90m", "\x1B[39m"], bgBlack: ["\x1B[40m", "\x1B[49m"], bgRed: ["\x1B[41m", "\x1B[49m"], bgGreen: ["\x1B[42m", "\x1B[49m"], bgYellow: ["\x1B[43m", "\x1B[49m"], bgBlue: ["\x1B[44m", "\x1B[49m"], bgMagenta: ["\x1B[45m", "\x1B[49m"], bgCyan: ["\x1B[46m", "\x1B[49m"], bgWhite: ["\x1B[47m", "\x1B[49m"] }, colorsEntries = Object.entries(colorsMap);
function string(str) {
  return String(str);
}
string.open = "";
string.close = "";
var defaultColors = colorsEntries.reduce((acc, [key]) => (acc[key] = string, acc), { isColorSupported: false });
function getColors() {
  return globalThis[SAFE_COLORS_SYMBOL] || defaultColors;
}
__toESM(require_build(), 1);
__toESM(require_loupe(), 1);
var LineTerminatorSequence;
LineTerminatorSequence = /\r?\n|[\r\u2028\u2029]/y;
RegExp(LineTerminatorSequence.source);
var reservedWords = { keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"], strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"] };
new Set(reservedWords.keyword);
new Set(reservedWords.strict);
var import_pretty_format3 = __toESM(require_build(), 1), diff$1 = __toESM(require_build2(), 1);
function getType2(value) {
  if (value === void 0) return "undefined";
  if (value === null) return "null";
  if (Array.isArray(value)) return "array";
  if (typeof value == "boolean") return "boolean";
  if (typeof value == "function") return "function";
  if (typeof value == "number") return "number";
  if (typeof value == "string") return "string";
  if (typeof value == "bigint") return "bigint";
  if (typeof value == "object") {
    if (value != null) {
      if (value.constructor === RegExp) return "regexp";
      if (value.constructor === Map) return "map";
      if (value.constructor === Set) return "set";
      if (value.constructor === Date) return "date";
    }
    return "object";
  } else if (typeof value == "symbol") return "symbol";
  throw new Error(`value of unknown type: ${value}`);
}
var DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0, Diff = class {
  constructor(op, text) {
    __publicField(this, 0);
    __publicField(this, 1);
    this[0] = op, this[1] = text;
  }
};
var NO_DIFF_MESSAGE = "Compared values have no visual difference.", SIMILAR_MESSAGE = "Compared values serialize to the same structure.\nPrinting internal object structure without calling `toJSON` instead.";
function formatTrailingSpaces(line, trailingSpaceFormatter) {
  return line.replace(/\s+$/, (match) => trailingSpaceFormatter(match));
}
function printDiffLine(line, isFirstOrLast, color, indicator, trailingSpaceFormatter, emptyFirstOrLastLinePlaceholder) {
  return line.length !== 0 ? color(`${indicator} ${formatTrailingSpaces(line, trailingSpaceFormatter)}`) : indicator !== " " ? color(indicator) : isFirstOrLast && emptyFirstOrLastLinePlaceholder.length !== 0 ? color(`${indicator} ${emptyFirstOrLastLinePlaceholder}`) : "";
}
function printDeleteLine(line, isFirstOrLast, { aColor, aIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
  return printDiffLine(line, isFirstOrLast, aColor, aIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
}
function printInsertLine(line, isFirstOrLast, { bColor, bIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
  return printDiffLine(line, isFirstOrLast, bColor, bIndicator, changeLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
}
function printCommonLine(line, isFirstOrLast, { commonColor, commonIndicator, commonLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder }) {
  return printDiffLine(line, isFirstOrLast, commonColor, commonIndicator, commonLineTrailingSpaceColor, emptyFirstOrLastLinePlaceholder);
}
function createPatchMark(aStart, aEnd, bStart, bEnd, { patchColor }) {
  return patchColor(`@@ -${aStart + 1},${aEnd - aStart} +${bStart + 1},${bEnd - bStart} @@`);
}
function joinAlignedDiffsNoExpand(diffs, options) {
  let iLength = diffs.length, nContextLines = options.contextLines, nContextLines2 = nContextLines + nContextLines, jLength = iLength, hasExcessAtStartOrEnd = false, nExcessesBetweenChanges = 0, i2 = 0;
  for (; i2 !== iLength; ) {
    let iStart = i2;
    for (; i2 !== iLength && diffs[i2][0] === DIFF_EQUAL; ) i2 += 1;
    if (iStart !== i2) if (iStart === 0) i2 > nContextLines && (jLength -= i2 - nContextLines, hasExcessAtStartOrEnd = true);
    else if (i2 === iLength) {
      let n2 = i2 - iStart;
      n2 > nContextLines && (jLength -= n2 - nContextLines, hasExcessAtStartOrEnd = true);
    } else {
      let n2 = i2 - iStart;
      n2 > nContextLines2 && (jLength -= n2 - nContextLines2, nExcessesBetweenChanges += 1);
    }
    for (; i2 !== iLength && diffs[i2][0] !== DIFF_EQUAL; ) i2 += 1;
  }
  let hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;
  nExcessesBetweenChanges !== 0 ? jLength += nExcessesBetweenChanges + 1 : hasExcessAtStartOrEnd && (jLength += 1);
  let jLast = jLength - 1, lines = [], jPatchMark = 0;
  hasPatch && lines.push("");
  let aStart = 0, bStart = 0, aEnd = 0, bEnd = 0, pushCommonLine = (line) => {
    let j2 = lines.length;
    lines.push(printCommonLine(line, j2 === 0 || j2 === jLast, options)), aEnd += 1, bEnd += 1;
  }, pushDeleteLine = (line) => {
    let j2 = lines.length;
    lines.push(printDeleteLine(line, j2 === 0 || j2 === jLast, options)), aEnd += 1;
  }, pushInsertLine = (line) => {
    let j2 = lines.length;
    lines.push(printInsertLine(line, j2 === 0 || j2 === jLast, options)), bEnd += 1;
  };
  for (i2 = 0; i2 !== iLength; ) {
    let iStart = i2;
    for (; i2 !== iLength && diffs[i2][0] === DIFF_EQUAL; ) i2 += 1;
    if (iStart !== i2) if (iStart === 0) {
      i2 > nContextLines && (iStart = i2 - nContextLines, aStart = iStart, bStart = iStart, aEnd = aStart, bEnd = bStart);
      for (let iCommon = iStart; iCommon !== i2; iCommon += 1) pushCommonLine(diffs[iCommon][1]);
    } else if (i2 === iLength) {
      let iEnd = i2 - iStart > nContextLines ? iStart + nContextLines : i2;
      for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) pushCommonLine(diffs[iCommon][1]);
    } else {
      let nCommon = i2 - iStart;
      if (nCommon > nContextLines2) {
        let iEnd = iStart + nContextLines;
        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) pushCommonLine(diffs[iCommon][1]);
        lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options), jPatchMark = lines.length, lines.push("");
        let nOmit = nCommon - nContextLines2;
        aStart = aEnd + nOmit, bStart = bEnd + nOmit, aEnd = aStart, bEnd = bStart;
        for (let iCommon = i2 - nContextLines; iCommon !== i2; iCommon += 1) pushCommonLine(diffs[iCommon][1]);
      } else for (let iCommon = iStart; iCommon !== i2; iCommon += 1) pushCommonLine(diffs[iCommon][1]);
    }
    for (; i2 !== iLength && diffs[i2][0] === DIFF_DELETE; ) pushDeleteLine(diffs[i2][1]), i2 += 1;
    for (; i2 !== iLength && diffs[i2][0] === DIFF_INSERT; ) pushInsertLine(diffs[i2][1]), i2 += 1;
  }
  return hasPatch && (lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options)), lines.join(`
`);
}
function joinAlignedDiffsExpand(diffs, options) {
  return diffs.map((diff2, i2, diffs2) => {
    let line = diff2[1], isFirstOrLast = i2 === 0 || i2 === diffs2.length - 1;
    switch (diff2[0]) {
      case DIFF_DELETE:
        return printDeleteLine(line, isFirstOrLast, options);
      case DIFF_INSERT:
        return printInsertLine(line, isFirstOrLast, options);
      default:
        return printCommonLine(line, isFirstOrLast, options);
    }
  }).join(`
`);
}
var noColor = (string2) => string2, DIFF_CONTEXT_DEFAULT = 5, DIFF_TRUNCATE_THRESHOLD_DEFAULT = 0;
function getDefaultOptions() {
  let c2 = getColors();
  return { aAnnotation: "Expected", aColor: c2.green, aIndicator: "-", bAnnotation: "Received", bColor: c2.red, bIndicator: "+", changeColor: c2.inverse, changeLineTrailingSpaceColor: noColor, commonColor: c2.dim, commonIndicator: " ", commonLineTrailingSpaceColor: noColor, compareKeys: void 0, contextLines: DIFF_CONTEXT_DEFAULT, emptyFirstOrLastLinePlaceholder: "", expand: true, includeChangeCounts: false, omitAnnotationLines: false, patchColor: c2.yellow, truncateThreshold: DIFF_TRUNCATE_THRESHOLD_DEFAULT, truncateAnnotation: "... Diff result is truncated", truncateAnnotationColor: noColor };
}
function getCompareKeys(compareKeys) {
  return compareKeys && typeof compareKeys == "function" ? compareKeys : void 0;
}
function getContextLines(contextLines) {
  return typeof contextLines == "number" && Number.isSafeInteger(contextLines) && contextLines >= 0 ? contextLines : DIFF_CONTEXT_DEFAULT;
}
function normalizeDiffOptions(options = {}) {
  return { ...getDefaultOptions(), ...options, compareKeys: getCompareKeys(options.compareKeys), contextLines: getContextLines(options.contextLines) };
}
function isEmptyString(lines) {
  return lines.length === 1 && lines[0].length === 0;
}
function countChanges(diffs) {
  let a = 0, b2 = 0;
  return diffs.forEach((diff2) => {
    switch (diff2[0]) {
      case DIFF_DELETE:
        a += 1;
        break;
      case DIFF_INSERT:
        b2 += 1;
        break;
    }
  }), { a, b: b2 };
}
function printAnnotation({ aAnnotation, aColor, aIndicator, bAnnotation, bColor, bIndicator, includeChangeCounts, omitAnnotationLines }, changeCounts) {
  if (omitAnnotationLines) return "";
  let aRest = "", bRest = "";
  if (includeChangeCounts) {
    let aCount = String(changeCounts.a), bCount = String(changeCounts.b), baAnnotationLengthDiff = bAnnotation.length - aAnnotation.length, aAnnotationPadding = " ".repeat(Math.max(0, baAnnotationLengthDiff)), bAnnotationPadding = " ".repeat(Math.max(0, -baAnnotationLengthDiff)), baCountLengthDiff = bCount.length - aCount.length, aCountPadding = " ".repeat(Math.max(0, baCountLengthDiff)), bCountPadding = " ".repeat(Math.max(0, -baCountLengthDiff));
    aRest = `${aAnnotationPadding}  ${aIndicator} ${aCountPadding}${aCount}`, bRest = `${bAnnotationPadding}  ${bIndicator} ${bCountPadding}${bCount}`;
  }
  let a = `${aIndicator} ${aAnnotation}${aRest}`, b2 = `${bIndicator} ${bAnnotation}${bRest}`;
  return `${aColor(a)}
${bColor(b2)}

`;
}
function printDiffLines(diffs, truncated, options) {
  return printAnnotation(options, countChanges(diffs)) + (options.expand ? joinAlignedDiffsExpand(diffs, options) : joinAlignedDiffsNoExpand(diffs, options)) + (truncated ? options.truncateAnnotationColor(`
${options.truncateAnnotation}`) : "");
}
function diffLinesUnified(aLines, bLines, options) {
  let normalizedOptions = normalizeDiffOptions(options), [diffs, truncated] = diffLinesRaw(isEmptyString(aLines) ? [] : aLines, isEmptyString(bLines) ? [] : bLines, normalizedOptions);
  return printDiffLines(diffs, truncated, normalizedOptions);
}
function diffLinesUnified2(aLinesDisplay, bLinesDisplay, aLinesCompare, bLinesCompare, options) {
  if (isEmptyString(aLinesDisplay) && isEmptyString(aLinesCompare) && (aLinesDisplay = [], aLinesCompare = []), isEmptyString(bLinesDisplay) && isEmptyString(bLinesCompare) && (bLinesDisplay = [], bLinesCompare = []), aLinesDisplay.length !== aLinesCompare.length || bLinesDisplay.length !== bLinesCompare.length) return diffLinesUnified(aLinesDisplay, bLinesDisplay, options);
  let [diffs, truncated] = diffLinesRaw(aLinesCompare, bLinesCompare, options), aIndex = 0, bIndex = 0;
  return diffs.forEach((diff2) => {
    switch (diff2[0]) {
      case DIFF_DELETE:
        diff2[1] = aLinesDisplay[aIndex], aIndex += 1;
        break;
      case DIFF_INSERT:
        diff2[1] = bLinesDisplay[bIndex], bIndex += 1;
        break;
      default:
        diff2[1] = bLinesDisplay[bIndex], aIndex += 1, bIndex += 1;
    }
  }), printDiffLines(diffs, truncated, normalizeDiffOptions(options));
}
function diffLinesRaw(aLines, bLines, options) {
  let truncate = (options == null ? void 0 : options.truncateThreshold) ?? false, truncateThreshold = Math.max(Math.floor((options == null ? void 0 : options.truncateThreshold) ?? 0), 0), aLength = truncate ? Math.min(aLines.length, truncateThreshold) : aLines.length, bLength = truncate ? Math.min(bLines.length, truncateThreshold) : bLines.length, truncated = aLength !== aLines.length || bLength !== bLines.length, isCommon = (aIndex2, bIndex2) => aLines[aIndex2] === bLines[bIndex2], diffs = [], aIndex = 0, bIndex = 0, foundSubsequence = (nCommon, aCommon, bCommon) => {
    for (; aIndex !== aCommon; aIndex += 1) diffs.push(new Diff(DIFF_DELETE, aLines[aIndex]));
    for (; bIndex !== bCommon; bIndex += 1) diffs.push(new Diff(DIFF_INSERT, bLines[bIndex]));
    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) diffs.push(new Diff(DIFF_EQUAL, bLines[bIndex]));
  };
  for ((diff$1.default.default || diff$1.default)(aLength, bLength, isCommon, foundSubsequence); aIndex !== aLength; aIndex += 1) diffs.push(new Diff(DIFF_DELETE, aLines[aIndex]));
  for (; bIndex !== bLength; bIndex += 1) diffs.push(new Diff(DIFF_INSERT, bLines[bIndex]));
  return [diffs, truncated];
}
function getCommonMessage(message, options) {
  let { commonColor } = normalizeDiffOptions(options);
  return commonColor(message);
}
var { AsymmetricMatcher: AsymmetricMatcher2, DOMCollection: DOMCollection2, DOMElement: DOMElement2, Immutable: Immutable2, ReactElement: ReactElement2, ReactTestComponent: ReactTestComponent2 } = import_pretty_format3.plugins, PLUGINS2 = [ReactTestComponent2, ReactElement2, DOMElement2, DOMCollection2, Immutable2, AsymmetricMatcher2], FORMAT_OPTIONS = { plugins: PLUGINS2 }, FALLBACK_FORMAT_OPTIONS = { callToJSON: false, maxDepth: 10, plugins: PLUGINS2 };
function diff(a, b2, options) {
  if (Object.is(a, b2)) return "";
  let aType = getType2(a), expectedType = aType, omitDifference = false;
  if (aType === "object" && typeof a.asymmetricMatch == "function") {
    if (a.$$typeof !== Symbol.for("jest.asymmetricMatcher") || typeof a.getExpectedType != "function") return null;
    expectedType = a.getExpectedType(), omitDifference = expectedType === "string";
  }
  if (expectedType !== getType2(b2)) {
    let { aAnnotation, aColor, aIndicator, bAnnotation, bColor, bIndicator } = normalizeDiffOptions(options), formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options), aDisplay = (0, import_pretty_format3.format)(a, formatOptions), bDisplay = (0, import_pretty_format3.format)(b2, formatOptions), aDiff = `${aColor(`${aIndicator} ${aAnnotation}:`)} 
${aDisplay}`, bDiff = `${bColor(`${bIndicator} ${bAnnotation}:`)} 
${bDisplay}`;
    return `${aDiff}

${bDiff}`;
  }
  if (omitDifference) return null;
  switch (aType) {
    case "string":
      return diffLinesUnified(a.split(`
`), b2.split(`
`), options);
    case "boolean":
    case "number":
      return comparePrimitive(a, b2, options);
    case "map":
      return compareObjects(sortMap(a), sortMap(b2), options);
    case "set":
      return compareObjects(sortSet(a), sortSet(b2), options);
    default:
      return compareObjects(a, b2, options);
  }
}
function comparePrimitive(a, b2, options) {
  let aFormat = (0, import_pretty_format3.format)(a, FORMAT_OPTIONS), bFormat = (0, import_pretty_format3.format)(b2, FORMAT_OPTIONS);
  return aFormat === bFormat ? "" : diffLinesUnified(aFormat.split(`
`), bFormat.split(`
`), options);
}
function sortMap(map) {
  return new Map(Array.from(map.entries()).sort());
}
function sortSet(set) {
  return new Set(Array.from(set.values()).sort());
}
function compareObjects(a, b2, options) {
  let difference, hasThrown = false;
  try {
    let formatOptions = getFormatOptions(FORMAT_OPTIONS, options);
    difference = getObjectsDifference(a, b2, formatOptions, options);
  } catch {
    hasThrown = true;
  }
  let noDiffMessage = getCommonMessage(NO_DIFF_MESSAGE, options);
  if (difference === void 0 || difference === noDiffMessage) {
    let formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options);
    difference = getObjectsDifference(a, b2, formatOptions, options), difference !== noDiffMessage && !hasThrown && (difference = `${getCommonMessage(SIMILAR_MESSAGE, options)}

${difference}`);
  }
  return difference;
}
function getFormatOptions(formatOptions, options) {
  let { compareKeys } = normalizeDiffOptions(options);
  return { ...formatOptions, compareKeys };
}
function getObjectsDifference(a, b2, formatOptions, options) {
  let formatOptionsZeroIndent = { ...formatOptions, indent: 0 }, aCompare = (0, import_pretty_format3.format)(a, formatOptionsZeroIndent), bCompare = (0, import_pretty_format3.format)(b2, formatOptionsZeroIndent);
  if (aCompare === bCompare) return getCommonMessage(NO_DIFF_MESSAGE, options);
  {
    let aDisplay = (0, import_pretty_format3.format)(a, formatOptions), bDisplay = (0, import_pretty_format3.format)(b2, formatOptions);
    return diffLinesUnified2(aDisplay.split(`
`), bDisplay.split(`
`), aCompare.split(`
`), bCompare.split(`
`), options);
  }
}
function m$1(e2, t) {
  if (!e2) throw new Error(t);
}
function y$1(e2, t) {
  return typeof t === e2;
}
function b$2(e2) {
  return e2 instanceof Promise;
}
function d$2(e2, t, n2) {
  Object.defineProperty(e2, t, n2);
}
function p$2(e2, t, n2) {
  Object.defineProperty(e2, t, { value: n2 });
}
var u$1 = Symbol.for("tinyspy:spy"), I$2 = /* @__PURE__ */ new Set(), M$1 = (e2) => {
  e2.called = false, e2.callCount = 0, e2.calls = [], e2.results = [], e2.next = [];
}, C$2 = (e2) => (d$2(e2, u$1, { value: { reset: () => M$1(e2[u$1]) } }), e2[u$1]), v$2 = (e2) => e2[u$1] || C$2(e2);
function T(e2) {
  m$1(y$1("function", e2) || y$1("undefined", e2), "cannot spy on a non-function value");
  let t = function(...a) {
    let r2 = v$2(t);
    r2.called = true, r2.callCount++, r2.calls.push(a);
    let i2 = r2.next.shift();
    if (i2) {
      r2.results.push(i2);
      let [s2, l2] = i2;
      if (s2 === "ok") return l2;
      throw l2;
    }
    let o, c2 = "ok";
    if (r2.impl) try {
      new.target ? o = Reflect.construct(r2.impl, a, new.target) : o = r2.impl.apply(this, a), c2 = "ok";
    } catch (s2) {
      throw o = s2, c2 = "error", r2.results.push([c2, s2]), s2;
    }
    let x2 = [c2, o];
    if (b$2(o)) {
      let s2 = o.then((l2) => x2[1] = l2).catch((l2) => {
        throw x2[0] = "error", x2[1] = l2, l2;
      });
      Object.assign(s2, o), o = s2;
    }
    return r2.results.push(x2), o;
  };
  p$2(t, "_isMockFunction", true), p$2(t, "length", e2 ? e2.length : 0), p$2(t, "name", e2 && e2.name || "spy");
  let n2 = v$2(t);
  return n2.reset(), n2.impl = e2, t;
}
var P$1 = (e2, t) => Object.getOwnPropertyDescriptor(e2, t);
function E$2(e2, t, n2) {
  m$1(!y$1("undefined", e2), "spyOn could not find an object to spy upon"), m$1(y$1("object", e2) || y$1("function", e2), "cannot spyOn on a primitive value");
  let a = () => {
    if (!y$1("object", t)) return [t, "value"];
    if ("getter" in t && "setter" in t) throw new Error("cannot spy on both getter and setter");
    if ("getter" in t) return [t.getter, "get"];
    if ("setter" in t) return [t.setter, "set"];
    throw new Error("specify getter or setter to spy on");
  }, [r2, i2] = a(), o = P$1(e2, r2), c2 = Object.getPrototypeOf(e2), x2 = c2 && P$1(c2, r2), s2 = o || x2;
  m$1(s2 || r2 in e2, `${String(r2)} does not exist`);
  let l2 = false;
  i2 === "value" && s2 && !s2.value && s2.get && (i2 = "get", l2 = true, n2 = s2.get());
  let f2;
  s2 ? f2 = s2[i2] : i2 !== "value" ? f2 = () => e2[r2] : f2 = e2[r2], n2 || (n2 = f2);
  let S2 = T(n2), O2 = (w2) => {
    let { value: G2, ...k2 } = s2 || { configurable: true, writable: true };
    i2 !== "value" && delete k2.writable, k2[i2] = w2, d$2(e2, r2, k2);
  }, K2 = () => s2 ? d$2(e2, r2, s2) : O2(f2), A2 = S2[u$1];
  return p$2(A2, "restore", K2), p$2(A2, "getOriginal", () => l2 ? f2() : f2), p$2(A2, "willCall", (w2) => (A2.impl = w2, S2)), O2(l2 ? () => S2 : S2), I$2.add(S2), S2;
}
var mocks = /* @__PURE__ */ new Set();
function isMockFunction(fn22) {
  return typeof fn22 == "function" && "_isMockFunction" in fn22 && fn22._isMockFunction;
}
var callOrder = 0;
function enhanceSpy(spy) {
  let stub = spy, implementation, instances = [], invocations = [], state = v$2(spy), mockContext = { get calls() {
    return state.calls;
  }, get instances() {
    return instances;
  }, get invocationCallOrder() {
    return invocations;
  }, get results() {
    return state.results.map(([callType, value]) => ({ type: callType === "error" ? "throw" : "return", value }));
  }, get lastCall() {
    return state.calls[state.calls.length - 1];
  } }, onceImplementations = [], implementationChangedTemporarily = false;
  function mockCall(...args) {
    return instances.push(this), invocations.push(++callOrder), (implementationChangedTemporarily ? implementation : onceImplementations.shift() || implementation || state.getOriginal() || (() => {
    })).apply(this, args);
  }
  let name = stub.name;
  stub.getMockName = () => name || "vi.fn()", stub.mockName = (n2) => (name = n2, stub), stub.mockClear = () => (state.reset(), instances = [], invocations = [], stub), stub.mockReset = () => (stub.mockClear(), implementation = () => {
  }, onceImplementations = [], stub), stub.mockRestore = () => (stub.mockReset(), state.restore(), implementation = void 0, stub), stub.getMockImplementation = () => implementation, stub.mockImplementation = (fn22) => (implementation = fn22, state.willCall(mockCall), stub), stub.mockImplementationOnce = (fn22) => (onceImplementations.push(fn22), stub);
  function withImplementation(fn22, cb) {
    let originalImplementation = implementation;
    implementation = fn22, state.willCall(mockCall), implementationChangedTemporarily = true;
    let reset = () => {
      implementation = originalImplementation, implementationChangedTemporarily = false;
    }, result = cb();
    return result instanceof Promise ? result.then(() => (reset(), stub)) : (reset(), stub);
  }
  return stub.withImplementation = withImplementation, stub.mockReturnThis = () => stub.mockImplementation(function() {
    return this;
  }), stub.mockReturnValue = (val) => stub.mockImplementation(() => val), stub.mockReturnValueOnce = (val) => stub.mockImplementationOnce(() => val), stub.mockResolvedValue = (val) => stub.mockImplementation(() => Promise.resolve(val)), stub.mockResolvedValueOnce = (val) => stub.mockImplementationOnce(() => Promise.resolve(val)), stub.mockRejectedValue = (val) => stub.mockImplementation(() => Promise.reject(val)), stub.mockRejectedValueOnce = (val) => stub.mockImplementationOnce(() => Promise.reject(val)), Object.defineProperty(stub, "mock", { get: () => mockContext }), state.willCall(mockCall), mocks.add(stub), stub;
}
function fn(implementation) {
  let enhancedSpy = enhanceSpy(E$2({ spy: implementation || (() => {
  }) }, "spy"));
  return implementation && enhancedSpy.mockImplementation(implementation), enhancedSpy;
}
__toESM(require_build(), 1);
__toESM(require_build2(), 1);
__toESM(require_loupe(), 1);
var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@", IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
function isImmutable(v2) {
  return v2 && (v2[IS_COLLECTION_SYMBOL] || v2[IS_RECORD_SYMBOL]);
}
var OBJECT_PROTO = Object.getPrototypeOf({});
function getUnserializableMessage(err) {
  return err instanceof Error ? `<unserializable>: ${err.message}` : typeof err == "string" ? `<unserializable>: ${err}` : "<unserializable>";
}
function serializeError(val, seen = /* @__PURE__ */ new WeakMap()) {
  if (!val || typeof val == "string") return val;
  if (typeof val == "function") return `Function<${val.name || "anonymous"}>`;
  if (typeof val == "symbol") return val.toString();
  if (typeof val != "object") return val;
  if (isImmutable(val)) return serializeError(val.toJSON(), seen);
  if (val instanceof Promise || val.constructor && val.constructor.prototype === "AsyncFunction") return "Promise";
  if (typeof Element < "u" && val instanceof Element) return val.tagName;
  if (typeof val.asymmetricMatch == "function") return `${val.toString()} ${format$1(val.sample)}`;
  if (typeof val.toJSON == "function") return val.toJSON();
  if (seen.has(val)) return seen.get(val);
  if (Array.isArray(val)) {
    let clone2 = new Array(val.length);
    return seen.set(val, clone2), val.forEach((e2, i2) => {
      try {
        clone2[i2] = serializeError(e2, seen);
      } catch (err) {
        clone2[i2] = getUnserializableMessage(err);
      }
    }), clone2;
  } else {
    let clone2 = /* @__PURE__ */ Object.create(null);
    seen.set(val, clone2);
    let obj = val;
    for (; obj && obj !== OBJECT_PROTO; ) Object.getOwnPropertyNames(obj).forEach((key) => {
      if (!(key in clone2)) try {
        clone2[key] = serializeError(val[key], seen);
      } catch (err) {
        delete clone2[key], clone2[key] = getUnserializableMessage(err);
      }
    }), obj = Object.getPrototypeOf(obj);
    return clone2;
  }
}
function normalizeErrorMessage(message) {
  return message.replace(/__(vite_ssr_import|vi_import)_\d+__\./g, "");
}
function processError(err, diffOptions) {
  if (!err || typeof err != "object") return { message: err };
  if (err.stack && (err.stackStr = String(err.stack)), err.name && (err.nameStr = String(err.name)), err.showDiff || err.showDiff === void 0 && err.expected !== void 0 && err.actual !== void 0) {
    let clonedActual = deepClone(err.actual, { forceWritable: true }), clonedExpected = deepClone(err.expected, { forceWritable: true }), { replacedActual, replacedExpected } = replaceAsymmetricMatcher(clonedActual, clonedExpected);
    err.diff = diff(replacedExpected, replacedActual, { ...diffOptions, ...err.diffOptions });
  }
  typeof err.expected != "string" && (err.expected = stringify(err.expected, 10)), typeof err.actual != "string" && (err.actual = stringify(err.actual, 10));
  try {
    typeof err.message == "string" && (err.message = normalizeErrorMessage(err.message)), typeof err.cause == "object" && typeof err.cause.message == "string" && (err.cause.message = normalizeErrorMessage(err.cause.message));
  } catch {
  }
  try {
    return serializeError(err);
  } catch (e2) {
    return serializeError(new Error(`Failed to fully serialize error: ${e2 == null ? void 0 : e2.message}
Inner error message: ${err == null ? void 0 : err.message}`));
  }
}
function isAsymmetricMatcher(data) {
  return getType$1(data) === "Object" && typeof data.asymmetricMatch == "function";
}
function isReplaceable(obj1, obj2) {
  let obj1Type = getType$1(obj1), obj2Type = getType$1(obj2);
  return obj1Type === obj2Type && (obj1Type === "Object" || obj1Type === "Array");
}
function replaceAsymmetricMatcher(actual, expected, actualReplaced = /* @__PURE__ */ new WeakSet(), expectedReplaced = /* @__PURE__ */ new WeakSet()) {
  return isReplaceable(actual, expected) ? actualReplaced.has(actual) || expectedReplaced.has(expected) ? { replacedActual: actual, replacedExpected: expected } : (actualReplaced.add(actual), expectedReplaced.add(expected), getOwnProperties(expected).forEach((key) => {
    let expectedValue = expected[key], actualValue = actual[key];
    if (isAsymmetricMatcher(expectedValue)) expectedValue.asymmetricMatch(actualValue) && (actual[key] = expectedValue);
    else if (isAsymmetricMatcher(actualValue)) actualValue.asymmetricMatch(expectedValue) && (expected[key] = actualValue);
    else if (isReplaceable(actualValue, expectedValue)) {
      let replaced = replaceAsymmetricMatcher(actualValue, expectedValue, actualReplaced, expectedReplaced);
      actual[key] = replaced.replacedActual, expected[key] = replaced.replacedExpected;
    }
  }), { replacedActual: actual, replacedExpected: expected }) : { replacedActual: actual, replacedExpected: expected };
}
var MATCHERS_OBJECT = Symbol.for("matchers-object"), JEST_MATCHERS_OBJECT = Symbol.for("$$jest-matchers-object-storybook"), GLOBAL_EXPECT = Symbol.for("expect-global"), ASYMMETRIC_MATCHERS_OBJECT = Symbol.for("asymmetric-matchers-object");
if (!Object.prototype.hasOwnProperty.call(globalThis, MATCHERS_OBJECT)) {
  let globalState = /* @__PURE__ */ new WeakMap();
  Object.defineProperty(globalThis, MATCHERS_OBJECT, { get: () => globalState });
}
if (!Object.prototype.hasOwnProperty.call(globalThis, JEST_MATCHERS_OBJECT)) {
  let matchers = /* @__PURE__ */ Object.create(null), customEqualityTesters = [];
  Object.defineProperty(globalThis, JEST_MATCHERS_OBJECT, { configurable: true, get: () => ({ state: globalThis[MATCHERS_OBJECT].get(globalThis[GLOBAL_EXPECT]), matchers, customEqualityTesters }) });
}
if (!Object.prototype.hasOwnProperty.call(globalThis, ASYMMETRIC_MATCHERS_OBJECT)) {
  let assymetricMatchers = /* @__PURE__ */ Object.create(null);
  Object.defineProperty(globalThis, ASYMMETRIC_MATCHERS_OBJECT, { get: () => assymetricMatchers });
}
function getState(expect4) {
  return globalThis[MATCHERS_OBJECT].get(expect4);
}
function setState(state, expect4) {
  let map = globalThis[MATCHERS_OBJECT], current = map.get(expect4) || {};
  Object.assign(current, state), map.set(expect4, current);
}
function getMatcherUtils() {
  let c2 = () => getColors(), EXPECTED_COLOR = c2().green, RECEIVED_COLOR = c2().red, INVERTED_COLOR = c2().inverse, BOLD_WEIGHT = c2().bold, DIM_COLOR = c2().dim;
  function matcherHint(matcherName, received = "received", expected = "expected", options = {}) {
    let { comment = "", isDirectExpectCall = false, isNot = false, promise = "", secondArgument = "", expectedColor = EXPECTED_COLOR, receivedColor = RECEIVED_COLOR, secondArgumentColor = EXPECTED_COLOR } = options, hint = "", dimString = "expect";
    return !isDirectExpectCall && received !== "" && (hint += DIM_COLOR(`${dimString}(`) + receivedColor(received), dimString = ")"), promise !== "" && (hint += DIM_COLOR(`${dimString}.`) + promise, dimString = ""), isNot && (hint += `${DIM_COLOR(`${dimString}.`)}not`, dimString = ""), matcherName.includes(".") ? dimString += matcherName : (hint += DIM_COLOR(`${dimString}.`) + matcherName, dimString = ""), expected === "" ? dimString += "()" : (hint += DIM_COLOR(`${dimString}(`) + expectedColor(expected), secondArgument && (hint += DIM_COLOR(", ") + secondArgumentColor(secondArgument)), dimString = ")"), comment !== "" && (dimString += ` // ${comment}`), dimString !== "" && (hint += DIM_COLOR(dimString)), hint;
  }
  let SPACE_SYMBOL = "·", replaceTrailingSpaces = (text) => text.replace(/\s+$/gm, (spaces) => SPACE_SYMBOL.repeat(spaces.length));
  return { EXPECTED_COLOR, RECEIVED_COLOR, INVERTED_COLOR, BOLD_WEIGHT, DIM_COLOR, matcherHint, printReceived: (object) => RECEIVED_COLOR(replaceTrailingSpaces(stringify(object))), printExpected: (value) => EXPECTED_COLOR(replaceTrailingSpaces(stringify(value))) };
}
function getCustomEqualityTesters() {
  return globalThis[JEST_MATCHERS_OBJECT].customEqualityTesters;
}
function equals(a, b2, customTesters, strictCheck) {
  return customTesters = customTesters || [], eq(a, b2, [], [], customTesters, strictCheck ? hasKey : hasDefinedKey);
}
function isAsymmetric(obj) {
  return !!obj && typeof obj == "object" && "asymmetricMatch" in obj && isA("Function", obj.asymmetricMatch);
}
function asymmetricMatch(a, b2) {
  let asymmetricA = isAsymmetric(a), asymmetricB = isAsymmetric(b2);
  if (!(asymmetricA && asymmetricB)) {
    if (asymmetricA) return a.asymmetricMatch(b2);
    if (asymmetricB) return b2.asymmetricMatch(a);
  }
}
function eq(a, b2, aStack, bStack, customTesters, hasKey2) {
  let result = true, asymmetricResult = asymmetricMatch(a, b2);
  if (asymmetricResult !== void 0) return asymmetricResult;
  let testerContext = { equals };
  for (let i2 = 0; i2 < customTesters.length; i2++) {
    let customTesterResult = customTesters[i2].call(testerContext, a, b2, customTesters);
    if (customTesterResult !== void 0) return customTesterResult;
  }
  if (a instanceof Error && b2 instanceof Error) return a.message === b2.message;
  if (typeof URL == "function" && a instanceof URL && b2 instanceof URL) return a.href === b2.href;
  if (Object.is(a, b2)) return true;
  if (a === null || b2 === null) return a === b2;
  let className = Object.prototype.toString.call(a);
  if (className !== Object.prototype.toString.call(b2)) return false;
  switch (className) {
    case "[object Boolean]":
    case "[object String]":
    case "[object Number]":
      return typeof a != typeof b2 ? false : typeof a != "object" && typeof b2 != "object" ? Object.is(a, b2) : Object.is(a.valueOf(), b2.valueOf());
    case "[object Date]": {
      let numA = +a, numB = +b2;
      return numA === numB || Number.isNaN(numA) && Number.isNaN(numB);
    }
    case "[object RegExp]":
      return a.source === b2.source && a.flags === b2.flags;
  }
  if (typeof a != "object" || typeof b2 != "object") return false;
  if (isDomNode(a) && isDomNode(b2)) return a.isEqualNode(b2);
  let length = aStack.length;
  for (; length--; ) {
    if (aStack[length] === a) return bStack[length] === b2;
    if (bStack[length] === b2) return false;
  }
  if (aStack.push(a), bStack.push(b2), className === "[object Array]" && a.length !== b2.length) return false;
  let aKeys = keys$2(a, hasKey2), key, size = aKeys.length;
  if (keys$2(b2, hasKey2).length !== size) return false;
  for (; size--; ) if (key = aKeys[size], result = hasKey2(b2, key) && eq(a[key], b2[key], aStack, bStack, customTesters, hasKey2), !result) return false;
  return aStack.pop(), bStack.pop(), result;
}
function keys$2(obj, hasKey2) {
  let keys22 = [];
  for (let key in obj) hasKey2(obj, key) && keys22.push(key);
  return keys22.concat(Object.getOwnPropertySymbols(obj).filter((symbol) => Object.getOwnPropertyDescriptor(obj, symbol).enumerable));
}
function hasDefinedKey(obj, key) {
  return hasKey(obj, key) && obj[key] !== void 0;
}
function hasKey(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function isA(typeName, value) {
  return Object.prototype.toString.apply(value) === `[object ${typeName}]`;
}
function isDomNode(obj) {
  return obj !== null && typeof obj == "object" && "nodeType" in obj && typeof obj.nodeType == "number" && "nodeName" in obj && typeof obj.nodeName == "string" && "isEqualNode" in obj && typeof obj.isEqualNode == "function";
}
var IS_KEYED_SENTINEL$1 = "@@__IMMUTABLE_KEYED__@@", IS_SET_SENTINEL$1 = "@@__IMMUTABLE_SET__@@", IS_ORDERED_SENTINEL$1 = "@@__IMMUTABLE_ORDERED__@@";
function isImmutableUnorderedKeyed(maybeKeyed) {
  return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL$1] && !maybeKeyed[IS_ORDERED_SENTINEL$1]);
}
function isImmutableUnorderedSet(maybeSet) {
  return !!(maybeSet && maybeSet[IS_SET_SENTINEL$1] && !maybeSet[IS_ORDERED_SENTINEL$1]);
}
var IteratorSymbol = Symbol.iterator;
function hasIterator(object) {
  return !!(object != null && object[IteratorSymbol]);
}
function iterableEquality(a, b2, customTesters = [], aStack = [], bStack = []) {
  if (typeof a != "object" || typeof b2 != "object" || Array.isArray(a) || Array.isArray(b2) || !hasIterator(a) || !hasIterator(b2)) return;
  if (a.constructor !== b2.constructor) return false;
  let length = aStack.length;
  for (; length--; ) if (aStack[length] === a) return bStack[length] === b2;
  aStack.push(a), bStack.push(b2);
  let filteredCustomTesters = [...customTesters.filter((t) => t !== iterableEquality), iterableEqualityWithStack];
  function iterableEqualityWithStack(a2, b22) {
    return iterableEquality(a2, b22, [...customTesters], [...aStack], [...bStack]);
  }
  if (a.size !== void 0) {
    if (a.size !== b2.size) return false;
    if (isA("Set", a) || isImmutableUnorderedSet(a)) {
      let allFound = true;
      for (let aValue of a) if (!b2.has(aValue)) {
        let has7 = false;
        for (let bValue of b2) equals(aValue, bValue, filteredCustomTesters) === true && (has7 = true);
        if (has7 === false) {
          allFound = false;
          break;
        }
      }
      return aStack.pop(), bStack.pop(), allFound;
    } else if (isA("Map", a) || isImmutableUnorderedKeyed(a)) {
      let allFound = true;
      for (let aEntry of a) if (!b2.has(aEntry[0]) || !equals(aEntry[1], b2.get(aEntry[0]), filteredCustomTesters)) {
        let has7 = false;
        for (let bEntry of b2) {
          let matchedKey = equals(aEntry[0], bEntry[0], filteredCustomTesters), matchedValue = false;
          matchedKey === true && (matchedValue = equals(aEntry[1], bEntry[1], filteredCustomTesters)), matchedValue === true && (has7 = true);
        }
        if (has7 === false) {
          allFound = false;
          break;
        }
      }
      return aStack.pop(), bStack.pop(), allFound;
    }
  }
  let bIterator = b2[IteratorSymbol]();
  for (let aValue of a) {
    let nextB = bIterator.next();
    if (nextB.done || !equals(aValue, nextB.value, filteredCustomTesters)) return false;
  }
  if (!bIterator.next().done) return false;
  let aEntries = Object.entries(a), bEntries = Object.entries(b2);
  return equals(aEntries, bEntries) ? (aStack.pop(), bStack.pop(), true) : false;
}
function hasPropertyInObject(object, key) {
  return !object || typeof object != "object" || object === Object.prototype ? false : Object.prototype.hasOwnProperty.call(object, key) || hasPropertyInObject(Object.getPrototypeOf(object), key);
}
function isObjectWithKeys(a) {
  return isObject(a) && !(a instanceof Error) && !Array.isArray(a) && !(a instanceof Date);
}
function subsetEquality(object, subset, customTesters = []) {
  let filteredCustomTesters = customTesters.filter((t) => t !== subsetEquality), subsetEqualityWithContext = (seenReferences = /* @__PURE__ */ new WeakMap()) => (object2, subset2) => {
    if (isObjectWithKeys(subset2)) return Object.keys(subset2).every((key) => {
      if (subset2[key] != null && typeof subset2[key] == "object") {
        if (seenReferences.has(subset2[key])) return equals(object2[key], subset2[key], filteredCustomTesters);
        seenReferences.set(subset2[key], true);
      }
      let result = object2 != null && hasPropertyInObject(object2, key) && equals(object2[key], subset2[key], [...filteredCustomTesters, subsetEqualityWithContext(seenReferences)]);
      return seenReferences.delete(subset2[key]), result;
    });
  };
  return subsetEqualityWithContext()(object, subset);
}
function typeEquality(a, b2) {
  if (!(a == null || b2 == null || a.constructor === b2.constructor)) return false;
}
function arrayBufferEquality(a, b2) {
  let dataViewA = a, dataViewB = b2;
  if (!(a instanceof DataView && b2 instanceof DataView)) {
    if (!(a instanceof ArrayBuffer) || !(b2 instanceof ArrayBuffer)) return;
    try {
      dataViewA = new DataView(a), dataViewB = new DataView(b2);
    } catch {
      return;
    }
  }
  if (dataViewA.byteLength !== dataViewB.byteLength) return false;
  for (let i2 = 0; i2 < dataViewA.byteLength; i2++) if (dataViewA.getUint8(i2) !== dataViewB.getUint8(i2)) return false;
  return true;
}
function sparseArrayEquality(a, b2, customTesters = []) {
  if (!Array.isArray(a) || !Array.isArray(b2)) return;
  let aKeys = Object.keys(a), bKeys = Object.keys(b2), filteredCustomTesters = customTesters.filter((t) => t !== sparseArrayEquality);
  return equals(a, b2, filteredCustomTesters, true) && equals(aKeys, bKeys);
}
function generateToBeMessage(deepEqualityName, expected = "#{this}", actual = "#{exp}") {
  let toBeMessage = `expected ${expected} to be ${actual} // Object.is equality`;
  return ["toStrictEqual", "toEqual"].includes(deepEqualityName) ? `${toBeMessage}

If it should pass with deep equality, replace "toBe" with "${deepEqualityName}"

Expected: ${expected}
Received: serializes to the same string
` : toBeMessage;
}
function pluralize(word, count) {
  return `${count} ${word}${count === 1 ? "" : "s"}`;
}
function getObjectKeys(object) {
  return [...Object.keys(object), ...Object.getOwnPropertySymbols(object).filter((s2) => {
    var _a2;
    return (_a2 = Object.getOwnPropertyDescriptor(object, s2)) == null ? void 0 : _a2.enumerable;
  })];
}
function getObjectSubset(object, subset, customTesters = []) {
  let stripped = 0, getObjectSubsetWithContext = (seenReferences = /* @__PURE__ */ new WeakMap()) => (object2, subset2) => {
    if (Array.isArray(object2)) {
      if (Array.isArray(subset2) && subset2.length === object2.length) return subset2.map((sub, i2) => getObjectSubsetWithContext(seenReferences)(object2[i2], sub));
    } else {
      if (object2 instanceof Date) return object2;
      if (isObject(object2) && isObject(subset2)) {
        if (equals(object2, subset2, [...customTesters, iterableEquality, subsetEquality])) return subset2;
        let trimmed = {};
        seenReferences.set(object2, trimmed);
        for (let key of getObjectKeys(object2)) hasPropertyInObject(subset2, key) ? trimmed[key] = seenReferences.has(object2[key]) ? seenReferences.get(object2[key]) : getObjectSubsetWithContext(seenReferences)(object2[key], subset2[key]) : seenReferences.has(object2[key]) || (stripped += 1, isObject(object2[key]) && (stripped += getObjectKeys(object2[key]).length), getObjectSubsetWithContext(seenReferences)(object2[key], subset2[key]));
        if (getObjectKeys(trimmed).length > 0) return trimmed;
      }
    }
    return object2;
  };
  return { subset: getObjectSubsetWithContext()(object, subset), stripped };
}
var AsymmetricMatcher3 = class {
  constructor(sample, inverse = false) {
    __publicField(this, "$$typeof", Symbol.for("jest.asymmetricMatcher"));
    this.sample = sample, this.inverse = inverse;
  }
  getMatcherContext(expect4) {
    return { ...getState(expect4 || globalThis[GLOBAL_EXPECT]), equals, isNot: this.inverse, customTesters: getCustomEqualityTesters(), utils: { ...getMatcherUtils(), diff, stringify, iterableEquality, subsetEquality } };
  }
  [Symbol.for("chai/inspect")](options) {
    let result = stringify(this, options.depth, { min: true });
    return result.length <= options.truncate ? result : `${this.toString()}{…}`;
  }
}, StringContaining = class extends AsymmetricMatcher3 {
  constructor(sample, inverse = false) {
    if (!isA("String", sample)) throw new Error("Expected is not a string");
    super(sample, inverse);
  }
  asymmetricMatch(other) {
    let result = isA("String", other) && other.includes(this.sample);
    return this.inverse ? !result : result;
  }
  toString() {
    return `String${this.inverse ? "Not" : ""}Containing`;
  }
  getExpectedType() {
    return "string";
  }
}, Anything = class extends AsymmetricMatcher3 {
  asymmetricMatch(other) {
    return other != null;
  }
  toString() {
    return "Anything";
  }
  toAsymmetricMatcher() {
    return "Anything";
  }
}, ObjectContaining = class extends AsymmetricMatcher3 {
  constructor(sample, inverse = false) {
    super(sample, inverse);
  }
  getPrototype(obj) {
    return Object.getPrototypeOf ? Object.getPrototypeOf(obj) : obj.constructor.prototype === obj ? null : obj.constructor.prototype;
  }
  hasProperty(obj, property) {
    return obj ? Object.prototype.hasOwnProperty.call(obj, property) ? true : this.hasProperty(this.getPrototype(obj), property) : false;
  }
  asymmetricMatch(other) {
    if (typeof this.sample != "object") throw new TypeError(`You must provide an object to ${this.toString()}, not '${typeof this.sample}'.`);
    let result = true, matcherContext = this.getMatcherContext();
    for (let property in this.sample) if (!this.hasProperty(other, property) || !equals(this.sample[property], other[property], matcherContext.customTesters)) {
      result = false;
      break;
    }
    return this.inverse ? !result : result;
  }
  toString() {
    return `Object${this.inverse ? "Not" : ""}Containing`;
  }
  getExpectedType() {
    return "object";
  }
}, ArrayContaining = class extends AsymmetricMatcher3 {
  constructor(sample, inverse = false) {
    super(sample, inverse);
  }
  asymmetricMatch(other) {
    if (!Array.isArray(this.sample)) throw new TypeError(`You must provide an array to ${this.toString()}, not '${typeof this.sample}'.`);
    let matcherContext = this.getMatcherContext(), result = this.sample.length === 0 || Array.isArray(other) && this.sample.every((item) => other.some((another) => equals(item, another, matcherContext.customTesters)));
    return this.inverse ? !result : result;
  }
  toString() {
    return `Array${this.inverse ? "Not" : ""}Containing`;
  }
  getExpectedType() {
    return "array";
  }
}, Any = class extends AsymmetricMatcher3 {
  constructor(sample) {
    if (typeof sample > "u") throw new TypeError("any() expects to be passed a constructor function. Please pass one or use anything() to match any object.");
    super(sample);
  }
  fnNameFor(func) {
    if (func.name) return func.name;
    let matches3 = Function.prototype.toString.call(func).match(/^(?:async)?\s*function\s*\*?\s*([\w$]+)\s*\(/);
    return matches3 ? matches3[1] : "<anonymous>";
  }
  asymmetricMatch(other) {
    return this.sample === String ? typeof other == "string" || other instanceof String : this.sample === Number ? typeof other == "number" || other instanceof Number : this.sample === Function ? typeof other == "function" || other instanceof Function : this.sample === Boolean ? typeof other == "boolean" || other instanceof Boolean : this.sample === BigInt ? typeof other == "bigint" || other instanceof BigInt : this.sample === Symbol ? typeof other == "symbol" || other instanceof Symbol : this.sample === Object ? typeof other == "object" : other instanceof this.sample;
  }
  toString() {
    return "Any";
  }
  getExpectedType() {
    return this.sample === String ? "string" : this.sample === Number ? "number" : this.sample === Function ? "function" : this.sample === Object ? "object" : this.sample === Boolean ? "boolean" : this.fnNameFor(this.sample);
  }
  toAsymmetricMatcher() {
    return `Any<${this.fnNameFor(this.sample)}>`;
  }
}, StringMatching = class extends AsymmetricMatcher3 {
  constructor(sample, inverse = false) {
    if (!isA("String", sample) && !isA("RegExp", sample)) throw new Error("Expected is not a String or a RegExp");
    super(new RegExp(sample), inverse);
  }
  asymmetricMatch(other) {
    let result = isA("String", other) && this.sample.test(other);
    return this.inverse ? !result : result;
  }
  toString() {
    return `String${this.inverse ? "Not" : ""}Matching`;
  }
  getExpectedType() {
    return "string";
  }
}, CloseTo = class extends AsymmetricMatcher3 {
  constructor(sample, precision = 2, inverse = false) {
    if (!isA("Number", sample)) throw new Error("Expected is not a Number");
    if (!isA("Number", precision)) throw new Error("Precision is not a Number");
    super(sample);
    __publicField(this, "precision");
    this.inverse = inverse, this.precision = precision;
  }
  asymmetricMatch(other) {
    if (!isA("Number", other)) return false;
    let result = false;
    return other === Number.POSITIVE_INFINITY && this.sample === Number.POSITIVE_INFINITY || other === Number.NEGATIVE_INFINITY && this.sample === Number.NEGATIVE_INFINITY ? result = true : result = Math.abs(this.sample - other) < 10 ** -this.precision / 2, this.inverse ? !result : result;
  }
  toString() {
    return `Number${this.inverse ? "Not" : ""}CloseTo`;
  }
  getExpectedType() {
    return "number";
  }
  toAsymmetricMatcher() {
    return [this.toString(), this.sample, `(${pluralize("digit", this.precision)})`].join(" ");
  }
}, JestAsymmetricMatchers = (chai2, utils) => {
  utils.addMethod(chai2.expect, "anything", () => new Anything()), utils.addMethod(chai2.expect, "any", (expected) => new Any(expected)), utils.addMethod(chai2.expect, "stringContaining", (expected) => new StringContaining(expected)), utils.addMethod(chai2.expect, "objectContaining", (expected) => new ObjectContaining(expected)), utils.addMethod(chai2.expect, "arrayContaining", (expected) => new ArrayContaining(expected)), utils.addMethod(chai2.expect, "stringMatching", (expected) => new StringMatching(expected)), utils.addMethod(chai2.expect, "closeTo", (expected, precision) => new CloseTo(expected, precision)), chai2.expect.not = { stringContaining: (expected) => new StringContaining(expected, true), objectContaining: (expected) => new ObjectContaining(expected, true), arrayContaining: (expected) => new ArrayContaining(expected, true), stringMatching: (expected) => new StringMatching(expected, true), closeTo: (expected, precision) => new CloseTo(expected, precision, true) };
};
function recordAsyncExpect(test2, promise) {
  return test2 && promise instanceof Promise && (promise = promise.finally(() => {
    let index = test2.promises.indexOf(promise);
    index !== -1 && test2.promises.splice(index, 1);
  }), test2.promises || (test2.promises = []), test2.promises.push(promise)), promise;
}
function wrapSoft(utils, fn3) {
  return function(...args) {
    var _a2;
    let test2 = utils.flag(this, "vitest-test");
    if (!((test2 == null ? void 0 : test2.context._local) ? test2.context.expect.getState() : getState(globalThis[GLOBAL_EXPECT])).soft) return fn3.apply(this, args);
    if (!test2) throw new Error("expect.soft() can only be used inside a test");
    try {
      return fn3.apply(this, args);
    } catch (err) {
      test2.result || (test2.result = { state: "fail" }), test2.result.state = "fail", (_a2 = test2.result).errors || (_a2.errors = []), test2.result.errors.push(processError(err));
    }
  };
}
var JestChaiExpect = (chai2, utils) => {
  let { AssertionError: AssertionError2 } = chai2, c2 = () => getColors(), customTesters = getCustomEqualityTesters();
  function def(name, fn3) {
    let addMethod = (n2) => {
      let softWrapper = wrapSoft(utils, fn3);
      utils.addMethod(chai2.Assertion.prototype, n2, softWrapper), utils.addMethod(globalThis[JEST_MATCHERS_OBJECT].matchers, n2, softWrapper);
    };
    Array.isArray(name) ? name.forEach((n2) => addMethod(n2)) : addMethod(name);
  }
  ["throw", "throws", "Throw"].forEach((m2) => {
    utils.overwriteMethod(chai2.Assertion.prototype, m2, (_super) => function(...args) {
      let promise = utils.flag(this, "promise"), object = utils.flag(this, "object"), isNot = utils.flag(this, "negate");
      if (promise === "rejects") utils.flag(this, "object", () => {
        throw object;
      });
      else if (promise === "resolves" && typeof object != "function") {
        if (isNot) return;
        {
          let message = utils.flag(this, "message") || "expected promise to throw an error, but it didn't", error = { showDiff: false };
          throw new AssertionError2(message, error, utils.flag(this, "ssfi"));
        }
      }
      _super.apply(this, args);
    });
  }), def("withTest", function(test2) {
    return utils.flag(this, "vitest-test", test2), this;
  }), def("toEqual", function(expected) {
    let actual = utils.flag(this, "object"), equal = equals(actual, expected, [...customTesters, iterableEquality]);
    return this.assert(equal, "expected #{this} to deeply equal #{exp}", "expected #{this} to not deeply equal #{exp}", expected, actual);
  }), def("toStrictEqual", function(expected) {
    let obj = utils.flag(this, "object"), equal = equals(obj, expected, [...customTesters, iterableEquality, typeEquality, sparseArrayEquality, arrayBufferEquality], true);
    return this.assert(equal, "expected #{this} to strictly equal #{exp}", "expected #{this} to not strictly equal #{exp}", expected, obj);
  }), def("toBe", function(expected) {
    let actual = this._obj, pass = Object.is(actual, expected), deepEqualityName = "";
    return pass || (equals(actual, expected, [...customTesters, iterableEquality, typeEquality, sparseArrayEquality, arrayBufferEquality], true) ? deepEqualityName = "toStrictEqual" : equals(actual, expected, [...customTesters, iterableEquality]) && (deepEqualityName = "toEqual")), this.assert(pass, generateToBeMessage(deepEqualityName), "expected #{this} not to be #{exp} // Object.is equality", expected, actual);
  }), def("toMatchObject", function(expected) {
    let actual = this._obj, pass = equals(actual, expected, [...customTesters, iterableEquality, subsetEquality]), isNot = utils.flag(this, "negate"), { subset: actualSubset, stripped } = getObjectSubset(actual, expected);
    if (pass && isNot || !pass && !isNot) {
      let msg = utils.getMessage(this, [pass, "expected #{this} to match object #{exp}", "expected #{this} to not match object #{exp}", expected, actualSubset, false]), message = stripped === 0 ? msg : `${msg}
(${stripped} matching ${stripped === 1 ? "property" : "properties"} omitted from actual)`;
      throw new AssertionError2(message, { showDiff: true, expected, actual: actualSubset });
    }
  }), def("toMatch", function(expected) {
    let actual = this._obj;
    if (typeof actual != "string") throw new TypeError(`.toMatch() expects to receive a string, but got ${typeof actual}`);
    return this.assert(typeof expected == "string" ? actual.includes(expected) : actual.match(expected), "expected #{this} to match #{exp}", "expected #{this} not to match #{exp}", expected, actual);
  }), def("toContain", function(item) {
    let actual = this._obj;
    if (typeof Node < "u" && actual instanceof Node) {
      if (!(item instanceof Node)) throw new TypeError(`toContain() expected a DOM node as the argument, but got ${typeof item}`);
      return this.assert(actual.contains(item), "expected #{this} to contain element #{exp}", "expected #{this} not to contain element #{exp}", item, actual);
    }
    if (typeof DOMTokenList < "u" && actual instanceof DOMTokenList) {
      assertTypes(item, "class name", ["string"]);
      let expectedClassList = utils.flag(this, "negate") ? actual.value.replace(item, "").trim() : `${actual.value} ${item}`;
      return this.assert(actual.contains(item), `expected "${actual.value}" to contain "${item}"`, `expected "${actual.value}" not to contain "${item}"`, expectedClassList, actual.value);
    }
    return typeof actual == "string" && typeof item == "string" ? this.assert(actual.includes(item), "expected #{this} to contain #{exp}", "expected #{this} not to contain #{exp}", item, actual) : (actual != null && typeof actual != "string" && utils.flag(this, "object", Array.from(actual)), this.contain(item));
  }), def("toContainEqual", function(expected) {
    let obj = utils.flag(this, "object"), index = Array.from(obj).findIndex((item) => equals(item, expected, customTesters));
    this.assert(index !== -1, "expected #{this} to deep equally contain #{exp}", "expected #{this} to not deep equally contain #{exp}", expected);
  }), def("toBeTruthy", function() {
    let obj = utils.flag(this, "object");
    this.assert(!!obj, "expected #{this} to be truthy", "expected #{this} to not be truthy", obj, false);
  }), def("toBeFalsy", function() {
    let obj = utils.flag(this, "object");
    this.assert(!obj, "expected #{this} to be falsy", "expected #{this} to not be falsy", obj, false);
  }), def("toBeGreaterThan", function(expected) {
    let actual = this._obj;
    return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual > expected, `expected ${actual} to be greater than ${expected}`, `expected ${actual} to be not greater than ${expected}`, actual, expected, false);
  }), def("toBeGreaterThanOrEqual", function(expected) {
    let actual = this._obj;
    return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual >= expected, `expected ${actual} to be greater than or equal to ${expected}`, `expected ${actual} to be not greater than or equal to ${expected}`, actual, expected, false);
  }), def("toBeLessThan", function(expected) {
    let actual = this._obj;
    return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual < expected, `expected ${actual} to be less than ${expected}`, `expected ${actual} to be not less than ${expected}`, actual, expected, false);
  }), def("toBeLessThanOrEqual", function(expected) {
    let actual = this._obj;
    return assertTypes(actual, "actual", ["number", "bigint"]), assertTypes(expected, "expected", ["number", "bigint"]), this.assert(actual <= expected, `expected ${actual} to be less than or equal to ${expected}`, `expected ${actual} to be not less than or equal to ${expected}`, actual, expected, false);
  }), def("toBeNaN", function() {
    return this.be.NaN;
  }), def("toBeUndefined", function() {
    return this.be.undefined;
  }), def("toBeNull", function() {
    return this.be.null;
  }), def("toBeDefined", function() {
    let negate = utils.flag(this, "negate");
    return utils.flag(this, "negate", false), negate ? this.be.undefined : this.not.be.undefined;
  }), def("toBeTypeOf", function(expected) {
    let actual = typeof this._obj, equal = expected === actual;
    return this.assert(equal, "expected #{this} to be type of #{exp}", "expected #{this} not to be type of #{exp}", expected, actual);
  }), def("toBeInstanceOf", function(obj) {
    return this.instanceOf(obj);
  }), def("toHaveLength", function(length) {
    return this.have.length(length);
  }), def("toHaveProperty", function(...args) {
    Array.isArray(args[0]) && (args[0] = args[0].map((key) => String(key).replace(/([.[\]])/g, "\\$1")).join("."));
    let actual = this._obj, [propertyName, expected] = args, getValue = () => Object.prototype.hasOwnProperty.call(actual, propertyName) ? { value: actual[propertyName], exists: true } : utils.getPathInfo(actual, propertyName), { value, exists } = getValue(), pass = exists && (args.length === 1 || equals(expected, value, customTesters)), valueString = args.length === 1 ? "" : ` with value ${utils.objDisplay(expected)}`;
    return this.assert(pass, `expected #{this} to have property "${propertyName}"${valueString}`, `expected #{this} to not have property "${propertyName}"${valueString}`, expected, exists ? value : void 0);
  }), def("toBeCloseTo", function(received, precision = 2) {
    let expected = this._obj, pass = false, expectedDiff2 = 0, receivedDiff = 0;
    return received === Number.POSITIVE_INFINITY && expected === Number.POSITIVE_INFINITY || received === Number.NEGATIVE_INFINITY && expected === Number.NEGATIVE_INFINITY ? pass = true : (expectedDiff2 = 10 ** -precision / 2, receivedDiff = Math.abs(expected - received), pass = receivedDiff < expectedDiff2), this.assert(pass, `expected #{this} to be close to #{exp}, received difference is ${receivedDiff}, but expected ${expectedDiff2}`, `expected #{this} to not be close to #{exp}, received difference is ${receivedDiff}, but expected ${expectedDiff2}`, received, expected, false);
  });
  let assertIsMock = (assertion) => {
    if (!isMockFunction(assertion._obj)) throw new TypeError(`${utils.inspect(assertion._obj)} is not a spy or a call to a spy!`);
  }, getSpy = (assertion) => (assertIsMock(assertion), assertion._obj), ordinalOf = (i2) => {
    let j2 = i2 % 10, k2 = i2 % 100;
    return j2 === 1 && k2 !== 11 ? `${i2}st` : j2 === 2 && k2 !== 12 ? `${i2}nd` : j2 === 3 && k2 !== 13 ? `${i2}rd` : `${i2}th`;
  }, formatCalls = (spy, msg, actualCall) => (spy.mock.calls && (msg += c2().gray(`

Received: 

${spy.mock.calls.map((callArg, i2) => {
    let methodCall = c2().bold(`  ${ordinalOf(i2 + 1)} ${spy.getMockName()} call:

`);
    return actualCall ? methodCall += diff(actualCall, callArg, { omitAnnotationLines: true }) : methodCall += stringify(callArg).split(`
`).map((line) => `    ${line}`).join(`
`), methodCall += `
`, methodCall;
  }).join(`
`)}`)), msg += c2().gray(`

Number of calls: ${c2().bold(spy.mock.calls.length)}
`), msg), formatReturns = (spy, msg, actualReturn) => (msg += c2().gray(`

Received: 

${spy.mock.results.map((callReturn, i2) => {
    let methodCall = c2().bold(`  ${ordinalOf(i2 + 1)} ${spy.getMockName()} call return:

`);
    return actualReturn ? methodCall += diff(actualReturn, callReturn.value, { omitAnnotationLines: true }) : methodCall += stringify(callReturn).split(`
`).map((line) => `    ${line}`).join(`
`), methodCall += `
`, methodCall;
  }).join(`
`)}`), msg += c2().gray(`

Number of calls: ${c2().bold(spy.mock.calls.length)}
`), msg);
  def(["toHaveBeenCalledTimes", "toBeCalledTimes"], function(number) {
    let spy = getSpy(this), spyName = spy.getMockName(), callCount = spy.mock.calls.length;
    return this.assert(callCount === number, `expected "${spyName}" to be called #{exp} times, but got ${callCount} times`, `expected "${spyName}" to not be called #{exp} times`, number, callCount, false);
  }), def("toHaveBeenCalledOnce", function() {
    let spy = getSpy(this), spyName = spy.getMockName(), callCount = spy.mock.calls.length;
    return this.assert(callCount === 1, `expected "${spyName}" to be called once, but got ${callCount} times`, `expected "${spyName}" to not be called once`, 1, callCount, false);
  }), def(["toHaveBeenCalled", "toBeCalled"], function() {
    let spy = getSpy(this), spyName = spy.getMockName(), callCount = spy.mock.calls.length, called = callCount > 0, isNot = utils.flag(this, "negate"), msg = utils.getMessage(this, [called, `expected "${spyName}" to be called at least once`, `expected "${spyName}" to not be called at all, but actually been called ${callCount} times`, true, called]);
    if (called && isNot && (msg = formatCalls(spy, msg)), called && isNot || !called && !isNot) throw new AssertionError2(msg);
  }), def(["toHaveBeenCalledWith", "toBeCalledWith"], function(...args) {
    let spy = getSpy(this), spyName = spy.getMockName(), pass = spy.mock.calls.some((callArg) => equals(callArg, args, [...customTesters, iterableEquality])), isNot = utils.flag(this, "negate"), msg = utils.getMessage(this, [pass, `expected "${spyName}" to be called with arguments: #{exp}`, `expected "${spyName}" to not be called with arguments: #{exp}`, args]);
    if (pass && isNot || !pass && !isNot) throw new AssertionError2(formatCalls(spy, msg, args));
  }), def(["toHaveBeenNthCalledWith", "nthCalledWith"], function(times, ...args) {
    let spy = getSpy(this), spyName = spy.getMockName(), nthCall = spy.mock.calls[times - 1], callCount = spy.mock.calls.length, isCalled = times <= callCount;
    this.assert(equals(nthCall, args, [...customTesters, iterableEquality]), `expected ${ordinalOf(times)} "${spyName}" call to have been called with #{exp}${isCalled ? "" : `, but called only ${callCount} times`}`, `expected ${ordinalOf(times)} "${spyName}" call to not have been called with #{exp}`, args, nthCall, isCalled);
  }), def(["toHaveBeenLastCalledWith", "lastCalledWith"], function(...args) {
    let spy = getSpy(this), spyName = spy.getMockName(), lastCall = spy.mock.calls[spy.mock.calls.length - 1];
    this.assert(equals(lastCall, args, [...customTesters, iterableEquality]), `expected last "${spyName}" call to have been called with #{exp}`, `expected last "${spyName}" call to not have been called with #{exp}`, args, lastCall);
  }), def(["toThrow", "toThrowError"], function(expected) {
    if (typeof expected == "string" || typeof expected > "u" || expected instanceof RegExp) return this.throws(expected);
    let obj = this._obj, promise = utils.flag(this, "promise"), isNot = utils.flag(this, "negate"), thrown = null;
    if (promise === "rejects") thrown = obj;
    else if (promise === "resolves" && typeof obj != "function") {
      if (isNot) return;
      {
        let message = utils.flag(this, "message") || "expected promise to throw an error, but it didn't", error = { showDiff: false };
        throw new AssertionError2(message, error, utils.flag(this, "ssfi"));
      }
    } else {
      let isThrow = false;
      try {
        obj();
      } catch (err) {
        isThrow = true, thrown = err;
      }
      if (!isThrow && !isNot) {
        let message = utils.flag(this, "message") || "expected function to throw an error, but it didn't", error = { showDiff: false };
        throw new AssertionError2(message, error, utils.flag(this, "ssfi"));
      }
    }
    if (typeof expected == "function") {
      let name = expected.name || expected.prototype.constructor.name;
      return this.assert(thrown && thrown instanceof expected, `expected error to be instance of ${name}`, `expected error not to be instance of ${name}`, expected, thrown);
    }
    if (expected instanceof Error) return this.assert(thrown && expected.message === thrown.message, `expected error to have message: ${expected.message}`, `expected error not to have message: ${expected.message}`, expected.message, thrown && thrown.message);
    if (typeof expected == "object" && "asymmetricMatch" in expected && typeof expected.asymmetricMatch == "function") {
      let matcher = expected;
      return this.assert(thrown && matcher.asymmetricMatch(thrown), "expected error to match asymmetric matcher", "expected error not to match asymmetric matcher", matcher, thrown);
    }
    throw new Error(`"toThrow" expects string, RegExp, function, Error instance or asymmetric matcher, got "${typeof expected}"`);
  }), def(["toHaveReturned", "toReturn"], function() {
    let spy = getSpy(this), spyName = spy.getMockName(), calledAndNotThrew = spy.mock.calls.length > 0 && spy.mock.results.some(({ type: type3 }) => type3 !== "throw");
    this.assert(calledAndNotThrew, `expected "${spyName}" to be successfully called at least once`, `expected "${spyName}" to not be successfully called`, calledAndNotThrew, !calledAndNotThrew, false);
  }), def(["toHaveReturnedTimes", "toReturnTimes"], function(times) {
    let spy = getSpy(this), spyName = spy.getMockName(), successfulReturns = spy.mock.results.reduce((success, { type: type3 }) => type3 === "throw" ? success : ++success, 0);
    this.assert(successfulReturns === times, `expected "${spyName}" to be successfully called ${times} times`, `expected "${spyName}" to not be successfully called ${times} times`, `expected number of returns: ${times}`, `received number of returns: ${successfulReturns}`, false);
  }), def(["toHaveReturnedWith", "toReturnWith"], function(value) {
    let spy = getSpy(this), spyName = spy.getMockName(), pass = spy.mock.results.some(({ type: type3, value: result }) => type3 === "return" && equals(value, result)), isNot = utils.flag(this, "negate"), msg = utils.getMessage(this, [pass, `expected "${spyName}" to return with: #{exp} at least once`, `expected "${spyName}" to not return with: #{exp}`, value]);
    if (pass && isNot || !pass && !isNot) throw new AssertionError2(formatReturns(spy, msg, value));
  }), def(["toHaveLastReturnedWith", "lastReturnedWith"], function(value) {
    let spy = getSpy(this), spyName = spy.getMockName(), { value: lastResult } = spy.mock.results[spy.mock.results.length - 1], pass = equals(lastResult, value);
    this.assert(pass, `expected last "${spyName}" call to return #{exp}`, `expected last "${spyName}" call to not return #{exp}`, value, lastResult);
  }), def(["toHaveNthReturnedWith", "nthReturnedWith"], function(nthCall, value) {
    let spy = getSpy(this), spyName = spy.getMockName(), isNot = utils.flag(this, "negate"), { type: callType, value: callResult } = spy.mock.results[nthCall - 1], ordinalCall = `${ordinalOf(nthCall)} call`;
    !isNot && callType === "throw" && chai2.assert.fail(`expected ${ordinalCall} to return #{exp}, but instead it threw an error`);
    let nthCallReturn = equals(callResult, value);
    this.assert(nthCallReturn, `expected ${ordinalCall} "${spyName}" call to return #{exp}`, `expected ${ordinalCall} "${spyName}" call to not return #{exp}`, value, callResult);
  }), def("toSatisfy", function(matcher, message) {
    return this.be.satisfy(matcher, message);
  }), utils.addProperty(chai2.Assertion.prototype, "resolves", function() {
    let error = new Error("resolves");
    utils.flag(this, "promise", "resolves"), utils.flag(this, "error", error);
    let test2 = utils.flag(this, "vitest-test"), obj = utils.flag(this, "object");
    if (typeof (obj == null ? void 0 : obj.then) != "function") throw new TypeError(`You must provide a Promise to expect() when using .resolves, not '${typeof obj}'.`);
    let proxy = new Proxy(this, { get: (target, key, receiver) => {
      let result = Reflect.get(target, key, receiver);
      return typeof result != "function" ? result instanceof chai2.Assertion ? proxy : result : async (...args) => {
        let promise = obj.then((value) => (utils.flag(this, "object", value), result.call(this, ...args)), (err) => {
          let _error = new AssertionError2(`promise rejected "${utils.inspect(err)}" instead of resolving`, { showDiff: false });
          throw _error.cause = err, _error.stack = error.stack.replace(error.message, _error.message), _error;
        });
        return recordAsyncExpect(test2, promise);
      };
    } });
    return proxy;
  }), utils.addProperty(chai2.Assertion.prototype, "rejects", function() {
    let error = new Error("rejects");
    utils.flag(this, "promise", "rejects"), utils.flag(this, "error", error);
    let test2 = utils.flag(this, "vitest-test"), obj = utils.flag(this, "object"), wrapper = typeof obj == "function" ? obj() : obj;
    if (typeof (wrapper == null ? void 0 : wrapper.then) != "function") throw new TypeError(`You must provide a Promise to expect() when using .rejects, not '${typeof wrapper}'.`);
    let proxy = new Proxy(this, { get: (target, key, receiver) => {
      let result = Reflect.get(target, key, receiver);
      return typeof result != "function" ? result instanceof chai2.Assertion ? proxy : result : async (...args) => {
        let promise = wrapper.then((value) => {
          let _error = new AssertionError2(`promise resolved "${utils.inspect(value)}" instead of rejecting`, { showDiff: true, expected: new Error("rejected promise"), actual: value });
          throw _error.stack = error.stack.replace(error.message, _error.message), _error;
        }, (err) => (utils.flag(this, "object", err), result.call(this, ...args)));
        return recordAsyncExpect(test2, promise);
      };
    } });
    return proxy;
  });
};
function getMatcherState(assertion, expect4) {
  let obj = assertion._obj, isNot = util.flag(assertion, "negate"), promise = util.flag(assertion, "promise") || "", jestUtils = { ...getMatcherUtils(), diff, stringify, iterableEquality, subsetEquality };
  return { state: { ...getState(expect4), customTesters: getCustomEqualityTesters(), isNot, utils: jestUtils, promise, equals, suppressedErrors: [] }, isNot, obj };
}
var JestExtendError = class extends Error {
  constructor(message, actual, expected) {
    super(message), this.actual = actual, this.expected = expected;
  }
};
function JestExtendPlugin(expect4, matchers) {
  return (c2, utils) => {
    Object.entries(matchers).forEach(([expectAssertionName, expectAssertion]) => {
      function expectWrapper(...args) {
        let { state, isNot, obj } = getMatcherState(this, expect4), result = expectAssertion.call(state, obj, ...args);
        if (result && typeof result == "object" && result instanceof Promise) return result.then(({ pass: pass2, message: message2, actual: actual2, expected: expected2 }) => {
          if (pass2 && isNot || !pass2 && !isNot) throw new JestExtendError(message2(), actual2, expected2);
        });
        let { pass, message, actual, expected } = result;
        if (pass && isNot || !pass && !isNot) throw new JestExtendError(message(), actual, expected);
      }
      let softWrapper = wrapSoft(utils, expectWrapper);
      utils.addMethod(globalThis[JEST_MATCHERS_OBJECT].matchers, expectAssertionName, softWrapper), utils.addMethod(c2.Assertion.prototype, expectAssertionName, softWrapper);
      class CustomMatcher extends AsymmetricMatcher3 {
        constructor(inverse = false, ...sample) {
          super(sample, inverse);
        }
        asymmetricMatch(other) {
          let { pass } = expectAssertion.call(this.getMatcherContext(expect4), other, ...this.sample);
          return this.inverse ? !pass : pass;
        }
        toString() {
          return `${this.inverse ? "not." : ""}${expectAssertionName}`;
        }
        getExpectedType() {
          return "any";
        }
        toAsymmetricMatcher() {
          return `${this.toString()}<${this.sample.map(String).join(", ")}>`;
        }
      }
      let customMatcher = (...sample) => new CustomMatcher(false, ...sample);
      Object.defineProperty(expect4, expectAssertionName, { configurable: true, enumerable: true, value: customMatcher, writable: true }), Object.defineProperty(expect4.not, expectAssertionName, { configurable: true, enumerable: true, value: (...sample) => new CustomMatcher(true, ...sample), writable: true }), Object.defineProperty(globalThis[ASYMMETRIC_MATCHERS_OBJECT], expectAssertionName, { configurable: true, enumerable: true, value: customMatcher, writable: true });
    });
  };
}
var JestExtend = (chai2, utils) => {
  utils.addMethod(chai2.expect, "extend", (expect4, expects) => {
    chai2.use(JestExtendPlugin(expect4, expects));
  });
};
var matchers_exports = {};
__export(matchers_exports, { toBeChecked: () => toBeChecked, toBeDisabled: () => toBeDisabled, toBeEmpty: () => toBeEmpty, toBeEmptyDOMElement: () => toBeEmptyDOMElement, toBeEnabled: () => toBeEnabled, toBeInTheDOM: () => toBeInTheDOM, toBeInTheDocument: () => toBeInTheDocument, toBeInvalid: () => toBeInvalid, toBePartiallyChecked: () => toBePartiallyChecked, toBeRequired: () => toBeRequired, toBeValid: () => toBeValid, toBeVisible: () => toBeVisible, toContainElement: () => toContainElement, toContainHTML: () => toContainHTML, toHaveAccessibleDescription: () => toHaveAccessibleDescription, toHaveAccessibleErrorMessage: () => toHaveAccessibleErrorMessage, toHaveAccessibleName: () => toHaveAccessibleName, toHaveAttribute: () => toHaveAttribute, toHaveClass: () => toHaveClass, toHaveDescription: () => toHaveDescription, toHaveDisplayValue: () => toHaveDisplayValue, toHaveErrorMessage: () => toHaveErrorMessage, toHaveFocus: () => toHaveFocus, toHaveFormValues: () => toHaveFormValues, toHaveRole: () => toHaveRole, toHaveStyle: () => toHaveStyle, toHaveTextContent: () => toHaveTextContent, toHaveValue: () => toHaveValue });
var import_redent = __toESM(require_redent(), 1);
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, "__esModule", { value: true, configurable: true });
}
function $parcel$export(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $009ddb00d3ec72b8$exports = {};
$parcel$defineInteropFlag($009ddb00d3ec72b8$exports);
$parcel$export($009ddb00d3ec72b8$exports, "default", () => $009ddb00d3ec72b8$export$2e2bcd8739ae039);
var $009ddb00d3ec72b8$export$2e2bcd8739ae039 = class extends Error {
  constructor(filename, msg, lineno, column, css) {
    super(filename + ":" + lineno + ":" + column + ": " + msg), this.reason = msg, this.filename = filename, this.line = lineno, this.column = column, this.source = css;
  }
}, $0865a9fb4cc365fe$exports = {};
$parcel$defineInteropFlag($0865a9fb4cc365fe$exports);
$parcel$export($0865a9fb4cc365fe$exports, "default", () => $0865a9fb4cc365fe$export$2e2bcd8739ae039);
var $0865a9fb4cc365fe$export$2e2bcd8739ae039 = class {
  constructor(start, end, source) {
    this.start = start, this.end = end, this.source = source;
  }
}, $b2e137848b48cf4f$exports = {};
$parcel$export($b2e137848b48cf4f$exports, "CssTypes", () => $b2e137848b48cf4f$export$9be5dd6e61d5d73a);
var $b2e137848b48cf4f$export$9be5dd6e61d5d73a;
(function(CssTypes) {
  CssTypes.stylesheet = "stylesheet", CssTypes.rule = "rule", CssTypes.declaration = "declaration", CssTypes.comment = "comment", CssTypes.container = "container", CssTypes.charset = "charset", CssTypes.document = "document", CssTypes.customMedia = "custom-media", CssTypes.fontFace = "font-face", CssTypes.host = "host", CssTypes.import = "import", CssTypes.keyframes = "keyframes", CssTypes.keyframe = "keyframe", CssTypes.layer = "layer", CssTypes.media = "media", CssTypes.namespace = "namespace", CssTypes.page = "page", CssTypes.supports = "supports";
})($b2e137848b48cf4f$export$9be5dd6e61d5d73a || ($b2e137848b48cf4f$export$9be5dd6e61d5d73a = {}));
var $d708735ed1303b43$var$commentre = /\/\*[^]*?(?:\*\/|$)/g, $d708735ed1303b43$export$98e6a39c04603d36 = (css, options) => {
  options = options || {};
  let lineno = 1, column = 1;
  function updatePosition(str) {
    let lines = str.match(/\n/g);
    lines && (lineno += lines.length);
    let i2 = str.lastIndexOf(`
`);
    column = ~i2 ? str.length - i2 : column + str.length;
  }
  function position() {
    let start = { line: lineno, column };
    return function(node) {
      return node.position = new $0865a9fb4cc365fe$export$2e2bcd8739ae039(start, { line: lineno, column }, (options == null ? void 0 : options.source) || ""), whitespace(), node;
    };
  }
  let errorsList = [];
  function error(msg) {
    let err = new $009ddb00d3ec72b8$export$2e2bcd8739ae039((options == null ? void 0 : options.source) || "", msg, lineno, column, css);
    if (options == null ? void 0 : options.silent) errorsList.push(err);
    else throw err;
  }
  function stylesheet() {
    let rulesList = rules();
    return { type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.stylesheet, stylesheet: { source: options == null ? void 0 : options.source, rules: rulesList, parsingErrors: errorsList } };
  }
  function open() {
    return match(/^{\s*/);
  }
  function close() {
    return match(/^}/);
  }
  function rules() {
    let node, rules2 = [];
    for (whitespace(), comments(rules2); css.length && css.charAt(0) !== "}" && (node = atrule() || rule()); ) node && (rules2.push(node), comments(rules2));
    return rules2;
  }
  function match(re2) {
    let m2 = re2.exec(css);
    if (!m2) return;
    let str = m2[0];
    return updatePosition(str), css = css.slice(str.length), m2;
  }
  function whitespace() {
    match(/^\s*/);
  }
  function comments(rules2) {
    let c2;
    for (rules2 = rules2 || []; c2 = comment(); ) c2 && rules2.push(c2);
    return rules2;
  }
  function comment() {
    let pos = position();
    if (css.charAt(0) !== "/" || css.charAt(1) !== "*") return;
    let m2 = match(/^\/\*[^]*?\*\//);
    return m2 ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.comment, comment: m2[0].slice(2, -2) }) : error("End of comment missing");
  }
  function findClosingParenthese(str, start, depth) {
    let ptr = start + 1, found = false, closeParentheses = str.indexOf(")", ptr);
    for (; !found && closeParentheses !== -1; ) {
      let nextParentheses = str.indexOf("(", ptr);
      nextParentheses !== -1 && nextParentheses < closeParentheses ? (ptr = findClosingParenthese(str, nextParentheses + 1) + 1, closeParentheses = str.indexOf(")", ptr)) : found = true;
    }
    return found && closeParentheses !== -1 ? closeParentheses : -1;
  }
  function selector() {
    let m2 = match(/^([^{]+)/);
    if (!m2) return;
    let res = $d708735ed1303b43$var$trim(m2[0]).replace($d708735ed1303b43$var$commentre, "");
    if (res.indexOf(",") === -1) return [res];
    let ptr = 0, startParentheses = res.indexOf("(", ptr);
    for (; startParentheses !== -1; ) {
      let closeParentheses = findClosingParenthese(res, startParentheses);
      if (closeParentheses === -1) break;
      ptr = closeParentheses + 1, res = res.substring(0, startParentheses) + res.substring(startParentheses, closeParentheses).replace(/,/g, "‌") + res.substring(closeParentheses), startParentheses = res.indexOf("(", ptr);
    }
    return res = res.replace(/("|')(?:\\\1|.)*?\1/g, (m3) => m3.replace(/,/g, "‌")), res.split(",").map((s2) => $d708735ed1303b43$var$trim(s2.replace(/\u200C/g, ",")));
  }
  function declaration() {
    let pos = position(), propMatch = match(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
    if (!propMatch) return;
    let propValue = $d708735ed1303b43$var$trim(propMatch[0]);
    if (!match(/^:\s*/)) return error("property missing ':'");
    let val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/), ret = pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.declaration, property: propValue.replace($d708735ed1303b43$var$commentre, ""), value: val ? $d708735ed1303b43$var$trim(val[0]).replace($d708735ed1303b43$var$commentre, "") : "" });
    return match(/^[;\s]*/), ret;
  }
  function declarations() {
    let decls = [];
    if (!open()) return error("missing '{'");
    comments(decls);
    let decl;
    for (; decl = declaration(); ) decl && (decls.push(decl), comments(decls));
    return close() ? decls : error("missing '}'");
  }
  function keyframe() {
    let m2, vals = [], pos = position();
    for (; m2 = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/); ) vals.push(m2[1]), match(/^,\s*/);
    if (vals.length) return pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.keyframe, values: vals, declarations: declarations() || [] });
  }
  function atkeyframes() {
    let pos = position(), m1 = match(/^@([-\w]+)?keyframes\s*/);
    if (!m1) return;
    let vendor = m1[1], m2 = match(/^([-\w]+)\s*/);
    if (!m2) return error("@keyframes missing name");
    let name = m2[1];
    if (!open()) return error("@keyframes missing '{'");
    let frame, frames = comments();
    for (; frame = keyframe(); ) frames.push(frame), frames = frames.concat(comments());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.keyframes, name, vendor, keyframes: frames }) : error("@keyframes missing '}'");
  }
  function atsupports() {
    let pos = position(), m2 = match(/^@supports *([^{]+)/);
    if (!m2) return;
    let supports = $d708735ed1303b43$var$trim(m2[1]);
    if (!open()) return error("@supports missing '{'");
    let style = comments().concat(rules());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.supports, supports, rules: style }) : error("@supports missing '}'");
  }
  function athost() {
    let pos = position();
    if (!match(/^@host\s*/)) return;
    if (!open()) return error("@host missing '{'");
    let style = comments().concat(rules());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.host, rules: style }) : error("@host missing '}'");
  }
  function atcontainer() {
    let pos = position(), m2 = match(/^@container *([^{]+)/);
    if (!m2) return;
    let container = $d708735ed1303b43$var$trim(m2[1]);
    if (!open()) return error("@container missing '{'");
    let style = comments().concat(rules());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.container, container, rules: style }) : error("@container missing '}'");
  }
  function atlayer() {
    let pos = position(), m2 = match(/^@layer *([^{;@]+)/);
    if (!m2) return;
    let layer = $d708735ed1303b43$var$trim(m2[1]);
    if (!open()) return match(/^[;\s]*/), pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.layer, layer });
    let style = comments().concat(rules());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.layer, layer, rules: style }) : error("@layer missing '}'");
  }
  function atmedia() {
    let pos = position(), m2 = match(/^@media *([^{]+)/);
    if (!m2) return;
    let media = $d708735ed1303b43$var$trim(m2[1]);
    if (!open()) return error("@media missing '{'");
    let style = comments().concat(rules());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.media, media, rules: style }) : error("@media missing '}'");
  }
  function atcustommedia() {
    let pos = position(), m2 = match(/^@custom-media\s+(--\S+)\s*([^{;\s][^{;]*);/);
    if (m2) return pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.customMedia, name: $d708735ed1303b43$var$trim(m2[1]), media: $d708735ed1303b43$var$trim(m2[2]) });
  }
  function atpage() {
    let pos = position();
    if (!match(/^@page */)) return;
    let sel = selector() || [];
    if (!open()) return error("@page missing '{'");
    let decls = comments(), decl;
    for (; decl = declaration(); ) decls.push(decl), decls = decls.concat(comments());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.page, selectors: sel, declarations: decls }) : error("@page missing '}'");
  }
  function atdocument() {
    let pos = position(), m2 = match(/^@([-\w]+)?document *([^{]+)/);
    if (!m2) return;
    let vendor = $d708735ed1303b43$var$trim(m2[1]), doc = $d708735ed1303b43$var$trim(m2[2]);
    if (!open()) return error("@document missing '{'");
    let style = comments().concat(rules());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.document, document: doc, vendor, rules: style }) : error("@document missing '}'");
  }
  function atfontface() {
    let pos = position();
    if (!match(/^@font-face\s*/)) return;
    if (!open()) return error("@font-face missing '{'");
    let decls = comments(), decl;
    for (; decl = declaration(); ) decls.push(decl), decls = decls.concat(comments());
    return close() ? pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.fontFace, declarations: decls }) : error("@font-face missing '}'");
  }
  let atimport = _compileAtrule("import"), atcharset = _compileAtrule("charset"), atnamespace = _compileAtrule("namespace");
  function _compileAtrule(name) {
    let re2 = new RegExp("^@" + name + `\\s*((?::?[^;'"]|"(?:\\\\"|[^"])*?"|'(?:\\\\'|[^'])*?')+)(?:;|$)`);
    return function() {
      let pos = position(), m2 = match(re2);
      if (!m2) return;
      let ret = { type: name };
      return ret[name] = m2[1].trim(), pos(ret);
    };
  }
  function atrule() {
    if (css[0] === "@") return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface() || atcontainer() || atlayer();
  }
  function rule() {
    let pos = position(), sel = selector();
    return sel ? (comments(), pos({ type: $b2e137848b48cf4f$export$9be5dd6e61d5d73a.rule, selectors: sel, declarations: declarations() || [] })) : error("selector missing");
  }
  return $d708735ed1303b43$var$addParent(stylesheet());
};
function $d708735ed1303b43$var$trim(str) {
  return str ? str.trim() : "";
}
function $d708735ed1303b43$var$addParent(obj, parent) {
  let isNode = obj && typeof obj.type == "string", childParent = isNode ? obj : parent;
  for (let k2 in obj) {
    let value = obj[k2];
    Array.isArray(value) ? value.forEach((v2) => {
      $d708735ed1303b43$var$addParent(v2, childParent);
    }) : value && typeof value == "object" && $d708735ed1303b43$var$addParent(value, childParent);
  }
  return isNode && Object.defineProperty(obj, "parent", { configurable: true, writable: true, enumerable: false, value: parent || null }), obj;
}
var $d708735ed1303b43$export$2e2bcd8739ae039 = $d708735ed1303b43$export$98e6a39c04603d36;
var $149c1bd638913645$export$98e6a39c04603d36 = $d708735ed1303b43$export$2e2bcd8739ae039;
var toStr$1 = Object.prototype.toString;
function isCallable$1(fn3) {
  return typeof fn3 == "function" || toStr$1.call(fn3) === "[object Function]";
}
function toInteger$1(value) {
  var number = Number(value);
  return isNaN(number) ? 0 : number === 0 || !isFinite(number) ? number : (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
var maxSafeInteger$1 = Math.pow(2, 53) - 1;
function toLength$1(value) {
  var len = toInteger$1(value);
  return Math.min(Math.max(len, 0), maxSafeInteger$1);
}
function arrayFrom$1(arrayLike, mapFn) {
  var C2 = Array, items = Object(arrayLike);
  if (arrayLike == null) throw new TypeError("Array.from requires an array-like object - not null or undefined");
  for (var len = toLength$1(items.length), A2 = isCallable$1(C2) ? Object(new C2(len)) : new Array(len), k2 = 0, kValue; k2 < len; ) kValue = items[k2], A2[k2] = kValue, k2 += 1;
  return A2.length = len, A2;
}
function _typeof$3(o) {
  "@babel/helpers - typeof";
  return _typeof$3 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && typeof Symbol == "function" && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof$3(o);
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties$1(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false, descriptor.configurable = true, "value" in descriptor && (descriptor.writable = true), Object.defineProperty(target, _toPropertyKey$2(descriptor.key), descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties$1(Constructor.prototype, protoProps), Object.defineProperty(Constructor, "prototype", { writable: false }), Constructor;
}
function _defineProperty$3(obj, key, value) {
  return key = _toPropertyKey$2(key), key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
function _toPropertyKey$2(arg) {
  var key = _toPrimitive$2(arg, "string");
  return _typeof$3(key) === "symbol" ? key : String(key);
}
function _toPrimitive$2(input2, hint) {
  if (_typeof$3(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$3(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
var SetLike$2 = function() {
  function SetLike3() {
    var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classCallCheck$1(this, SetLike3), _defineProperty$3(this, "items", void 0), this.items = items;
  }
  return _createClass$1(SetLike3, [{ key: "add", value: function(value) {
    return this.has(value) === false && this.items.push(value), this;
  } }, { key: "clear", value: function() {
    this.items = [];
  } }, { key: "delete", value: function(value) {
    var previousLength = this.items.length;
    return this.items = this.items.filter(function(item) {
      return item !== value;
    }), previousLength !== this.items.length;
  } }, { key: "forEach", value: function(callbackfn) {
    var _this = this;
    this.items.forEach(function(item) {
      callbackfn(item, item, _this);
    });
  } }, { key: "has", value: function(value) {
    return this.items.indexOf(value) !== -1;
  } }, { key: "size", get: function() {
    return this.items.length;
  } }]), SetLike3;
}(), SetLike_default = typeof Set > "u" ? Set : SetLike$2;
function getLocalName$1(element) {
  var _element$localName;
  return (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : element.tagName.toLowerCase();
}
var localNameToRoleMappings$1 = { article: "article", aside: "complementary", button: "button", datalist: "listbox", dd: "definition", details: "group", dialog: "dialog", dt: "term", fieldset: "group", figure: "figure", form: "form", footer: "contentinfo", h1: "heading", h2: "heading", h3: "heading", h4: "heading", h5: "heading", h6: "heading", header: "banner", hr: "separator", html: "document", legend: "legend", li: "listitem", math: "math", main: "main", menu: "list", nav: "navigation", ol: "list", optgroup: "group", option: "option", output: "status", progress: "progressbar", section: "region", summary: "button", table: "table", tbody: "rowgroup", textarea: "textbox", tfoot: "rowgroup", td: "cell", th: "columnheader", thead: "rowgroup", tr: "row", ul: "list" }, prohibitedAttributes$1 = { caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]), insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), none: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]) };
function hasGlobalAriaAttributes$1(element, role) {
  return ["aria-atomic", "aria-busy", "aria-controls", "aria-current", "aria-description", "aria-describedby", "aria-details", "aria-dropeffect", "aria-flowto", "aria-grabbed", "aria-hidden", "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-live", "aria-owns", "aria-relevant", "aria-roledescription"].some(function(attributeName) {
    var _prohibitedAttributes;
    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes$1[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
  });
}
function ignorePresentationalRole$1(element, implicitRole) {
  return hasGlobalAriaAttributes$1(element, implicitRole);
}
function getRole$1(element) {
  var explicitRole = getExplicitRole$1(element);
  if (explicitRole === null || presentationRoles.indexOf(explicitRole) !== -1) {
    var implicitRole = getImplicitRole$1(element);
    if (presentationRoles.indexOf(explicitRole || "") === -1 || ignorePresentationalRole$1(element, implicitRole || "")) return implicitRole;
  }
  return explicitRole;
}
function getImplicitRole$1(element) {
  var mappedByTag = localNameToRoleMappings$1[getLocalName$1(element)];
  if (mappedByTag !== void 0) return mappedByTag;
  switch (getLocalName$1(element)) {
    case "a":
    case "area":
    case "link":
      if (element.hasAttribute("href")) return "link";
      break;
    case "img":
      return element.getAttribute("alt") === "" && !ignorePresentationalRole$1(element, "img") ? "presentation" : "img";
    case "input": {
      var _ref = element, type3 = _ref.type;
      switch (type3) {
        case "button":
        case "image":
        case "reset":
        case "submit":
          return "button";
        case "checkbox":
        case "radio":
          return type3;
        case "range":
          return "slider";
        case "email":
        case "tel":
        case "text":
        case "url":
          return element.hasAttribute("list") ? "combobox" : "textbox";
        case "search":
          return element.hasAttribute("list") ? "combobox" : "searchbox";
        case "number":
          return "spinbutton";
        default:
          return null;
      }
    }
    case "select":
      return element.hasAttribute("multiple") || element.size > 1 ? "listbox" : "combobox";
  }
  return null;
}
function getExplicitRole$1(element) {
  var role = element.getAttribute("role");
  if (role !== null) {
    var explicitRole = role.trim().split(" ")[0];
    if (explicitRole.length > 0) return explicitRole;
  }
  return null;
}
var presentationRoles = ["presentation", "none"];
function isElement$1(node) {
  return node !== null && node.nodeType === node.ELEMENT_NODE;
}
function isHTMLTableCaptionElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "caption";
}
function isHTMLInputElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "input";
}
function isHTMLOptGroupElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "optgroup";
}
function isHTMLSelectElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "select";
}
function isHTMLTableElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "table";
}
function isHTMLTextAreaElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "textarea";
}
function safeWindow$1(node) {
  var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
  if (defaultView === null) throw new TypeError("no window available");
  return defaultView;
}
function isHTMLFieldSetElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "fieldset";
}
function isHTMLLegendElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "legend";
}
function isHTMLSlotElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "slot";
}
function isSVGElement$1(node) {
  return isElement$1(node) && node.ownerSVGElement !== void 0;
}
function isSVGSVGElement$1(node) {
  return isElement$1(node) && getLocalName$1(node) === "svg";
}
function isSVGTitleElement$1(node) {
  return isSVGElement$1(node) && getLocalName$1(node) === "title";
}
function queryIdRefs$1(node, attributeName) {
  if (isElement$1(node) && node.hasAttribute(attributeName)) {
    var ids = node.getAttribute(attributeName).split(" "), root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    return ids.map(function(id) {
      return root.getElementById(id);
    }).filter(function(element) {
      return element !== null;
    });
  }
  return [];
}
function hasAnyConcreteRoles$1(node, roles3) {
  return isElement$1(node) ? roles3.indexOf(getRole$1(node)) !== -1 : false;
}
function asFlatString$1(s2) {
  return s2.trim().replace(/\s\s+/g, " ");
}
function isHidden$1(node, getComputedStyleImplementation) {
  if (!isElement$1(node)) return false;
  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") return true;
  var style = getComputedStyleImplementation(node);
  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
}
function isControl$1(node) {
  return hasAnyConcreteRoles$1(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole$1(node, "range");
}
function hasAbstractRole$1(node, role) {
  if (!isElement$1(node)) return false;
  switch (role) {
    case "range":
      return hasAnyConcreteRoles$1(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
    default:
      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
  }
}
function querySelectorAllSubtree$1(element, selectors) {
  var elements = arrayFrom$1(element.querySelectorAll(selectors));
  return queryIdRefs$1(element, "aria-owns").forEach(function(root) {
    elements.push.apply(elements, arrayFrom$1(root.querySelectorAll(selectors)));
  }), elements;
}
function querySelectedOptions$1(listbox) {
  return isHTMLSelectElement$1(listbox) ? listbox.selectedOptions || querySelectorAllSubtree$1(listbox, "[selected]") : querySelectorAllSubtree$1(listbox, '[aria-selected="true"]');
}
function isMarkedPresentational$1(node) {
  return hasAnyConcreteRoles$1(node, presentationRoles);
}
function isNativeHostLanguageTextAlternativeElement$1(node) {
  return isHTMLTableCaptionElement$1(node);
}
function allowsNameFromContent$1(node) {
  return hasAnyConcreteRoles$1(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
}
function isDescendantOfNativeHostLanguageTextAlternativeElement$1(node) {
  return false;
}
function getValueOfTextbox$1(element) {
  return isHTMLInputElement$1(element) || isHTMLTextAreaElement$1(element) ? element.value : element.textContent || "";
}
function getTextualContent$1(declaration) {
  var content = declaration.getPropertyValue("content");
  return /^["'].*["']$/.test(content) ? content.slice(1, -1) : "";
}
function isLabelableElement$1(element) {
  var localName = getLocalName$1(element);
  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
}
function findLabelableElement$1(element) {
  if (isLabelableElement$1(element)) return element;
  var labelableElement = null;
  return element.childNodes.forEach(function(childNode) {
    if (labelableElement === null && isElement$1(childNode)) {
      var descendantLabelableElement = findLabelableElement$1(childNode);
      descendantLabelableElement !== null && (labelableElement = descendantLabelableElement);
    }
  }), labelableElement;
}
function getControlOfLabel$1(label) {
  if (label.control !== void 0) return label.control;
  var htmlFor = label.getAttribute("for");
  return htmlFor !== null ? label.ownerDocument.getElementById(htmlFor) : findLabelableElement$1(label);
}
function getLabels$2(element) {
  var labelsProperty = element.labels;
  if (labelsProperty === null) return labelsProperty;
  if (labelsProperty !== void 0) return arrayFrom$1(labelsProperty);
  if (!isLabelableElement$1(element)) return null;
  var document2 = element.ownerDocument;
  return arrayFrom$1(document2.querySelectorAll("label")).filter(function(label) {
    return getControlOfLabel$1(label) === element;
  });
}
function getSlotContents$1(slot) {
  var assignedNodes = slot.assignedNodes();
  return assignedNodes.length === 0 ? arrayFrom$1(slot.childNodes) : assignedNodes;
}
function computeTextAlternative$1(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, consultedNodes = new SetLike_default(), window2 = safeWindow$1(root), _options$compute = options.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
  function computeMiscTextAlternative(node, context) {
    var accumulatedText = "";
    if (isElement$1(node) && computedStyleSupportsPseudoElements) {
      var pseudoBefore = getComputedStyle(node, "::before"), beforeContent = getTextualContent$1(pseudoBefore);
      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
    }
    var childNodes = isHTMLSlotElement$1(node) ? getSlotContents$1(node) : arrayFrom$1(node.childNodes).concat(queryIdRefs$1(node, "aria-owns"));
    if (childNodes.forEach(function(child) {
      var result = computeTextAlternative3(child, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true }), display2 = isElement$1(child) ? getComputedStyle(child).getPropertyValue("display") : "inline", separator = display2 !== "inline" ? " " : "";
      accumulatedText += "".concat(separator).concat(result).concat(separator);
    }), isElement$1(node) && computedStyleSupportsPseudoElements) {
      var pseudoAfter = getComputedStyle(node, "::after"), afterContent = getTextualContent$1(pseudoAfter);
      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
    }
    return accumulatedText.trim();
  }
  function useAttribute(element, attributeName) {
    var attribute = element.getAttributeNode(attributeName);
    return attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "" ? (consultedNodes.add(attribute), attribute.value) : null;
  }
  function computeTooltipAttributeValue(node) {
    return isElement$1(node) ? useAttribute(node, "title") : null;
  }
  function computeElementTextAlternative(node) {
    if (!isElement$1(node)) return null;
    if (isHTMLFieldSetElement$1(node)) {
      consultedNodes.add(node);
      for (var children = arrayFrom$1(node.childNodes), i2 = 0; i2 < children.length; i2 += 1) {
        var child = children[i2];
        if (isHTMLLegendElement$1(child)) return computeTextAlternative3(child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
      }
    } else if (isHTMLTableElement$1(node)) {
      consultedNodes.add(node);
      for (var _children = arrayFrom$1(node.childNodes), _i2 = 0; _i2 < _children.length; _i2 += 1) {
        var _child = _children[_i2];
        if (isHTMLTableCaptionElement$1(_child)) return computeTextAlternative3(_child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
      }
    } else if (isSVGSVGElement$1(node)) {
      consultedNodes.add(node);
      for (var _children2 = arrayFrom$1(node.childNodes), _i22 = 0; _i22 < _children2.length; _i22 += 1) {
        var _child2 = _children2[_i22];
        if (isSVGTitleElement$1(_child2)) return _child2.textContent;
      }
      return null;
    } else if (getLocalName$1(node) === "img" || getLocalName$1(node) === "area") {
      var nameFromAlt = useAttribute(node, "alt");
      if (nameFromAlt !== null) return nameFromAlt;
    } else if (isHTMLOptGroupElement$1(node)) {
      var nameFromLabel = useAttribute(node, "label");
      if (nameFromLabel !== null) return nameFromLabel;
    }
    if (isHTMLInputElement$1(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
      var nameFromValue = useAttribute(node, "value");
      if (nameFromValue !== null) return nameFromValue;
      if (node.type === "submit") return "Submit";
      if (node.type === "reset") return "Reset";
    }
    var labels = getLabels$2(node);
    if (labels !== null && labels.length !== 0) return consultedNodes.add(node), arrayFrom$1(labels).map(function(element) {
      return computeTextAlternative3(element, { isEmbeddedInLabel: true, isReferenced: false, recursion: true });
    }).filter(function(label) {
      return label.length > 0;
    }).join(" ");
    if (isHTMLInputElement$1(node) && node.type === "image") {
      var _nameFromAlt = useAttribute(node, "alt");
      if (_nameFromAlt !== null) return _nameFromAlt;
      var nameFromTitle = useAttribute(node, "title");
      return nameFromTitle !== null ? nameFromTitle : "Submit Query";
    }
    if (hasAnyConcreteRoles$1(node, ["button"])) {
      var nameFromSubTree = computeMiscTextAlternative(node, { isEmbeddedInLabel: false, isReferenced: false });
      if (nameFromSubTree !== "") return nameFromSubTree;
    }
    return null;
  }
  function computeTextAlternative3(current, context) {
    if (consultedNodes.has(current)) return "";
    if (!hidden && isHidden$1(current, getComputedStyle) && !context.isReferenced) return consultedNodes.add(current), "";
    var labelAttributeNode = isElement$1(current) ? current.getAttributeNode("aria-labelledby") : null, labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs$1(current, "aria-labelledby") : [];
    if (compute === "name" && !context.isReferenced && labelElements.length > 0) return consultedNodes.add(labelAttributeNode), labelElements.map(function(element) {
      return computeTextAlternative3(element, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: true, recursion: false });
    }).join(" ");
    var skipToStep2E = context.recursion && isControl$1(current) && compute === "name";
    if (!skipToStep2E) {
      var ariaLabel = (isElement$1(current) && current.getAttribute("aria-label") || "").trim();
      if (ariaLabel !== "" && compute === "name") return consultedNodes.add(current), ariaLabel;
      if (!isMarkedPresentational$1(current)) {
        var elementTextAlternative = computeElementTextAlternative(current);
        if (elementTextAlternative !== null) return consultedNodes.add(current), elementTextAlternative;
      }
    }
    if (hasAnyConcreteRoles$1(current, ["menu"])) return consultedNodes.add(current), "";
    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
      if (hasAnyConcreteRoles$1(current, ["combobox", "listbox"])) {
        consultedNodes.add(current);
        var selectedOptions = querySelectedOptions$1(current);
        return selectedOptions.length === 0 ? isHTMLInputElement$1(current) ? current.value : "" : arrayFrom$1(selectedOptions).map(function(selectedOption) {
          return computeTextAlternative3(selectedOption, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true });
        }).join(" ");
      }
      if (hasAbstractRole$1(current, "range")) return consultedNodes.add(current), current.hasAttribute("aria-valuetext") ? current.getAttribute("aria-valuetext") : current.hasAttribute("aria-valuenow") ? current.getAttribute("aria-valuenow") : current.getAttribute("value") || "";
      if (hasAnyConcreteRoles$1(current, ["textbox"])) return consultedNodes.add(current), getValueOfTextbox$1(current);
    }
    if (allowsNameFromContent$1(current) || isElement$1(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement$1(current) || isDescendantOfNativeHostLanguageTextAlternativeElement$1()) {
      var accumulatedText2F = computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
      if (accumulatedText2F !== "") return consultedNodes.add(current), accumulatedText2F;
    }
    if (current.nodeType === current.TEXT_NODE) return consultedNodes.add(current), current.textContent || "";
    if (context.recursion) return consultedNodes.add(current), computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
    var tooltipAttributeValue = computeTooltipAttributeValue(current);
    return tooltipAttributeValue !== null ? (consultedNodes.add(current), tooltipAttributeValue) : (consultedNodes.add(current), "");
  }
  return asFlatString$1(computeTextAlternative3(root, { isEmbeddedInLabel: false, isReferenced: compute === "description", recursion: false }));
}
function _typeof2(o) {
  "@babel/helpers - typeof";
  return _typeof2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && typeof Symbol == "function" && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof2(o);
}
function ownKeys$1(e2, r2) {
  var t = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e2);
    r2 && (o = o.filter(function(r22) {
      return Object.getOwnPropertyDescriptor(e2, r22).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t = arguments[r2] != null ? arguments[r2] : {};
    r2 % 2 ? ownKeys$1(Object(t), true).forEach(function(r22) {
      _defineProperty2(e2, r22, t[r22]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r22) {
      Object.defineProperty(e2, r22, Object.getOwnPropertyDescriptor(t, r22));
    });
  }
  return e2;
}
function _defineProperty2(obj, key, value) {
  return key = _toPropertyKey2(key), key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return _typeof2(key) === "symbol" ? key : String(key);
}
function _toPrimitive2(input2, hint) {
  if (_typeof2(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof2(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function computeAccessibleDescription$1(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, description = queryIdRefs$1(root, "aria-describedby").map(function(element) {
    return computeTextAlternative$1(element, _objectSpread$1(_objectSpread$1({}, options), {}, { compute: "description" }));
  }).join(" ");
  if (description === "") {
    var ariaDescription = root.getAttribute("aria-description");
    description = ariaDescription === null ? "" : ariaDescription;
  }
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
function prohibitsNaming$1(node) {
  return hasAnyConcreteRoles$1(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "none", "paragraph", "presentation", "strong", "subscript", "superscript"]);
}
function computeAccessibleName$1(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return prohibitsNaming$1(root) ? "" : computeTextAlternative$1(root, options);
}
var import_aria_query = __toESM(require_lib(), 1), import_chalk = __toESM(require_source(), 1), import_isEqualWith = __toESM(require_isEqualWith(), 1), import_css = __toESM(require_css_escape(), 1), GenericTypeError = class extends Error {
  constructor(expectedString, received, matcherFn, context) {
    super(), Error.captureStackTrace && Error.captureStackTrace(this, matcherFn);
    let withType = "";
    try {
      withType = context.utils.printWithType("Received", received, context.utils.printReceived);
    } catch {
    }
    this.message = [context.utils.matcherHint(`${context.isNot ? ".not" : ""}.${matcherFn.name}`, "received", ""), "", `${context.utils.RECEIVED_COLOR("received")} value must ${expectedString}.`, withType].join(`
`);
  }
}, HtmlElementTypeError = class extends GenericTypeError {
  constructor(...args) {
    super("be an HTMLElement or an SVGElement", ...args);
  }
}, NodeTypeError = class extends GenericTypeError {
  constructor(...args) {
    super("be a Node", ...args);
  }
};
function checkHasWindow(htmlElement, ErrorClass, ...args) {
  if (!htmlElement || !htmlElement.ownerDocument || !htmlElement.ownerDocument.defaultView) throw new ErrorClass(htmlElement, ...args);
}
function checkNode(node, ...args) {
  checkHasWindow(node, NodeTypeError, ...args);
  let window2 = node.ownerDocument.defaultView;
  if (!(node instanceof window2.Node)) throw new NodeTypeError(node, ...args);
}
function checkHtmlElement(htmlElement, ...args) {
  checkHasWindow(htmlElement, HtmlElementTypeError, ...args);
  let window2 = htmlElement.ownerDocument.defaultView;
  if (!(htmlElement instanceof window2.HTMLElement) && !(htmlElement instanceof window2.SVGElement)) throw new HtmlElementTypeError(htmlElement, ...args);
}
var InvalidCSSError = class extends Error {
  constructor(received, matcherFn, context) {
    super(), Error.captureStackTrace && Error.captureStackTrace(this, matcherFn), this.message = [received.message, "", context.utils.RECEIVED_COLOR("Failing css:"), context.utils.RECEIVED_COLOR(`${received.css}`)].join(`
`);
  }
};
function parseCSS(css, ...args) {
  let ast = $149c1bd638913645$export$98e6a39c04603d36(`selector { ${css} }`, { silent: true }).stylesheet;
  if (ast.parsingErrors && ast.parsingErrors.length > 0) {
    let { reason, line } = ast.parsingErrors[0];
    throw new InvalidCSSError({ css, message: `Syntax error parsing expected css: ${reason} on line: ${line}` }, ...args);
  }
  return ast.rules[0].declarations.filter((d2) => d2.type === "declaration").reduce((obj, { property, value }) => Object.assign(obj, { [property]: value }), {});
}
function display(context, value) {
  return typeof value == "string" ? value : context.utils.stringify(value);
}
function getMessage(context, matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return [`${matcher}
`, `${expectedLabel}:
${context.utils.EXPECTED_COLOR((0, import_redent.default)(display(context, expectedValue), 2))}`, `${receivedLabel}:
${context.utils.RECEIVED_COLOR((0, import_redent.default)(display(context, receivedValue), 2))}`].join(`
`);
}
function matches$1(textToMatch, matcher) {
  return matcher instanceof RegExp ? matcher.test(textToMatch) : textToMatch.includes(String(matcher));
}
function deprecate(name, replacementText) {
  console.warn(`Warning: ${name} has been deprecated and will be removed in future updates.`, replacementText);
}
function normalize$1(text) {
  return text.replace(/\s+/g, " ").trim();
}
function getTag(element) {
  return element.tagName && element.tagName.toLowerCase();
}
function getSelectValue({ multiple, options }) {
  let selectedOptions = [...options].filter((option) => option.selected);
  if (multiple) return [...selectedOptions].map((opt) => opt.value);
  if (selectedOptions.length !== 0) return selectedOptions[0].value;
}
function getInputValue(inputElement) {
  switch (inputElement.type) {
    case "number":
      return inputElement.value === "" ? null : Number(inputElement.value);
    case "checkbox":
      return inputElement.checked;
    default:
      return inputElement.value;
  }
}
function getSingleElementValue(element) {
  if (element) switch (element.tagName.toLowerCase()) {
    case "input":
      return getInputValue(element);
    case "select":
      return getSelectValue(element);
    default:
      return element.value;
  }
}
function toSentence(array, { wordConnector = ", ", lastWordConnector = " and " } = {}) {
  return [array.slice(0, -1).join(wordConnector), array[array.length - 1]].join(array.length > 1 ? lastWordConnector : "");
}
function compareArraysAsSet(arr1, arr2) {
  if (Array.isArray(arr1) && Array.isArray(arr2)) return [...new Set(arr1)].every((v2) => new Set(arr2).has(v2));
}
function toBeInTheDOM(element, container) {
  return deprecate("toBeInTheDOM", "Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container."), element && checkHtmlElement(element, toBeInTheDOM, this), container && checkHtmlElement(container, toBeInTheDOM, this), { pass: container ? container.contains(element) : !!element, message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeInTheDOM`, "element", ""), "", "Received:", `  ${this.utils.printReceived(element && element.cloneNode(false))}`].join(`
`) };
}
function toBeInTheDocument(element) {
  (element !== null || !this.isNot) && checkHtmlElement(element, toBeInTheDocument, this);
  let pass = element === null ? false : element.ownerDocument === element.getRootNode({ composed: true }), errorFound = () => `expected document not to contain element, found ${this.utils.stringify(element.cloneNode(true))} instead`, errorNotFound = () => "element could not be found in the document";
  return { pass, message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeInTheDocument`, "element", ""), "", this.utils.RECEIVED_COLOR(this.isNot ? errorFound() : errorNotFound())].join(`
`) };
}
function toBeEmpty(element) {
  return deprecate("toBeEmpty", "Please use instead toBeEmptyDOMElement for finding empty nodes in the DOM."), checkHtmlElement(element, toBeEmpty, this), { pass: element.innerHTML === "", message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeEmpty`, "element", ""), "", "Received:", `  ${this.utils.printReceived(element.innerHTML)}`].join(`
`) };
}
function toBeEmptyDOMElement(element) {
  return checkHtmlElement(element, toBeEmptyDOMElement, this), { pass: isEmptyElement(element), message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeEmptyDOMElement`, "element", ""), "", "Received:", `  ${this.utils.printReceived(element.innerHTML)}`].join(`
`) };
}
function isEmptyElement(element) {
  return [...element.childNodes].filter((node) => node.nodeType !== 8).length === 0;
}
function toContainElement(container, element) {
  return checkHtmlElement(container, toContainElement, this), element !== null && checkHtmlElement(element, toContainElement, this), { pass: container.contains(element), message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toContainElement`, "element", "element"), "", this.utils.RECEIVED_COLOR(`${this.utils.stringify(container.cloneNode(false))} ${this.isNot ? "contains:" : "does not contain:"} ${this.utils.stringify(element && element.cloneNode(false))}
        `)].join(`
`) };
}
function getNormalizedHtml(container, htmlText) {
  let div = container.ownerDocument.createElement("div");
  return div.innerHTML = htmlText, div.innerHTML;
}
function toContainHTML(container, htmlText) {
  if (checkHtmlElement(container, toContainHTML, this), typeof htmlText != "string") throw new Error(`.toContainHTML() expects a string value, got ${htmlText}`);
  return { pass: container.outerHTML.includes(getNormalizedHtml(container, htmlText)), message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toContainHTML`, "element", ""), "Expected:", `  ${this.utils.EXPECTED_COLOR(htmlText)}`, "Received:", `  ${this.utils.printReceived(container.cloneNode(true))}`].join(`
`) };
}
function toHaveTextContent(node, checkWith, options = { normalizeWhitespace: true }) {
  checkNode(node, toHaveTextContent, this);
  let textContent = options.normalizeWhitespace ? normalize$1(node.textContent) : node.textContent.replace(/\u00a0/g, " "), checkingWithEmptyString = textContent !== "" && checkWith === "";
  return { pass: !checkingWithEmptyString && matches$1(textContent, checkWith), message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveTextContent`, "element", ""), checkingWithEmptyString ? "Checking with empty string will always match, use .toBeEmptyDOMElement() instead" : `Expected element ${to2} have text content`, checkWith, "Received", textContent);
  } };
}
function toHaveAccessibleDescription(htmlElement, expectedAccessibleDescription) {
  checkHtmlElement(htmlElement, toHaveAccessibleDescription, this);
  let actualAccessibleDescription = computeAccessibleDescription$1(htmlElement), missingExpectedValue = arguments.length === 1, pass = false;
  return missingExpectedValue ? pass = actualAccessibleDescription !== "" : pass = expectedAccessibleDescription instanceof RegExp ? expectedAccessibleDescription.test(actualAccessibleDescription) : this.equals(actualAccessibleDescription, expectedAccessibleDescription), { pass, message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.${toHaveAccessibleDescription.name}`, "element", ""), `Expected element ${to2} have accessible description`, expectedAccessibleDescription, "Received", actualAccessibleDescription);
  } };
}
var ariaInvalidName = "aria-invalid", validStates = ["false"];
function toHaveAccessibleErrorMessage(htmlElement, expectedAccessibleErrorMessage) {
  var _a2;
  checkHtmlElement(htmlElement, toHaveAccessibleErrorMessage, this);
  let to2 = this.isNot ? "not to" : "to", method = this.isNot ? ".not.toHaveAccessibleErrorMessage" : ".toHaveAccessibleErrorMessage", errormessageId = htmlElement.getAttribute("aria-errormessage");
  if (!!errormessageId && /\s+/.test(errormessageId)) return { pass: false, message: () => getMessage(this, this.utils.matcherHint(method, "element"), "Expected element's `aria-errormessage` attribute to be empty or a single, valid ID", "", "Received", `aria-errormessage="${errormessageId}"`) };
  let ariaInvalidVal = htmlElement.getAttribute(ariaInvalidName);
  if (!htmlElement.hasAttribute(ariaInvalidName) || validStates.includes(ariaInvalidVal)) return { pass: false, message: () => getMessage(this, this.utils.matcherHint(method, "element"), "Expected element to be marked as invalid with attribute", `${ariaInvalidName}="${String(true)}"`, "Received", htmlElement.hasAttribute("aria-invalid") ? `${ariaInvalidName}="${htmlElement.getAttribute(ariaInvalidName)}` : null) };
  let error = normalize$1(((_a2 = htmlElement.ownerDocument.getElementById(errormessageId)) == null ? void 0 : _a2.textContent) ?? "");
  return { pass: expectedAccessibleErrorMessage === void 0 ? !!error : expectedAccessibleErrorMessage instanceof RegExp ? expectedAccessibleErrorMessage.test(error) : this.equals(error, expectedAccessibleErrorMessage), message: () => getMessage(this, this.utils.matcherHint(method, "element"), `Expected element ${to2} have accessible error message`, expectedAccessibleErrorMessage ?? "", "Received", error) };
}
var elementRoleList$1 = buildElementRoleList$1(import_aria_query.elementRoles);
function toHaveRole(htmlElement, expectedRole) {
  checkHtmlElement(htmlElement, toHaveRole, this);
  let actualRoles = getExplicitOrImplicitRoles(htmlElement);
  return { pass: actualRoles.some((el) => el === expectedRole), message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.${toHaveRole.name}`, "element", ""), `Expected element ${to2} have role`, expectedRole, "Received", actualRoles.join(", "));
  } };
}
function getExplicitOrImplicitRoles(htmlElement) {
  return htmlElement.hasAttribute("role") ? htmlElement.getAttribute("role").split(" ").filter(Boolean) : getImplicitAriaRoles$1(htmlElement);
}
function getImplicitAriaRoles$1(currentNode) {
  for (let { match, roles: roles3 } of elementRoleList$1) if (match(currentNode)) return [...roles3];
  return [];
}
function buildElementRoleList$1(elementRolesMap) {
  function makeElementSelector({ name, attributes }) {
    return `${name}${attributes.map(({ name: attributeName, value, constraints = [] }) => constraints.indexOf("undefined") !== -1 ? `:not([${attributeName}])` : value ? `[${attributeName}="${value}"]` : `[${attributeName}]`).join("")}`;
  }
  function getSelectorSpecificity({ attributes = [] }) {
    return attributes.length;
  }
  function bySelectorSpecificity({ specificity: leftSpecificity }, { specificity: rightSpecificity }) {
    return rightSpecificity - leftSpecificity;
  }
  function match(element) {
    let { attributes = [] } = element, typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
    typeTextIndex >= 0 && (attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)]);
    let selector = makeElementSelector({ ...element, attributes });
    return (node) => typeTextIndex >= 0 && node.type !== "text" ? false : node.matches(selector);
  }
  let result = [];
  for (let [element, roles3] of elementRolesMap.entries()) result = [...result, { match: match(element), roles: Array.from(roles3), specificity: getSelectorSpecificity(element) }];
  return result.sort(bySelectorSpecificity);
}
function toHaveAccessibleName(htmlElement, expectedAccessibleName) {
  checkHtmlElement(htmlElement, toHaveAccessibleName, this);
  let actualAccessibleName = computeAccessibleName$1(htmlElement), missingExpectedValue = arguments.length === 1, pass = false;
  return missingExpectedValue ? pass = actualAccessibleName !== "" : pass = expectedAccessibleName instanceof RegExp ? expectedAccessibleName.test(actualAccessibleName) : this.equals(actualAccessibleName, expectedAccessibleName), { pass, message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.${toHaveAccessibleName.name}`, "element", ""), `Expected element ${to2} have accessible name`, expectedAccessibleName, "Received", actualAccessibleName);
  } };
}
function printAttribute(stringify2, name, value) {
  return value === void 0 ? name : `${name}=${stringify2(value)}`;
}
function getAttributeComment(stringify2, name, value) {
  return value === void 0 ? `element.hasAttribute(${stringify2(name)})` : `element.getAttribute(${stringify2(name)}) === ${stringify2(value)}`;
}
function toHaveAttribute(htmlElement, name, expectedValue) {
  checkHtmlElement(htmlElement, toHaveAttribute, this);
  let isExpectedValuePresent = expectedValue !== void 0, hasAttribute = htmlElement.hasAttribute(name), receivedValue = htmlElement.getAttribute(name);
  return { pass: isExpectedValuePresent ? hasAttribute && this.equals(receivedValue, expectedValue) : hasAttribute, message: () => {
    let to2 = this.isNot ? "not to" : "to", receivedAttribute = hasAttribute ? printAttribute(this.utils.stringify, name, receivedValue) : null, matcher = this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveAttribute`, "element", this.utils.printExpected(name), { secondArgument: isExpectedValuePresent ? this.utils.printExpected(expectedValue) : void 0, comment: getAttributeComment(this.utils.stringify, name, expectedValue) });
    return getMessage(this, matcher, `Expected the element ${to2} have attribute`, printAttribute(this.utils.stringify, name, expectedValue), "Received", receivedAttribute);
  } };
}
function getExpectedClassNamesAndOptions(params) {
  let lastParam = params.pop(), expectedClassNames, options;
  return typeof lastParam == "object" && !(lastParam instanceof RegExp) ? (expectedClassNames = params, options = lastParam) : (expectedClassNames = params.concat(lastParam), options = { exact: false }), { expectedClassNames, options };
}
function splitClassNames(str) {
  return str ? str.split(/\s+/).filter((s2) => s2.length > 0) : [];
}
function isSubset$1(subset, superset) {
  return subset.every((strOrRegexp) => typeof strOrRegexp == "string" ? superset.includes(strOrRegexp) : superset.some((className) => strOrRegexp.test(className)));
}
function toHaveClass(htmlElement, ...params) {
  checkHtmlElement(htmlElement, toHaveClass, this);
  let { expectedClassNames, options } = getExpectedClassNamesAndOptions(params), received = splitClassNames(htmlElement.getAttribute("class")), expected = expectedClassNames.reduce((acc, className) => acc.concat(typeof className == "string" || !className ? splitClassNames(className) : className), []), hasRegExp = expected.some((className) => className instanceof RegExp);
  if (options.exact && hasRegExp) throw new Error("Exact option does not support RegExp expected class names");
  return options.exact ? { pass: isSubset$1(expected, received) && expected.length === received.length, message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveClass`, "element", this.utils.printExpected(expected.join(" "))), `Expected the element ${to2} have EXACTLY defined classes`, expected.join(" "), "Received", received.join(" "));
  } } : expected.length > 0 ? { pass: isSubset$1(expected, received), message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveClass`, "element", this.utils.printExpected(expected.join(" "))), `Expected the element ${to2} have class`, expected.join(" "), "Received", received.join(" "));
  } } : { pass: this.isNot ? received.length > 0 : false, message: () => this.isNot ? getMessage(this, this.utils.matcherHint(".not.toHaveClass", "element", ""), "Expected the element to have classes", "(none)", "Received", received.join(" ")) : [this.utils.matcherHint(".toHaveClass", "element"), "At least one expected class must be provided."].join(`
`) };
}
function getStyleDeclaration(document2, css) {
  let styles = {}, copy3 = document2.createElement("div");
  return Object.keys(css).forEach((property) => {
    copy3.style[property] = css[property], styles[property] = copy3.style[property];
  }), styles;
}
function isSubset(styles, computedStyle) {
  return !!Object.keys(styles).length && Object.entries(styles).every(([prop, value]) => {
    let isCustomProperty = prop.startsWith("--"), spellingVariants = [prop];
    return isCustomProperty || spellingVariants.push(prop.toLowerCase()), spellingVariants.some((name) => computedStyle[name] === value || computedStyle.getPropertyValue(name) === value);
  });
}
function printoutStyles(styles) {
  return Object.keys(styles).sort().map((prop) => `${prop}: ${styles[prop]};`).join(`
`);
}
function expectedDiff(diffFn, expected, computedStyles) {
  let received = Array.from(computedStyles).filter((prop) => expected[prop] !== void 0).reduce((obj, prop) => Object.assign(obj, { [prop]: computedStyles.getPropertyValue(prop) }), {});
  return diffFn(printoutStyles(expected), printoutStyles(received)).replace(`${import_chalk.default.red("+ Received")}
`, "");
}
function toHaveStyle(htmlElement, css) {
  checkHtmlElement(htmlElement, toHaveStyle, this);
  let parsedCSS = typeof css == "object" ? css : parseCSS(css, toHaveStyle, this), { getComputedStyle } = htmlElement.ownerDocument.defaultView, expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS), received = getComputedStyle(htmlElement);
  return { pass: isSubset(expected, received), message: () => {
    let matcher = `${this.isNot ? ".not" : ""}.toHaveStyle`;
    return [this.utils.matcherHint(matcher, "element", ""), expectedDiff(this.utils.diff, expected, received)].join(`

`);
  } };
}
function toHaveFocus(element) {
  return checkHtmlElement(element, toHaveFocus, this), { pass: element.ownerDocument.activeElement === element, message: () => [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveFocus`, "element", ""), "", ...this.isNot ? ["Received element is focused:", `  ${this.utils.printReceived(element)}`] : ["Expected element with focus:", `  ${this.utils.printExpected(element)}`, "Received element with focus:", `  ${this.utils.printReceived(element.ownerDocument.activeElement)}`]].join(`
`) };
}
function getMultiElementValue(elements) {
  let types = [...new Set(elements.map((element) => element.type))];
  if (types.length !== 1) throw new Error("Multiple form elements with the same name must be of the same type");
  switch (types[0]) {
    case "radio": {
      let theChosenOne = elements.find((radio) => radio.checked);
      return theChosenOne ? theChosenOne.value : void 0;
    }
    case "checkbox":
      return elements.filter((checkbox) => checkbox.checked).map((checkbox) => checkbox.value);
    default:
      return elements.map((element) => element.value);
  }
}
function getFormValue(container, name) {
  let elements = [...container.querySelectorAll(`[name="${(0, import_css.default)(name)}"]`)];
  if (elements.length !== 0) switch (elements.length) {
    case 1:
      return getSingleElementValue(elements[0]);
    default:
      return getMultiElementValue(elements);
  }
}
function getPureName(name) {
  return /\[\]$/.test(name) ? name.slice(0, -2) : name;
}
function getAllFormValues(container) {
  return Array.from(container.elements).map((element) => element.name).reduce((obj, name) => ({ ...obj, [getPureName(name)]: getFormValue(container, name) }), {});
}
function toHaveFormValues(formElement, expectedValues) {
  if (checkHtmlElement(formElement, toHaveFormValues, this), !formElement.elements) throw new Error("toHaveFormValues must be called on a form or a fieldset");
  let formValues = getAllFormValues(formElement);
  return { pass: Object.entries(expectedValues).every(([name, expectedValue]) => (0, import_isEqualWith.default)(formValues[name], expectedValue, compareArraysAsSet)), message: () => {
    let to2 = this.isNot ? "not to" : "to", matcher = `${this.isNot ? ".not" : ""}.toHaveFormValues`, commonKeyValues = Object.keys(formValues).filter((key) => expectedValues.hasOwnProperty(key)).reduce((obj, key) => ({ ...obj, [key]: formValues[key] }), {});
    return [this.utils.matcherHint(matcher, "element", ""), `Expected the element ${to2} have form values`, this.utils.diff(expectedValues, commonKeyValues)].join(`

`);
  } };
}
function isStyleVisible(element) {
  let { getComputedStyle } = element.ownerDocument.defaultView, { display: display2, visibility, opacity } = getComputedStyle(element);
  return display2 !== "none" && visibility !== "hidden" && visibility !== "collapse" && opacity !== "0" && opacity !== 0;
}
function isAttributeVisible(element, previousElement) {
  let detailsVisibility;
  return previousElement ? detailsVisibility = element.nodeName === "DETAILS" && previousElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true : detailsVisibility = element.nodeName === "DETAILS" ? element.hasAttribute("open") : true, !element.hasAttribute("hidden") && detailsVisibility;
}
function isElementVisible(element, previousElement) {
  return isStyleVisible(element) && isAttributeVisible(element, previousElement) && (!element.parentElement || isElementVisible(element.parentElement, element));
}
function toBeVisible(element) {
  checkHtmlElement(element, toBeVisible, this);
  let isInDocument = element.ownerDocument === element.getRootNode({ composed: true }), isVisible2 = isInDocument && isElementVisible(element);
  return { pass: isVisible2, message: () => {
    let is = isVisible2 ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeVisible`, "element", ""), "", `Received element ${is} visible${isInDocument ? "" : " (element is not in the document)"}:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
var FORM_TAGS$2 = ["fieldset", "input", "select", "optgroup", "option", "button", "textarea"];
function isFirstLegendChildOfFieldset(element, parent) {
  return getTag(element) === "legend" && getTag(parent) === "fieldset" && element.isSameNode(Array.from(parent.children).find((child) => getTag(child) === "legend"));
}
function isElementDisabledByParent(element, parent) {
  return isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent);
}
function isCustomElement$1(tag) {
  return tag.includes("-");
}
function canElementBeDisabled(element) {
  let tag = getTag(element);
  return FORM_TAGS$2.includes(tag) || isCustomElement$1(tag);
}
function isElementDisabled(element) {
  return canElementBeDisabled(element) && element.hasAttribute("disabled");
}
function isAncestorDisabled(element) {
  let parent = element.parentElement;
  return !!parent && (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent));
}
function isElementOrAncestorDisabled(element) {
  return canElementBeDisabled(element) && (isElementDisabled(element) || isAncestorDisabled(element));
}
function toBeDisabled(element) {
  checkHtmlElement(element, toBeDisabled, this);
  let isDisabled3 = isElementOrAncestorDisabled(element);
  return { pass: isDisabled3, message: () => {
    let is = isDisabled3 ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeDisabled`, "element", ""), "", `Received element ${is} disabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
function toBeEnabled(element) {
  checkHtmlElement(element, toBeEnabled, this);
  let isEnabled = !isElementOrAncestorDisabled(element);
  return { pass: isEnabled, message: () => {
    let is = isEnabled ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeEnabled`, "element", ""), "", `Received element ${is} enabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
var FORM_TAGS$1 = ["select", "textarea"], ARIA_FORM_TAGS = ["input", "select", "textarea"], UNSUPPORTED_INPUT_TYPES = ["color", "hidden", "range", "submit", "image", "reset"], SUPPORTED_ARIA_ROLES = ["checkbox", "combobox", "gridcell", "listbox", "radiogroup", "spinbutton", "textbox", "tree"];
function isRequiredOnFormTagsExceptInput(element) {
  return FORM_TAGS$1.includes(getTag(element)) && element.hasAttribute("required");
}
function isRequiredOnSupportedInput(element) {
  return getTag(element) === "input" && element.hasAttribute("required") && (element.hasAttribute("type") && !UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute("type")) || !element.hasAttribute("type"));
}
function isElementRequiredByARIA(element) {
  return element.hasAttribute("aria-required") && element.getAttribute("aria-required") === "true" && (ARIA_FORM_TAGS.includes(getTag(element)) || element.hasAttribute("role") && SUPPORTED_ARIA_ROLES.includes(element.getAttribute("role")));
}
function toBeRequired(element) {
  checkHtmlElement(element, toBeRequired, this);
  let isRequired = isRequiredOnFormTagsExceptInput(element) || isRequiredOnSupportedInput(element) || isElementRequiredByARIA(element);
  return { pass: isRequired, message: () => {
    let is = isRequired ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeRequired`, "element", ""), "", `Received element ${is} required:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
var FORM_TAGS = ["form", "input", "select", "textarea"];
function isElementHavingAriaInvalid(element) {
  return element.hasAttribute("aria-invalid") && element.getAttribute("aria-invalid") !== "false";
}
function isSupportsValidityMethod(element) {
  return FORM_TAGS.includes(getTag(element));
}
function isElementInvalid(element) {
  let isHaveAriaInvalid = isElementHavingAriaInvalid(element);
  return isSupportsValidityMethod(element) ? isHaveAriaInvalid || !element.checkValidity() : isHaveAriaInvalid;
}
function toBeInvalid(element) {
  checkHtmlElement(element, toBeInvalid, this);
  let isInvalid = isElementInvalid(element);
  return { pass: isInvalid, message: () => {
    let is = isInvalid ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeInvalid`, "element", ""), "", `Received element ${is} currently invalid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
function toBeValid(element) {
  checkHtmlElement(element, toBeValid, this);
  let isValid = !isElementInvalid(element);
  return { pass: isValid, message: () => {
    let is = isValid ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeValid`, "element", ""), "", `Received element ${is} currently valid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
function toHaveValue(htmlElement, expectedValue) {
  if (checkHtmlElement(htmlElement, toHaveValue, this), htmlElement.tagName.toLowerCase() === "input" && ["checkbox", "radio"].includes(htmlElement.type)) throw new Error("input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead");
  let receivedValue = getSingleElementValue(htmlElement), expectsValue = expectedValue !== void 0, expectedTypedValue = expectedValue, receivedTypedValue = receivedValue;
  return expectedValue == receivedValue && expectedValue !== receivedValue && (expectedTypedValue = `${expectedValue} (${typeof expectedValue})`, receivedTypedValue = `${receivedValue} (${typeof receivedValue})`), { pass: expectsValue ? (0, import_isEqualWith.default)(receivedValue, expectedValue, compareArraysAsSet) : !!receivedValue, message: () => {
    let to2 = this.isNot ? "not to" : "to", matcher = this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveValue`, "element", expectedValue);
    return getMessage(this, matcher, `Expected the element ${to2} have value`, expectsValue ? expectedTypedValue : "(any)", "Received", receivedTypedValue);
  } };
}
function toHaveDisplayValue(htmlElement, expectedValue) {
  checkHtmlElement(htmlElement, toHaveDisplayValue, this);
  let tagName = htmlElement.tagName.toLowerCase();
  if (!["select", "input", "textarea"].includes(tagName)) throw new Error(".toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.");
  if (tagName === "input" && ["radio", "checkbox"].includes(htmlElement.type)) throw new Error(`.toHaveDisplayValue() currently does not support input[type="${htmlElement.type}"], try with another matcher instead.`);
  let values6 = getValues(tagName, htmlElement), expectedValues = getExpectedValues(expectedValue), numberOfMatchesWithValues = expectedValues.filter((expected) => values6.some((value) => expected instanceof RegExp ? expected.test(value) : this.equals(value, String(expected)))).length, matchedWithAllValues = numberOfMatchesWithValues === values6.length, matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;
  return { pass: matchedWithAllValues && matchedWithAllExpectedValues, message: () => getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveDisplayValue`, "element", ""), `Expected element ${this.isNot ? "not " : ""}to have display value`, expectedValue, "Received", values6) };
}
function getValues(tagName, htmlElement) {
  return tagName === "select" ? Array.from(htmlElement).filter((option) => option.selected).map((option) => option.textContent) : [htmlElement.value];
}
function getExpectedValues(expectedValue) {
  return expectedValue instanceof Array ? expectedValue : [expectedValue];
}
function toBeChecked(element) {
  checkHtmlElement(element, toBeChecked, this);
  let isValidInput = () => element.tagName.toLowerCase() === "input" && ["checkbox", "radio"].includes(element.type), isValidAriaElement = () => roleSupportsChecked(element.getAttribute("role")) && ["true", "false"].includes(element.getAttribute("aria-checked"));
  if (!isValidInput() && !isValidAriaElement()) return { pass: false, message: () => `only inputs with type="checkbox" or type="radio" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead` };
  let isChecked = () => isValidInput() ? element.checked : element.getAttribute("aria-checked") === "true";
  return { pass: isChecked(), message: () => {
    let is = isChecked() ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBeChecked`, "element", ""), "", `Received element ${is} checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
function supportedRolesSentence() {
  return toSentence(supportedRoles().map((role) => `role="${role}"`), { lastWordConnector: " or " });
}
function supportedRoles() {
  return import_aria_query.roles.keys().filter(roleSupportsChecked);
}
function roleSupportsChecked(role) {
  var _a2;
  return ((_a2 = import_aria_query.roles.get(role)) == null ? void 0 : _a2.props["aria-checked"]) !== void 0;
}
function toBePartiallyChecked(element) {
  checkHtmlElement(element, toBePartiallyChecked, this);
  let isValidInput = () => element.tagName.toLowerCase() === "input" && element.type === "checkbox", isValidAriaElement = () => element.getAttribute("role") === "checkbox";
  if (!isValidInput() && !isValidAriaElement()) return { pass: false, message: () => 'only inputs with type="checkbox" or elements with role="checkbox" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead' };
  let isPartiallyChecked = () => {
    let isAriaMixed = element.getAttribute("aria-checked") === "mixed";
    return isValidInput() && element.indeterminate || isAriaMixed;
  };
  return { pass: isPartiallyChecked(), message: () => {
    let is = isPartiallyChecked() ? "is" : "is not";
    return [this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toBePartiallyChecked`, "element", ""), "", `Received element ${is} partially checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join(`
`);
  } };
}
function toHaveDescription(htmlElement, checkWith) {
  deprecate("toHaveDescription", "Please use toHaveAccessibleDescription."), checkHtmlElement(htmlElement, toHaveDescription, this);
  let expectsDescription = checkWith !== void 0, descriptionIDs = (htmlElement.getAttribute("aria-describedby") || "").split(/\s+/).filter(Boolean), description = "";
  if (descriptionIDs.length > 0) {
    let document2 = htmlElement.ownerDocument, descriptionEls = descriptionIDs.map((descriptionID) => document2.getElementById(descriptionID)).filter(Boolean);
    description = normalize$1(descriptionEls.map((el) => el.textContent).join(" "));
  }
  return { pass: expectsDescription ? checkWith instanceof RegExp ? checkWith.test(description) : this.equals(description, checkWith) : !!description, message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveDescription`, "element", ""), `Expected the element ${to2} have description`, this.utils.printExpected(checkWith), "Received", this.utils.printReceived(description));
  } };
}
function toHaveErrorMessage(htmlElement, checkWith) {
  if (deprecate("toHaveErrorMessage", "Please use toHaveAccessibleErrorMessage."), checkHtmlElement(htmlElement, toHaveErrorMessage, this), !htmlElement.hasAttribute("aria-invalid") || htmlElement.getAttribute("aria-invalid") === "false") {
    let not = this.isNot ? ".not" : "";
    return { pass: false, message: () => getMessage(this, this.utils.matcherHint(`${not}.toHaveErrorMessage`, "element", ""), "Expected the element to have invalid state indicated by", 'aria-invalid="true"', "Received", htmlElement.hasAttribute("aria-invalid") ? `aria-invalid="${htmlElement.getAttribute("aria-invalid")}"` : this.utils.printReceived("")) };
  }
  let expectsErrorMessage = checkWith !== void 0, errormessageIDs = (htmlElement.getAttribute("aria-errormessage") || "").split(/\s+/).filter(Boolean), errormessage = "";
  if (errormessageIDs.length > 0) {
    let document2 = htmlElement.ownerDocument, errormessageEls = errormessageIDs.map((errormessageID) => document2.getElementById(errormessageID)).filter(Boolean);
    errormessage = normalize$1(errormessageEls.map((el) => el.textContent).join(" "));
  }
  return { pass: expectsErrorMessage ? checkWith instanceof RegExp ? checkWith.test(errormessage) : this.equals(errormessage, checkWith) : !!errormessage, message: () => {
    let to2 = this.isNot ? "not to" : "to";
    return getMessage(this, this.utils.matcherHint(`${this.isNot ? ".not" : ""}.toHaveErrorMessage`, "element", ""), `Expected the element ${to2} have error message`, this.utils.printExpected(checkWith), "Received", this.utils.printReceived(errormessage));
  } };
}
__toESM(require_redent(), 1);
__toESM(require_lib(), 1);
__toESM(require_source(), 1);
__toESM(require_isEqualWith(), 1);
__toESM(require_css_escape(), 1);
function createExpect() {
  use(JestExtend), use(JestChaiExpect), use(JestAsymmetricMatchers);
  let expect4 = (value, message) => {
    let { assertionCalls } = getState(expect4);
    return setState({ assertionCalls: assertionCalls + 1, soft: false }, expect4), expect(value, message);
  };
  Object.assign(expect4, expect), expect4.getState = () => getState(expect4), expect4.setState = (state) => setState(state, expect4), expect4.extend = (expects) => expect.extend(expect4, expects), expect4.soft = (...args) => {
    let assert2 = expect4(...args);
    return expect4.setState({ soft: true }), assert2;
  }, expect4.unreachable = (message) => {
    assert.fail(`expected${message ? ` "${message}" ` : " "}not to be reached`);
  };
  function assertions(expected) {
    let errorGen = () => new Error(`expected number of assertions to be ${expected}, but got ${expect4.getState().assertionCalls}`);
    "captureStackTrace" in Error && typeof Error.captureStackTrace == "function" && Error.captureStackTrace(errorGen(), assertions), expect4.setState({ expectedAssertionsNumber: expected, expectedAssertionsNumberErrorGen: errorGen });
  }
  function hasAssertions() {
    let error = new Error("expected any number of assertion, but got none");
    "captureStackTrace" in Error && typeof Error.captureStackTrace == "function" && Error.captureStackTrace(error, hasAssertions), expect4.setState({ isExpectingAssertions: true, isExpectingAssertionsError: error });
  }
  return setState({ assertionCalls: 0, isExpectingAssertions: false, isExpectingAssertionsError: null, expectedAssertionsNumber: null, expectedAssertionsNumberErrorGen: null }, expect4), util.addMethod(expect4, "assertions", assertions), util.addMethod(expect4, "hasAssertions", hasAssertions), expect4.extend(matchers_exports), expect4;
}
var expect2 = createExpect();
Object.defineProperty(globalThis, GLOBAL_EXPECT, { value: expect2, writable: true, configurable: true });
var listeners = /* @__PURE__ */ new Set();
function onMockCall(callback) {
  return listeners.add(callback), () => void listeners.delete(callback);
}
var fn2 = (implementation) => {
  let mock = implementation ? fn(implementation) : fn();
  return reactiveMock(mock);
};
function reactiveMock(mock) {
  let reactive = listenWhenCalled(mock), originalMockImplementation = reactive.mockImplementation.bind(null);
  return reactive.mockImplementation = (fn3) => listenWhenCalled(originalMockImplementation(fn3)), reactive;
}
function listenWhenCalled(mock) {
  let state = v$2(mock), impl = state.impl;
  return state.willCall(function(...args) {
    return listeners.forEach((listener) => listener(mock, args)), impl == null ? void 0 : impl.apply(this, args);
  }), mock;
}
function clearAllMocks() {
  mocks.forEach((spy) => spy.mockClear());
}
function resetAllMocks() {
  mocks.forEach((spy) => spy.mockReset());
}
function restoreAllMocks() {
  mocks.forEach((spy) => spy.mockRestore());
}
var dom_esm_exports = {};
__export(dom_esm_exports, { buildQueries: () => buildQueries$1, configure: () => configure$1, createEvent: () => createEvent, findAllByAltText: () => findAllByAltText$1, findAllByDisplayValue: () => findAllByDisplayValue$1, findAllByLabelText: () => findAllByLabelText$1, findAllByPlaceholderText: () => findAllByPlaceholderText$1, findAllByRole: () => findAllByRole$1, findAllByTestId: () => findAllByTestId$1, findAllByText: () => findAllByText$1, findAllByTitle: () => findAllByTitle$1, findByAltText: () => findByAltText$1, findByDisplayValue: () => findByDisplayValue$1, findByLabelText: () => findByLabelText$1, findByPlaceholderText: () => findByPlaceholderText$1, findByRole: () => findByRole$1, findByTestId: () => findByTestId$1, findByText: () => findByText$1, findByTitle: () => findByTitle$1, fireEvent: () => fireEvent, getAllByAltText: () => getAllByAltText$1, getAllByDisplayValue: () => getAllByDisplayValue$1, getAllByLabelText: () => getAllByLabelTextWithSuggestions$1, getAllByPlaceholderText: () => getAllByPlaceholderText$1, getAllByRole: () => getAllByRole$1, getAllByTestId: () => getAllByTestId$1, getAllByText: () => getAllByText$1, getAllByTitle: () => getAllByTitle$1, getByAltText: () => getByAltText$1, getByDisplayValue: () => getByDisplayValue$1, getByLabelText: () => getByLabelTextWithSuggestions$1, getByPlaceholderText: () => getByPlaceholderText$1, getByRole: () => getByRole$1, getByTestId: () => getByTestId$1, getByText: () => getByText$1, getByTitle: () => getByTitle$1, getConfig: () => getConfig$2, getDefaultNormalizer: () => getDefaultNormalizer$1, getElementError: () => getElementError$1, getMultipleElementsFoundError: () => getMultipleElementsFoundError$1, getNodeText: () => getNodeText$1, getQueriesForElement: () => getQueriesForElement$1, getRoles: () => getRoles$1, getSuggestedQuery: () => getSuggestedQuery$1, isInaccessible: () => isInaccessible$1, logDOM: () => logDOM$1, logRoles: () => logRoles, makeFindQuery: () => makeFindQuery$1, makeGetAllQuery: () => makeGetAllQuery$1, makeSingleQuery: () => makeSingleQuery$1, prettyDOM: () => prettyDOM$1, prettyFormat: () => prettyFormat, queries: () => queries$1, queryAllByAltText: () => queryAllByAltTextWithSuggestions$1, queryAllByAttribute: () => queryAllByAttribute$1, queryAllByDisplayValue: () => queryAllByDisplayValueWithSuggestions$1, queryAllByLabelText: () => queryAllByLabelTextWithSuggestions$1, queryAllByPlaceholderText: () => queryAllByPlaceholderTextWithSuggestions$1, queryAllByRole: () => queryAllByRoleWithSuggestions$1, queryAllByTestId: () => queryAllByTestIdWithSuggestions$1, queryAllByText: () => queryAllByTextWithSuggestions$1, queryAllByTitle: () => queryAllByTitleWithSuggestions$1, queryByAltText: () => queryByAltText$1, queryByAttribute: () => queryByAttribute, queryByDisplayValue: () => queryByDisplayValue$1, queryByLabelText: () => queryByLabelText$1, queryByPlaceholderText: () => queryByPlaceholderText$1, queryByRole: () => queryByRole$1, queryByTestId: () => queryByTestId$1, queryByText: () => queryByText$1, queryByTitle: () => queryByTitle$1, queryHelpers: () => queryHelpers, screen: () => screen$1, waitFor: () => waitForWrapper$1, waitForElementToBeRemoved: () => waitForElementToBeRemoved, within: () => getQueriesForElement$1, wrapAllByQueryWithSuggestion: () => wrapAllByQueryWithSuggestion$1, wrapSingleQueryWithSuggestion: () => wrapSingleQueryWithSuggestion$1 });
var prettyFormat = __toESM(require_build3());
var toStr2 = Object.prototype.toString;
function isCallable2(fn3) {
  return typeof fn3 == "function" || toStr2.call(fn3) === "[object Function]";
}
function toInteger2(value) {
  var number = Number(value);
  return isNaN(number) ? 0 : number === 0 || !isFinite(number) ? number : (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
var maxSafeInteger2 = Math.pow(2, 53) - 1;
function toLength2(value) {
  var len = toInteger2(value);
  return Math.min(Math.max(len, 0), maxSafeInteger2);
}
function arrayFrom2(arrayLike, mapFn) {
  var C2 = Array, items = Object(arrayLike);
  if (arrayLike == null) throw new TypeError("Array.from requires an array-like object - not null or undefined");
  for (var len = toLength2(items.length), A2 = isCallable2(C2) ? Object(new C2(len)) : new Array(len), k2 = 0, kValue; k2 < len; ) kValue = items[k2], A2[k2] = kValue, k2 += 1;
  return A2.length = len, A2;
}
function _typeof3(obj) {
  "@babel/helpers - typeof";
  return _typeof3 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof3(obj);
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties2(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false, descriptor.configurable = true, "value" in descriptor && (descriptor.writable = true), Object.defineProperty(target, _toPropertyKey3(descriptor.key), descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties2(Constructor.prototype, protoProps), Object.defineProperty(Constructor, "prototype", { writable: false }), Constructor;
}
function _defineProperty3(obj, key, value) {
  return key = _toPropertyKey3(key), key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
function _toPropertyKey3(arg) {
  var key = _toPrimitive3(arg, "string");
  return _typeof3(key) === "symbol" ? key : String(key);
}
function _toPrimitive3(input2, hint) {
  if (_typeof3(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof3(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
var SetLike2 = function() {
  function SetLike3() {
    var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classCallCheck2(this, SetLike3), _defineProperty3(this, "items", void 0), this.items = items;
  }
  return _createClass2(SetLike3, [{ key: "add", value: function(value) {
    return this.has(value) === false && this.items.push(value), this;
  } }, { key: "clear", value: function() {
    this.items = [];
  } }, { key: "delete", value: function(value) {
    var previousLength = this.items.length;
    return this.items = this.items.filter(function(item) {
      return item !== value;
    }), previousLength !== this.items.length;
  } }, { key: "forEach", value: function(callbackfn) {
    var _this = this;
    this.items.forEach(function(item) {
      callbackfn(item, item, _this);
    });
  } }, { key: "has", value: function(value) {
    return this.items.indexOf(value) !== -1;
  } }, { key: "size", get: function() {
    return this.items.length;
  } }]), SetLike3;
}(), SetLike_default2 = typeof Set > "u" ? Set : SetLike2;
function getLocalName2(element) {
  var _element$localName;
  return (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : element.tagName.toLowerCase();
}
var localNameToRoleMappings2 = { article: "article", aside: "complementary", button: "button", datalist: "listbox", dd: "definition", details: "group", dialog: "dialog", dt: "term", fieldset: "group", figure: "figure", form: "form", footer: "contentinfo", h1: "heading", h2: "heading", h3: "heading", h4: "heading", h5: "heading", h6: "heading", header: "banner", hr: "separator", html: "document", legend: "legend", li: "listitem", math: "math", main: "main", menu: "list", nav: "navigation", ol: "list", optgroup: "group", option: "option", output: "status", progress: "progressbar", section: "region", summary: "button", table: "table", tbody: "rowgroup", textarea: "textbox", tfoot: "rowgroup", td: "cell", th: "columnheader", thead: "rowgroup", tr: "row", ul: "list" }, prohibitedAttributes2 = { caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]), insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]), superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]) };
function hasGlobalAriaAttributes2(element, role) {
  return ["aria-atomic", "aria-busy", "aria-controls", "aria-current", "aria-describedby", "aria-details", "aria-dropeffect", "aria-flowto", "aria-grabbed", "aria-hidden", "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-live", "aria-owns", "aria-relevant", "aria-roledescription"].some(function(attributeName) {
    var _prohibitedAttributes;
    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes2[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
  });
}
function ignorePresentationalRole2(element, implicitRole) {
  return hasGlobalAriaAttributes2(element, implicitRole);
}
function getRole2(element) {
  var explicitRole = getExplicitRole2(element);
  if (explicitRole === null || explicitRole === "presentation") {
    var implicitRole = getImplicitRole2(element);
    if (explicitRole !== "presentation" || ignorePresentationalRole2(element, implicitRole || "")) return implicitRole;
  }
  return explicitRole;
}
function getImplicitRole2(element) {
  var mappedByTag = localNameToRoleMappings2[getLocalName2(element)];
  if (mappedByTag !== void 0) return mappedByTag;
  switch (getLocalName2(element)) {
    case "a":
    case "area":
    case "link":
      if (element.hasAttribute("href")) return "link";
      break;
    case "img":
      return element.getAttribute("alt") === "" && !ignorePresentationalRole2(element, "img") ? "presentation" : "img";
    case "input": {
      var _ref = element, type3 = _ref.type;
      switch (type3) {
        case "button":
        case "image":
        case "reset":
        case "submit":
          return "button";
        case "checkbox":
        case "radio":
          return type3;
        case "range":
          return "slider";
        case "email":
        case "tel":
        case "text":
        case "url":
          return element.hasAttribute("list") ? "combobox" : "textbox";
        case "search":
          return element.hasAttribute("list") ? "combobox" : "searchbox";
        case "number":
          return "spinbutton";
        default:
          return null;
      }
    }
    case "select":
      return element.hasAttribute("multiple") || element.size > 1 ? "listbox" : "combobox";
  }
  return null;
}
function getExplicitRole2(element) {
  var role = element.getAttribute("role");
  if (role !== null) {
    var explicitRole = role.trim().split(" ")[0];
    if (explicitRole.length > 0) return explicitRole;
  }
  return null;
}
function isElement2(node) {
  return node !== null && node.nodeType === node.ELEMENT_NODE;
}
function isHTMLTableCaptionElement2(node) {
  return isElement2(node) && getLocalName2(node) === "caption";
}
function isHTMLInputElement2(node) {
  return isElement2(node) && getLocalName2(node) === "input";
}
function isHTMLOptGroupElement2(node) {
  return isElement2(node) && getLocalName2(node) === "optgroup";
}
function isHTMLSelectElement2(node) {
  return isElement2(node) && getLocalName2(node) === "select";
}
function isHTMLTableElement2(node) {
  return isElement2(node) && getLocalName2(node) === "table";
}
function isHTMLTextAreaElement2(node) {
  return isElement2(node) && getLocalName2(node) === "textarea";
}
function safeWindow2(node) {
  var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
  if (defaultView === null) throw new TypeError("no window available");
  return defaultView;
}
function isHTMLFieldSetElement2(node) {
  return isElement2(node) && getLocalName2(node) === "fieldset";
}
function isHTMLLegendElement2(node) {
  return isElement2(node) && getLocalName2(node) === "legend";
}
function isHTMLSlotElement2(node) {
  return isElement2(node) && getLocalName2(node) === "slot";
}
function isSVGElement2(node) {
  return isElement2(node) && node.ownerSVGElement !== void 0;
}
function isSVGSVGElement2(node) {
  return isElement2(node) && getLocalName2(node) === "svg";
}
function isSVGTitleElement2(node) {
  return isSVGElement2(node) && getLocalName2(node) === "title";
}
function queryIdRefs2(node, attributeName) {
  if (isElement2(node) && node.hasAttribute(attributeName)) {
    var ids = node.getAttribute(attributeName).split(" "), root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    return ids.map(function(id) {
      return root.getElementById(id);
    }).filter(function(element) {
      return element !== null;
    });
  }
  return [];
}
function hasAnyConcreteRoles2(node, roles3) {
  return isElement2(node) ? roles3.indexOf(getRole2(node)) !== -1 : false;
}
function asFlatString2(s2) {
  return s2.trim().replace(/\s\s+/g, " ");
}
function isHidden2(node, getComputedStyleImplementation) {
  if (!isElement2(node)) return false;
  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") return true;
  var style = getComputedStyleImplementation(node);
  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
}
function isControl2(node) {
  return hasAnyConcreteRoles2(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole2(node, "range");
}
function hasAbstractRole2(node, role) {
  if (!isElement2(node)) return false;
  switch (role) {
    case "range":
      return hasAnyConcreteRoles2(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
    default:
      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
  }
}
function querySelectorAllSubtree2(element, selectors) {
  var elements = arrayFrom2(element.querySelectorAll(selectors));
  return queryIdRefs2(element, "aria-owns").forEach(function(root) {
    elements.push.apply(elements, arrayFrom2(root.querySelectorAll(selectors)));
  }), elements;
}
function querySelectedOptions2(listbox) {
  return isHTMLSelectElement2(listbox) ? listbox.selectedOptions || querySelectorAllSubtree2(listbox, "[selected]") : querySelectorAllSubtree2(listbox, '[aria-selected="true"]');
}
function isMarkedPresentational2(node) {
  return hasAnyConcreteRoles2(node, ["none", "presentation"]);
}
function isNativeHostLanguageTextAlternativeElement2(node) {
  return isHTMLTableCaptionElement2(node);
}
function allowsNameFromContent2(node) {
  return hasAnyConcreteRoles2(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
}
function isDescendantOfNativeHostLanguageTextAlternativeElement2(node) {
  return false;
}
function getValueOfTextbox2(element) {
  return isHTMLInputElement2(element) || isHTMLTextAreaElement2(element) ? element.value : element.textContent || "";
}
function getTextualContent2(declaration) {
  var content = declaration.getPropertyValue("content");
  return /^["'].*["']$/.test(content) ? content.slice(1, -1) : "";
}
function isLabelableElement2(element) {
  var localName = getLocalName2(element);
  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
}
function findLabelableElement2(element) {
  if (isLabelableElement2(element)) return element;
  var labelableElement = null;
  return element.childNodes.forEach(function(childNode) {
    if (labelableElement === null && isElement2(childNode)) {
      var descendantLabelableElement = findLabelableElement2(childNode);
      descendantLabelableElement !== null && (labelableElement = descendantLabelableElement);
    }
  }), labelableElement;
}
function getControlOfLabel2(label) {
  if (label.control !== void 0) return label.control;
  var htmlFor = label.getAttribute("for");
  return htmlFor !== null ? label.ownerDocument.getElementById(htmlFor) : findLabelableElement2(label);
}
function getLabels2(element) {
  var labelsProperty = element.labels;
  if (labelsProperty === null) return labelsProperty;
  if (labelsProperty !== void 0) return arrayFrom2(labelsProperty);
  if (!isLabelableElement2(element)) return null;
  var document2 = element.ownerDocument;
  return arrayFrom2(document2.querySelectorAll("label")).filter(function(label) {
    return getControlOfLabel2(label) === element;
  });
}
function getSlotContents2(slot) {
  var assignedNodes = slot.assignedNodes();
  return assignedNodes.length === 0 ? arrayFrom2(slot.childNodes) : assignedNodes;
}
function computeTextAlternative2(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, consultedNodes = new SetLike_default2(), window2 = safeWindow2(root), _options$compute = options.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
  function computeMiscTextAlternative(node, context) {
    var accumulatedText = "";
    if (isElement2(node) && computedStyleSupportsPseudoElements) {
      var pseudoBefore = getComputedStyle(node, "::before"), beforeContent = getTextualContent2(pseudoBefore);
      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
    }
    var childNodes = isHTMLSlotElement2(node) ? getSlotContents2(node) : arrayFrom2(node.childNodes).concat(queryIdRefs2(node, "aria-owns"));
    if (childNodes.forEach(function(child) {
      var result = computeTextAlternative3(child, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true }), display2 = isElement2(child) ? getComputedStyle(child).getPropertyValue("display") : "inline", separator = display2 !== "inline" ? " " : "";
      accumulatedText += "".concat(separator).concat(result).concat(separator);
    }), isElement2(node) && computedStyleSupportsPseudoElements) {
      var pseudoAfter = getComputedStyle(node, "::after"), afterContent = getTextualContent2(pseudoAfter);
      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
    }
    return accumulatedText.trim();
  }
  function useAttribute(element, attributeName) {
    var attribute = element.getAttributeNode(attributeName);
    return attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "" ? (consultedNodes.add(attribute), attribute.value) : null;
  }
  function computeTooltipAttributeValue(node) {
    return isElement2(node) ? useAttribute(node, "title") : null;
  }
  function computeElementTextAlternative(node) {
    if (!isElement2(node)) return null;
    if (isHTMLFieldSetElement2(node)) {
      consultedNodes.add(node);
      for (var children = arrayFrom2(node.childNodes), i2 = 0; i2 < children.length; i2 += 1) {
        var child = children[i2];
        if (isHTMLLegendElement2(child)) return computeTextAlternative3(child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
      }
    } else if (isHTMLTableElement2(node)) {
      consultedNodes.add(node);
      for (var _children = arrayFrom2(node.childNodes), _i2 = 0; _i2 < _children.length; _i2 += 1) {
        var _child = _children[_i2];
        if (isHTMLTableCaptionElement2(_child)) return computeTextAlternative3(_child, { isEmbeddedInLabel: false, isReferenced: false, recursion: false });
      }
    } else if (isSVGSVGElement2(node)) {
      consultedNodes.add(node);
      for (var _children2 = arrayFrom2(node.childNodes), _i22 = 0; _i22 < _children2.length; _i22 += 1) {
        var _child2 = _children2[_i22];
        if (isSVGTitleElement2(_child2)) return _child2.textContent;
      }
      return null;
    } else if (getLocalName2(node) === "img" || getLocalName2(node) === "area") {
      var nameFromAlt = useAttribute(node, "alt");
      if (nameFromAlt !== null) return nameFromAlt;
    } else if (isHTMLOptGroupElement2(node)) {
      var nameFromLabel = useAttribute(node, "label");
      if (nameFromLabel !== null) return nameFromLabel;
    }
    if (isHTMLInputElement2(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
      var nameFromValue = useAttribute(node, "value");
      if (nameFromValue !== null) return nameFromValue;
      if (node.type === "submit") return "Submit";
      if (node.type === "reset") return "Reset";
    }
    var labels = getLabels2(node);
    if (labels !== null && labels.length !== 0) return consultedNodes.add(node), arrayFrom2(labels).map(function(element) {
      return computeTextAlternative3(element, { isEmbeddedInLabel: true, isReferenced: false, recursion: true });
    }).filter(function(label) {
      return label.length > 0;
    }).join(" ");
    if (isHTMLInputElement2(node) && node.type === "image") {
      var _nameFromAlt = useAttribute(node, "alt");
      if (_nameFromAlt !== null) return _nameFromAlt;
      var nameFromTitle = useAttribute(node, "title");
      return nameFromTitle !== null ? nameFromTitle : "Submit Query";
    }
    if (hasAnyConcreteRoles2(node, ["button"])) {
      var nameFromSubTree = computeMiscTextAlternative(node, { isEmbeddedInLabel: false, isReferenced: false });
      if (nameFromSubTree !== "") return nameFromSubTree;
    }
    return null;
  }
  function computeTextAlternative3(current, context) {
    if (consultedNodes.has(current)) return "";
    if (!hidden && isHidden2(current, getComputedStyle) && !context.isReferenced) return consultedNodes.add(current), "";
    var labelAttributeNode = isElement2(current) ? current.getAttributeNode("aria-labelledby") : null, labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs2(current, "aria-labelledby") : [];
    if (compute === "name" && !context.isReferenced && labelElements.length > 0) return consultedNodes.add(labelAttributeNode), labelElements.map(function(element) {
      return computeTextAlternative3(element, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: true, recursion: false });
    }).join(" ");
    var skipToStep2E = context.recursion && isControl2(current) && compute === "name";
    if (!skipToStep2E) {
      var ariaLabel = (isElement2(current) && current.getAttribute("aria-label") || "").trim();
      if (ariaLabel !== "" && compute === "name") return consultedNodes.add(current), ariaLabel;
      if (!isMarkedPresentational2(current)) {
        var elementTextAlternative = computeElementTextAlternative(current);
        if (elementTextAlternative !== null) return consultedNodes.add(current), elementTextAlternative;
      }
    }
    if (hasAnyConcreteRoles2(current, ["menu"])) return consultedNodes.add(current), "";
    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
      if (hasAnyConcreteRoles2(current, ["combobox", "listbox"])) {
        consultedNodes.add(current);
        var selectedOptions = querySelectedOptions2(current);
        return selectedOptions.length === 0 ? isHTMLInputElement2(current) ? current.value : "" : arrayFrom2(selectedOptions).map(function(selectedOption) {
          return computeTextAlternative3(selectedOption, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false, recursion: true });
        }).join(" ");
      }
      if (hasAbstractRole2(current, "range")) return consultedNodes.add(current), current.hasAttribute("aria-valuetext") ? current.getAttribute("aria-valuetext") : current.hasAttribute("aria-valuenow") ? current.getAttribute("aria-valuenow") : current.getAttribute("value") || "";
      if (hasAnyConcreteRoles2(current, ["textbox"])) return consultedNodes.add(current), getValueOfTextbox2(current);
    }
    if (allowsNameFromContent2(current) || isElement2(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement2(current) || isDescendantOfNativeHostLanguageTextAlternativeElement2()) {
      var accumulatedText2F = computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
      if (accumulatedText2F !== "") return consultedNodes.add(current), accumulatedText2F;
    }
    if (current.nodeType === current.TEXT_NODE) return consultedNodes.add(current), current.textContent || "";
    if (context.recursion) return consultedNodes.add(current), computeMiscTextAlternative(current, { isEmbeddedInLabel: context.isEmbeddedInLabel, isReferenced: false });
    var tooltipAttributeValue = computeTooltipAttributeValue(current);
    return tooltipAttributeValue !== null ? (consultedNodes.add(current), tooltipAttributeValue) : (consultedNodes.add(current), "");
  }
  return asFlatString2(computeTextAlternative3(root, { isEmbeddedInLabel: false, isReferenced: compute === "description", recursion: false }));
}
function _typeof4(obj) {
  "@babel/helpers - typeof";
  return _typeof4 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof4(obj);
}
function ownKeys2(object, enumerableOnly) {
  var keys22 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys22.push.apply(keys22, symbols);
  }
  return keys22;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    i2 % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty4(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty4(obj, key, value) {
  return key = _toPropertyKey4(key), key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
function _toPropertyKey4(arg) {
  var key = _toPrimitive4(arg, "string");
  return _typeof4(key) === "symbol" ? key : String(key);
}
function _toPrimitive4(input2, hint) {
  if (_typeof4(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof4(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function computeAccessibleDescription2(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, description = queryIdRefs2(root, "aria-describedby").map(function(element) {
    return computeTextAlternative2(element, _objectSpread2(_objectSpread2({}, options), {}, { compute: "description" }));
  }).join(" ");
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
function prohibitsNaming2(node) {
  return hasAnyConcreteRoles2(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]);
}
function computeAccessibleName2(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return prohibitsNaming2(root) ? "" : computeTextAlternative2(root, options);
}
var import_aria_query3 = __toESM(require_lib2()), import_lz_string = __toESM(require_lz_string());
function escapeHTML$3(str) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
var printProps$2 = (keys22, props, config3, indentation, depth, refs, printer2) => {
  let indentationNext = indentation + config3.indent, colors = config3.colors;
  return keys22.map((key) => {
    let value = props[key], printed = printer2(value, config3, indentationNext, depth, refs);
    return typeof value != "string" && (printed.indexOf(`
`) !== -1 && (printed = config3.spacingOuter + indentationNext + printed + config3.spacingOuter + indentation), printed = "{" + printed + "}"), config3.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
  }).join("");
}, NodeTypeTextNode$1 = 3, printChildren$2 = (children, config3, indentation, depth, refs, printer2) => children.map((child) => {
  let printedChild = typeof child == "string" ? printText$2(child, config3) : printer2(child, config3, indentation, depth, refs);
  return printedChild === "" && typeof child == "object" && child !== null && child.nodeType !== NodeTypeTextNode$1 ? "" : config3.spacingOuter + indentation + printedChild;
}).join(""), printText$2 = (text, config3) => {
  let contentColor = config3.colors.content;
  return contentColor.open + escapeHTML$3(text) + contentColor.close;
}, printComment$2 = (comment, config3) => {
  let commentColor = config3.colors.comment;
  return commentColor.open + "<!--" + escapeHTML$3(comment) + "-->" + commentColor.close;
}, printElement$2 = (type3, printedProps, printedChildren, config3, indentation) => {
  let tagColor = config3.colors.tag;
  return tagColor.open + "<" + type3 + (printedProps && tagColor.close + printedProps + config3.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config3.spacingOuter + indentation + tagColor.open + "</" + type3 : (printedProps && !config3.min ? "" : " ") + "/") + ">" + tagColor.close;
}, printElementAsLeaf$2 = (type3, config3) => {
  let tagColor = config3.colors.tag;
  return tagColor.open + "<" + type3 + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
}, ELEMENT_NODE$1$1 = 1, TEXT_NODE$1$1 = 3, COMMENT_NODE$1$1 = 8, FRAGMENT_NODE$2 = 11, ELEMENT_REGEXP$2 = /^((HTML|SVG)\w*)?Element$/, testNode$2 = (val) => {
  let constructorName = val.constructor.name, { nodeType, tagName } = val, isCustomElement2 = typeof tagName == "string" && tagName.includes("-") || typeof val.hasAttribute == "function" && val.hasAttribute("is");
  return nodeType === ELEMENT_NODE$1$1 && (ELEMENT_REGEXP$2.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE$1$1 && constructorName === "Text" || nodeType === COMMENT_NODE$1$1 && constructorName === "Comment" || nodeType === FRAGMENT_NODE$2 && constructorName === "DocumentFragment";
};
function nodeIsText$2(node) {
  return node.nodeType === TEXT_NODE$1$1;
}
function nodeIsComment$2(node) {
  return node.nodeType === COMMENT_NODE$1$1;
}
function nodeIsFragment$2(node) {
  return node.nodeType === FRAGMENT_NODE$2;
}
function createDOMElementFilter$1(filterNode) {
  return { test: (val) => {
    var _val$constructor2;
    return (val == null || (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) && testNode$2(val);
  }, serialize: (node, config3, indentation, depth, refs, printer2) => {
    if (nodeIsText$2(node)) return printText$2(node.data, config3);
    if (nodeIsComment$2(node)) return printComment$2(node.data, config3);
    let type3 = nodeIsFragment$2(node) ? "DocumentFragment" : node.tagName.toLowerCase();
    return ++depth > config3.maxDepth ? printElementAsLeaf$2(type3, config3) : printElement$2(type3, printProps$2(nodeIsFragment$2(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment$2(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => (props[attribute.name] = attribute.value, props), {}), config3, indentation + config3.indent, depth, refs, printer2), printChildren$2(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config3, indentation + config3.indent, depth, refs, printer2), config3, indentation);
  } };
}
var chalk2 = null, readFileSync$1 = null, codeFrameColumns$1 = null;
try {
  let nodeRequire = module && module.require;
  readFileSync$1 = nodeRequire.call(module, "fs").readFileSync, codeFrameColumns$1 = nodeRequire.call(module, "@babel/code-frame").codeFrameColumns, chalk2 = nodeRequire.call(module, "chalk");
} catch {
}
function getCodeFrame$1(frame) {
  let locationStart = frame.indexOf("(") + 1, locationEnd = frame.indexOf(")"), frameLocation = frame.slice(locationStart, locationEnd), frameLocationElements = frameLocation.split(":"), [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)], rawFileContents = "";
  try {
    rawFileContents = readFileSync$1(filename, "utf-8");
  } catch {
    return "";
  }
  let codeFrame = codeFrameColumns$1(rawFileContents, { start: { line, column } }, { highlightCode: true, linesBelow: 0 });
  return chalk2.dim(frameLocation) + `
` + codeFrame + `
`;
}
function getUserCodeFrame$1() {
  if (!readFileSync$1 || !codeFrameColumns$1) return "";
  let firstClientCodeFrame = new Error().stack.split(`
`).slice(1).find((frame) => !frame.includes("node_modules/"));
  return getCodeFrame$1(firstClientCodeFrame);
}
var TEXT_NODE$3 = 3;
function jestFakeTimersAreEnabled$1() {
  return typeof jest < "u" && jest !== null ? setTimeout._isMockFunction === true || Object.prototype.hasOwnProperty.call(setTimeout, "clock") : false;
}
function getDocument$1() {
  if (typeof window > "u") throw new Error("Could not find default container");
  return window.document;
}
function getWindowFromNode$1(node) {
  if (node.defaultView) return node.defaultView;
  if (node.ownerDocument && node.ownerDocument.defaultView) return node.ownerDocument.defaultView;
  if (node.window) return node.window;
  throw node.ownerDocument && node.ownerDocument.defaultView === null ? new Error("It looks like the window object is not available for the provided node.") : node.then instanceof Function ? new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?") : Array.isArray(node) ? new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?") : typeof node.debug == "function" && typeof node.logTestingPlaygroundURL == "function" ? new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?") : new Error("The given node is not an Element, the node type is: " + typeof node + ".");
}
function checkContainerType$1(container) {
  if (!container || typeof container.querySelector != "function" || typeof container.querySelectorAll != "function") throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
  function getTypeName(object) {
    return typeof object == "object" ? object === null ? "null" : object.constructor.name : typeof object;
  }
}
var shouldHighlight$1 = () => {
  let colors;
  try {
    var _process;
    colors = JSON.parse((_process = process) == null || (_process = _process.env) == null ? void 0 : _process.COLORS);
  } catch {
  }
  return typeof colors == "boolean" ? colors : typeof process < "u" && process.versions !== void 0 && process.versions.node !== void 0;
}, { DOMCollection: DOMCollection3 } = prettyFormat.plugins, ELEMENT_NODE$3 = 1, COMMENT_NODE$3 = 8;
function filterCommentsAndDefaultIgnoreTagsTags$1(value) {
  return value.nodeType !== COMMENT_NODE$3 && (value.nodeType !== ELEMENT_NODE$3 || !value.matches(getConfig$2().defaultIgnore));
}
function prettyDOM$1(dom2, maxLength, options) {
  if (options === void 0 && (options = {}), dom2 || (dom2 = getDocument$1().body), typeof maxLength != "number" && (maxLength = typeof process < "u" && define_process_env_default$1.DEBUG_PRINT_LIMIT || 7e3), maxLength === 0) return "";
  dom2.documentElement && (dom2 = dom2.documentElement);
  let domTypeName = typeof dom2;
  if (domTypeName === "object" ? domTypeName = dom2.constructor.name : dom2 = {}, !("outerHTML" in dom2)) throw new TypeError("Expected an element or document but got " + domTypeName);
  let { filterNode = filterCommentsAndDefaultIgnoreTagsTags$1, ...prettyFormatOptions } = options, debugContent = prettyFormat.format(dom2, { plugins: [createDOMElementFilter$1(filterNode), DOMCollection3], printFunctionName: false, highlight: shouldHighlight$1(), ...prettyFormatOptions });
  return maxLength !== void 0 && dom2.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + "..." : debugContent;
}
var logDOM$1 = function() {
  let userCodeFrame = getUserCodeFrame$1();
  console.log(userCodeFrame ? prettyDOM$1(...arguments) + `

` + userCodeFrame : prettyDOM$1(...arguments));
}, config2 = { testIdAttribute: "data-testid", asyncUtilTimeout: 1e3, asyncWrapper: (cb) => cb(), unstable_advanceTimersWrapper: (cb) => cb(), eventWrapper: (cb) => cb(), defaultHidden: false, defaultIgnore: "script, style", showOriginalStackTrace: false, throwSuggestions: false, getElementError(message, container) {
  let prettifiedDOM = prettyDOM$1(container), error = new Error([message, "Ignored nodes: comments, " + config2.defaultIgnore + `
` + prettifiedDOM].filter(Boolean).join(`

`));
  return error.name = "TestingLibraryElementError", error;
}, _disableExpensiveErrorDiagnostics: false, computedStyleSupportsPseudoElements: false };
function runWithExpensiveErrorDiagnosticsDisabled$1(callback) {
  try {
    return config2._disableExpensiveErrorDiagnostics = true, callback();
  } finally {
    config2._disableExpensiveErrorDiagnostics = false;
  }
}
function configure$1(newConfig) {
  typeof newConfig == "function" && (newConfig = newConfig(config2)), config2 = { ...config2, ...newConfig };
}
function getConfig$2() {
  return config2;
}
var labelledNodeNames$1 = ["button", "meter", "output", "progress", "select", "textarea", "input"];
function getTextContent$1(node) {
  return labelledNodeNames$1.includes(node.nodeName.toLowerCase()) ? "" : node.nodeType === TEXT_NODE$3 ? node.textContent : Array.from(node.childNodes).map((childNode) => getTextContent$1(childNode)).join("");
}
function getLabelContent$1(element) {
  let textContent;
  return element.tagName.toLowerCase() === "label" ? textContent = getTextContent$1(element) : textContent = element.value || element.textContent, textContent;
}
function getRealLabels$1(element) {
  if (element.labels !== void 0) {
    var _labels;
    return (_labels = element.labels) != null ? _labels : [];
  }
  if (!isLabelable$1(element)) return [];
  let labels = element.ownerDocument.querySelectorAll("label");
  return Array.from(labels).filter((label) => label.control === element);
}
function isLabelable$1(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === "INPUT" && element.getAttribute("type") !== "hidden";
}
function getLabels3(container, element, _temp) {
  let { selector = "*" } = _temp === void 0 ? {} : _temp, ariaLabelledBy = element.getAttribute("aria-labelledby"), labelsId = ariaLabelledBy ? ariaLabelledBy.split(" ") : [];
  return labelsId.length ? labelsId.map((labelId) => {
    let labellingElement = container.querySelector('[id="' + labelId + '"]');
    return labellingElement ? { content: getLabelContent$1(labellingElement), formControl: null } : { content: "", formControl: null };
  }) : Array.from(getRealLabels$1(element)).map((label) => {
    let textToMatch = getLabelContent$1(label), labelledFormControl = Array.from(label.querySelectorAll("button, input, meter, output, progress, select, textarea")).filter((formControlElement) => formControlElement.matches(selector))[0];
    return { content: textToMatch, formControl: labelledFormControl };
  });
}
function assertNotNullOrUndefined$1(matcher) {
  if (matcher == null) throw new Error("It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?");
}
function fuzzyMatches$1(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch != "string") return false;
  assertNotNullOrUndefined$1(matcher);
  let normalizedText = normalizer(textToMatch);
  return typeof matcher == "string" || typeof matcher == "number" ? normalizedText.toLowerCase().includes(matcher.toString().toLowerCase()) : typeof matcher == "function" ? matcher(normalizedText, node) : matchRegExp$1(matcher, normalizedText);
}
function matches2(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch != "string") return false;
  assertNotNullOrUndefined$1(matcher);
  let normalizedText = normalizer(textToMatch);
  return matcher instanceof Function ? matcher(normalizedText, node) : matcher instanceof RegExp ? matchRegExp$1(matcher, normalizedText) : normalizedText === String(matcher);
}
function getDefaultNormalizer$1(_temp) {
  let { trim = true, collapseWhitespace = true } = _temp === void 0 ? {} : _temp;
  return (text) => {
    let normalizedText = text;
    return normalizedText = trim ? normalizedText.trim() : normalizedText, normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, " ") : normalizedText, normalizedText;
  };
}
function makeNormalizer$1(_ref) {
  let { trim, collapseWhitespace, normalizer } = _ref;
  if (!normalizer) return getDefaultNormalizer$1({ trim, collapseWhitespace });
  if (typeof trim < "u" || typeof collapseWhitespace < "u") throw new Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
  return normalizer;
}
function matchRegExp$1(matcher, text) {
  let match = matcher.test(text);
  return matcher.global && matcher.lastIndex !== 0 && (console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp."), matcher.lastIndex = 0), match;
}
function getNodeText$1(node) {
  return node.matches("input[type=submit], input[type=button], input[type=reset]") ? node.value : Array.from(node.childNodes).filter((child) => child.nodeType === TEXT_NODE$3 && !!child.textContent).map((c2) => c2.textContent).join("");
}
var elementRoleList2 = buildElementRoleList2(import_aria_query3.elementRoles);
function isSubtreeInaccessible$1(element) {
  return element.hidden === true || element.getAttribute("aria-hidden") === "true" || element.ownerDocument.defaultView.getComputedStyle(element).display === "none";
}
function isInaccessible$1(element, options) {
  options === void 0 && (options = {});
  let { isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible$1 } = options;
  if (element.ownerDocument.defaultView.getComputedStyle(element).visibility === "hidden") return true;
  let currentElement = element;
  for (; currentElement; ) {
    if (isSubtreeInaccessibleImpl(currentElement)) return true;
    currentElement = currentElement.parentElement;
  }
  return false;
}
function getImplicitAriaRoles2(currentNode) {
  for (let { match, roles: roles3 } of elementRoleList2) if (match(currentNode)) return [...roles3];
  return [];
}
function buildElementRoleList2(elementRolesMap) {
  function makeElementSelector(_ref) {
    let { name, attributes } = _ref;
    return "" + name + attributes.map((_ref2) => {
      let { name: attributeName, value, constraints = [] } = _ref2, shouldNotExist = constraints.indexOf("undefined") !== -1, shouldBeNonEmpty = constraints.indexOf("set") !== -1;
      return typeof value < "u" ? "[" + attributeName + '="' + value + '"]' : shouldNotExist ? ":not([" + attributeName + "])" : shouldBeNonEmpty ? "[" + attributeName + "]:not([" + attributeName + '=""])' : "[" + attributeName + "]";
    }).join("");
  }
  function getSelectorSpecificity(_ref3) {
    let { attributes = [] } = _ref3;
    return attributes.length;
  }
  function bySelectorSpecificity(_ref4, _ref5) {
    let { specificity: leftSpecificity } = _ref4, { specificity: rightSpecificity } = _ref5;
    return rightSpecificity - leftSpecificity;
  }
  function match(element) {
    let { attributes = [] } = element, typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
    typeTextIndex >= 0 && (attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)]);
    let selector = makeElementSelector({ ...element, attributes });
    return (node) => typeTextIndex >= 0 && node.type !== "text" ? false : node.matches(selector);
  }
  let result = [];
  for (let [element, roles3] of elementRolesMap.entries()) result = [...result, { match: match(element), roles: Array.from(roles3), specificity: getSelectorSpecificity(element) }];
  return result.sort(bySelectorSpecificity);
}
function getRoles$1(container, _temp) {
  let { hidden = false } = _temp === void 0 ? {} : _temp;
  function flattenDOM(node) {
    return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];
  }
  return flattenDOM(container).filter((element) => hidden === false ? isInaccessible$1(element) === false : true).reduce((acc, node) => {
    let roles3 = [];
    return node.hasAttribute("role") ? roles3 = node.getAttribute("role").split(" ").slice(0, 1) : roles3 = getImplicitAriaRoles2(node), roles3.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? { ...rolesAcc, [role]: [...rolesAcc[role], node] } : { ...rolesAcc, [role]: [node] }, acc);
  }, {});
}
function prettyRoles$1(dom2, _ref6) {
  let { hidden, includeDescription } = _ref6, roles3 = getRoles$1(dom2, { hidden });
  return Object.entries(roles3).filter((_ref7) => {
    let [role] = _ref7;
    return role !== "generic";
  }).map((_ref8) => {
    let [role, elements] = _ref8, delimiterBar = "-".repeat(50), elementsString = elements.map((el) => {
      let nameString = 'Name "' + computeAccessibleName2(el, { computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements }) + `":
`, domString = prettyDOM$1(el.cloneNode(false));
      if (includeDescription) {
        let descriptionString = 'Description "' + computeAccessibleDescription2(el, { computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements }) + `":
`;
        return "" + nameString + descriptionString + domString;
      }
      return "" + nameString + domString;
    }).join(`

`);
    return role + `:

` + elementsString + `

` + delimiterBar;
  }).join(`
`);
}
var logRoles = function(dom2, _temp2) {
  let { hidden = false } = _temp2 === void 0 ? {} : _temp2;
  return console.log(prettyRoles$1(dom2, { hidden }));
};
function computeAriaSelected$1(element) {
  return element.tagName === "OPTION" ? element.selected : checkBooleanAttribute$1(element, "aria-selected");
}
function computeAriaBusy$1(element) {
  return element.getAttribute("aria-busy") === "true";
}
function computeAriaChecked$1(element) {
  if (!("indeterminate" in element && element.indeterminate)) return "checked" in element ? element.checked : checkBooleanAttribute$1(element, "aria-checked");
}
function computeAriaPressed$1(element) {
  return checkBooleanAttribute$1(element, "aria-pressed");
}
function computeAriaCurrent$1(element) {
  var _ref9, _checkBooleanAttribut;
  return (_ref9 = (_checkBooleanAttribut = checkBooleanAttribute$1(element, "aria-current")) != null ? _checkBooleanAttribut : element.getAttribute("aria-current")) != null ? _ref9 : false;
}
function computeAriaExpanded$1(element) {
  return checkBooleanAttribute$1(element, "aria-expanded");
}
function checkBooleanAttribute$1(element, attribute) {
  let attributeValue = element.getAttribute(attribute);
  if (attributeValue === "true") return true;
  if (attributeValue === "false") return false;
}
function computeHeadingLevel$1(element) {
  let implicitHeadingLevels = { H1: 1, H2: 2, H3: 3, H4: 4, H5: 5, H6: 6 };
  return element.getAttribute("aria-level") && Number(element.getAttribute("aria-level")) || implicitHeadingLevels[element.tagName];
}
function computeAriaValueNow$1(element) {
  let valueNow = element.getAttribute("aria-valuenow");
  return valueNow === null ? void 0 : +valueNow;
}
function computeAriaValueMax$1(element) {
  let valueMax = element.getAttribute("aria-valuemax");
  return valueMax === null ? void 0 : +valueMax;
}
function computeAriaValueMin$1(element) {
  let valueMin = element.getAttribute("aria-valuemin");
  return valueMin === null ? void 0 : +valueMin;
}
function computeAriaValueText$1(element) {
  let valueText = element.getAttribute("aria-valuetext");
  return valueText === null ? void 0 : valueText;
}
var normalize2 = getDefaultNormalizer$1();
function escapeRegExp$1(string2) {
  return string2.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
}
function getRegExpMatcher$1(string2) {
  return new RegExp(escapeRegExp$1(string2.toLowerCase()), "i");
}
function makeSuggestion$1(queryName, element, content, _ref) {
  let { variant, name } = _ref, warning = "", queryOptions = {}, queryArgs = [["Role", "TestId"].includes(queryName) ? content : getRegExpMatcher$1(content)];
  name && (queryOptions.name = getRegExpMatcher$1(name)), queryName === "Role" && isInaccessible$1(element) && (queryOptions.hidden = true, warning = `Element is inaccessible. This means that the element and all its children are invisible to screen readers.
    If you are using the aria-hidden prop, make sure this is the right choice for your case.
    `), Object.keys(queryOptions).length > 0 && queryArgs.push(queryOptions);
  let queryMethod = variant + "By" + queryName;
  return { queryName, queryMethod, queryArgs, variant, warning, toString() {
    warning && console.warn(warning);
    let [text, options] = queryArgs;
    return text = typeof text == "string" ? "'" + text + "'" : text, options = options ? ", { " + Object.entries(options).map((_ref2) => {
      let [k2, v2] = _ref2;
      return k2 + ": " + v2;
    }).join(", ") + " }" : "", queryMethod + "(" + text + options + ")";
  } };
}
function canSuggest$1(currentMethod, requestedMethod, data) {
  return data && (!requestedMethod || requestedMethod.toLowerCase() === currentMethod.toLowerCase());
}
function getSuggestedQuery$1(element, variant, method) {
  var _element$getAttribute, _getImplicitAriaRoles;
  if (variant === void 0 && (variant = "get"), element.matches(getConfig$2().defaultIgnore)) return;
  let role = (_element$getAttribute = element.getAttribute("role")) != null ? _element$getAttribute : (_getImplicitAriaRoles = getImplicitAriaRoles2(element)) == null ? void 0 : _getImplicitAriaRoles[0];
  if (role !== "generic" && canSuggest$1("Role", method, role)) return makeSuggestion$1("Role", element, role, { variant, name: computeAccessibleName2(element, { computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements }) });
  let labelText = getLabels3(document, element).map((label) => label.content).join(" ");
  if (canSuggest$1("LabelText", method, labelText)) return makeSuggestion$1("LabelText", element, labelText, { variant });
  let placeholderText = element.getAttribute("placeholder");
  if (canSuggest$1("PlaceholderText", method, placeholderText)) return makeSuggestion$1("PlaceholderText", element, placeholderText, { variant });
  let textContent = normalize2(getNodeText$1(element));
  if (canSuggest$1("Text", method, textContent)) return makeSuggestion$1("Text", element, textContent, { variant });
  if (canSuggest$1("DisplayValue", method, element.value)) return makeSuggestion$1("DisplayValue", element, normalize2(element.value), { variant });
  let alt = element.getAttribute("alt");
  if (canSuggest$1("AltText", method, alt)) return makeSuggestion$1("AltText", element, alt, { variant });
  let title = element.getAttribute("title");
  if (canSuggest$1("Title", method, title)) return makeSuggestion$1("Title", element, title, { variant });
  let testId = element.getAttribute(getConfig$2().testIdAttribute);
  if (canSuggest$1("TestId", method, testId)) return makeSuggestion$1("TestId", element, testId, { variant });
}
function copyStackTrace$1(target, source) {
  target.stack = source.stack.replace(source.message, target.message);
}
function waitFor$1(callback, _ref) {
  let { container = getDocument$1(), timeout = getConfig$2().asyncUtilTimeout, showOriginalStackTrace = getConfig$2().showOriginalStackTrace, stackTraceError, interval = 50, onTimeout = (error) => (Object.defineProperty(error, "message", { value: getConfig$2().getElementError(error.message, container).message }), error), mutationObserverOptions = { subtree: true, childList: true, attributes: true, characterData: true } } = _ref;
  if (typeof callback != "function") throw new TypeError("Received `callback` arg must be a function");
  return new Promise(async (resolve, reject) => {
    let lastError, intervalId, observer, finished = false, promiseStatus = "idle", overallTimeoutTimer = setTimeout(handleTimeout, timeout), usingJestFakeTimers = jestFakeTimersAreEnabled$1();
    if (usingJestFakeTimers) {
      let { unstable_advanceTimersWrapper: advanceTimersWrapper } = getConfig$2();
      for (checkCallback(); !finished; ) {
        if (!jestFakeTimersAreEnabled$1()) {
          let error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
          showOriginalStackTrace || copyStackTrace$1(error, stackTraceError), reject(error);
          return;
        }
        if (await advanceTimersWrapper(async () => {
          jest.advanceTimersByTime(interval);
        }), finished) break;
        checkCallback();
      }
    } else {
      try {
        checkContainerType$1(container);
      } catch (e2) {
        reject(e2);
        return;
      }
      intervalId = setInterval(checkRealTimersCallback, interval);
      let { MutationObserver } = getWindowFromNode$1(container);
      observer = new MutationObserver(checkRealTimersCallback), observer.observe(container, mutationObserverOptions), checkCallback();
    }
    function onDone(error, result) {
      finished = true, clearTimeout(overallTimeoutTimer), usingJestFakeTimers || (clearInterval(intervalId), observer.disconnect()), error ? reject(error) : resolve(result);
    }
    function checkRealTimersCallback() {
      if (jestFakeTimersAreEnabled$1()) {
        let error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
        return showOriginalStackTrace || copyStackTrace$1(error, stackTraceError), reject(error);
      } else return checkCallback();
    }
    function checkCallback() {
      if (promiseStatus !== "pending") try {
        let result = runWithExpensiveErrorDiagnosticsDisabled$1(callback);
        typeof (result == null ? void 0 : result.then) == "function" ? (promiseStatus = "pending", result.then((resolvedValue) => {
          promiseStatus = "resolved", onDone(null, resolvedValue);
        }, (rejectedValue) => {
          promiseStatus = "rejected", lastError = rejectedValue;
        })) : onDone(null, result);
      } catch (error) {
        lastError = error;
      }
    }
    function handleTimeout() {
      let error;
      lastError ? (error = lastError, !showOriginalStackTrace && error.name === "TestingLibraryElementError" && copyStackTrace$1(error, stackTraceError)) : (error = new Error("Timed out in waitFor."), showOriginalStackTrace || copyStackTrace$1(error, stackTraceError)), onDone(onTimeout(error), null);
    }
  });
}
function waitForWrapper$1(callback, options) {
  let stackTraceError = new Error("STACK_TRACE_MESSAGE");
  return getConfig$2().asyncWrapper(() => waitFor$1(callback, { stackTraceError, ...options }));
}
function getElementError$1(message, container) {
  return getConfig$2().getElementError(message, container);
}
function getMultipleElementsFoundError$1(message, container) {
  return getElementError$1(message + "\n\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).", container);
}
function queryAllByAttribute$1(attribute, container, text, _temp) {
  let { exact = true, collapseWhitespace, trim, normalizer } = _temp === void 0 ? {} : _temp, matcher = exact ? matches2 : fuzzyMatches$1, matchNormalizer = makeNormalizer$1({ collapseWhitespace, trim, normalizer });
  return Array.from(container.querySelectorAll("[" + attribute + "]")).filter((node) => matcher(node.getAttribute(attribute), node, text, matchNormalizer));
}
function queryByAttribute(attribute, container, text, options) {
  let els = queryAllByAttribute$1(attribute, container, text, options);
  if (els.length > 1) throw getMultipleElementsFoundError$1("Found multiple elements by [" + attribute + "=" + text + "]", container);
  return els[0] || null;
}
function makeSingleQuery$1(allQuery, getMultipleError2) {
  return function(container) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key];
    let els = allQuery(container, ...args);
    if (els.length > 1) {
      let elementStrings = els.map((element) => getElementError$1(null, element).message).join(`

`);
      throw getMultipleElementsFoundError$1(getMultipleError2(container, ...args) + `

Here are the matching elements:

` + elementStrings, container);
    }
    return els[0] || null;
  };
}
function getSuggestionError$1(suggestion, container) {
  return getConfig$2().getElementError(`A better query is available, try this:
` + suggestion.toString() + `
`, container);
}
function makeGetAllQuery$1(allQuery, getMissingError2) {
  return function(container) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) args[_key2 - 1] = arguments[_key2];
    let els = allQuery(container, ...args);
    if (!els.length) throw getConfig$2().getElementError(getMissingError2(container, ...args), container);
    return els;
  };
}
function makeFindQuery$1(getter) {
  return (container, text, options, waitForOptions) => waitForWrapper$1(() => getter(container, text, options), { container, ...waitForOptions });
}
var wrapSingleQueryWithSuggestion$1 = (query, queryAllByName, variant) => function(container) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) args[_key3 - 1] = arguments[_key3];
  let element = query(container, ...args), [{ suggest = getConfig$2().throwSuggestions } = {}] = args.slice(-1);
  if (element && suggest) {
    let suggestion = getSuggestedQuery$1(element, variant);
    if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) throw getSuggestionError$1(suggestion.toString(), container);
  }
  return element;
}, wrapAllByQueryWithSuggestion$1 = (query, queryAllByName, variant) => function(container) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) args[_key4 - 1] = arguments[_key4];
  let els = query(container, ...args), [{ suggest = getConfig$2().throwSuggestions } = {}] = args.slice(-1);
  if (els.length && suggest) {
    let uniqueSuggestionMessages = [...new Set(els.map((element) => {
      var _getSuggestedQuery;
      return (_getSuggestedQuery = getSuggestedQuery$1(element, variant)) == null ? void 0 : _getSuggestedQuery.toString();
    }))];
    if (uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(getSuggestedQuery$1(els[0], variant).queryName)) throw getSuggestionError$1(uniqueSuggestionMessages[0], container);
  }
  return els;
};
function buildQueries$1(queryAllBy, getMultipleError2, getMissingError2) {
  let queryBy = wrapSingleQueryWithSuggestion$1(makeSingleQuery$1(queryAllBy, getMultipleError2), queryAllBy.name, "query"), getAllBy = makeGetAllQuery$1(queryAllBy, getMissingError2), getBy = makeSingleQuery$1(getAllBy, getMultipleError2), getByWithSuggestions = wrapSingleQueryWithSuggestion$1(getBy, queryAllBy.name, "get"), getAllWithSuggestions = wrapAllByQueryWithSuggestion$1(getAllBy, queryAllBy.name.replace("query", "get"), "getAll"), findAllBy = makeFindQuery$1(wrapAllByQueryWithSuggestion$1(getAllBy, queryAllBy.name, "findAll")), findBy = makeFindQuery$1(wrapSingleQueryWithSuggestion$1(getBy, queryAllBy.name, "find"));
  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];
}
var queryHelpers = Object.freeze({ __proto__: null, getElementError: getElementError$1, wrapAllByQueryWithSuggestion: wrapAllByQueryWithSuggestion$1, wrapSingleQueryWithSuggestion: wrapSingleQueryWithSuggestion$1, getMultipleElementsFoundError: getMultipleElementsFoundError$1, queryAllByAttribute: queryAllByAttribute$1, queryByAttribute, makeSingleQuery: makeSingleQuery$1, makeGetAllQuery: makeGetAllQuery$1, makeFindQuery: makeFindQuery$1, buildQueries: buildQueries$1 });
function queryAllLabels$1(container) {
  return Array.from(container.querySelectorAll("label,input")).map((node) => ({ node, textToMatch: getLabelContent$1(node) })).filter((_ref) => {
    let { textToMatch } = _ref;
    return textToMatch !== null;
  });
}
var queryAllLabelsByText$1 = function(container, text, _temp) {
  let { exact = true, trim, collapseWhitespace, normalizer } = _temp === void 0 ? {} : _temp, matcher = exact ? matches2 : fuzzyMatches$1, matchNormalizer = makeNormalizer$1({ collapseWhitespace, trim, normalizer });
  return queryAllLabels$1(container).filter((_ref2) => {
    let { node, textToMatch } = _ref2;
    return matcher(textToMatch, node, text, matchNormalizer);
  }).map((_ref3) => {
    let { node } = _ref3;
    return node;
  });
}, queryAllByLabelText$1 = function(container, text, _temp2) {
  let { selector = "*", exact = true, collapseWhitespace, trim, normalizer } = _temp2 === void 0 ? {} : _temp2;
  checkContainerType$1(container);
  let matcher = exact ? matches2 : fuzzyMatches$1, matchNormalizer = makeNormalizer$1({ collapseWhitespace, trim, normalizer }), matchingLabelledElements = Array.from(container.querySelectorAll("*")).filter((element) => getRealLabels$1(element).length || element.hasAttribute("aria-labelledby")).reduce((labelledElements, labelledElement) => {
    let labelList = getLabels3(container, labelledElement, { selector });
    labelList.filter((label) => !!label.formControl).forEach((label) => {
      matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl && labelledElements.push(label.formControl);
    });
    let labelsValue = labelList.filter((label) => !!label.content).map((label) => label.content);
    return matcher(labelsValue.join(" "), labelledElement, text, matchNormalizer) && labelledElements.push(labelledElement), labelsValue.length > 1 && labelsValue.forEach((labelValue, index) => {
      matcher(labelValue, labelledElement, text, matchNormalizer) && labelledElements.push(labelledElement);
      let labelsFiltered = [...labelsValue];
      labelsFiltered.splice(index, 1), labelsFiltered.length > 1 && matcher(labelsFiltered.join(" "), labelledElement, text, matchNormalizer) && labelledElements.push(labelledElement);
    }), labelledElements;
  }, []).concat(queryAllByAttribute$1("aria-label", container, text, { exact, normalizer: matchNormalizer }));
  return Array.from(new Set(matchingLabelledElements)).filter((element) => element.matches(selector));
}, getAllByLabelText$1 = function(container, text) {
  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) rest[_key - 2] = arguments[_key];
  let els = queryAllByLabelText$1(container, text, ...rest);
  if (!els.length) {
    let labels = queryAllLabelsByText$1(container, text, ...rest);
    if (labels.length) {
      let tagNames = labels.map((label) => getTagNameOfElementAssociatedWithLabelViaFor$1(container, label)).filter((tagName) => !!tagName);
      throw tagNames.length ? getConfig$2().getElementError(tagNames.map((tagName) => "Found a label with the text of: " + text + ", however the element associated with this label (<" + tagName + " />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <" + tagName + " />, you can use aria-label or aria-labelledby instead.").join(`

`), container) : getConfig$2().getElementError("Found a label with the text of: " + text + `, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
    } else throw getConfig$2().getElementError("Unable to find a label with the text of: " + text, container);
  }
  return els;
};
function getTagNameOfElementAssociatedWithLabelViaFor$1(container, label) {
  let htmlFor = label.getAttribute("for");
  if (!htmlFor) return null;
  let element = container.querySelector('[id="' + htmlFor + '"]');
  return element ? element.tagName.toLowerCase() : null;
}
var getMultipleError$7$1 = (c2, text) => "Found multiple elements with the text of: " + text, queryByLabelText$1 = wrapSingleQueryWithSuggestion$1(makeSingleQuery$1(queryAllByLabelText$1, getMultipleError$7$1), queryAllByLabelText$1.name, "query"), getByLabelText$1 = makeSingleQuery$1(getAllByLabelText$1, getMultipleError$7$1), findAllByLabelText$1 = makeFindQuery$1(wrapAllByQueryWithSuggestion$1(getAllByLabelText$1, getAllByLabelText$1.name, "findAll")), findByLabelText$1 = makeFindQuery$1(wrapSingleQueryWithSuggestion$1(getByLabelText$1, getAllByLabelText$1.name, "find")), getAllByLabelTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(getAllByLabelText$1, getAllByLabelText$1.name, "getAll"), getByLabelTextWithSuggestions$1 = wrapSingleQueryWithSuggestion$1(getByLabelText$1, getAllByLabelText$1.name, "get"), queryAllByLabelTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByLabelText$1, queryAllByLabelText$1.name, "queryAll"), queryAllByPlaceholderText$1 = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
  return checkContainerType$1(args[0]), queryAllByAttribute$1("placeholder", ...args);
}, getMultipleError$6$1 = (c2, text) => "Found multiple elements with the placeholder text of: " + text, getMissingError$6$1 = (c2, text) => "Unable to find an element with the placeholder text of: " + text, queryAllByPlaceholderTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByPlaceholderText$1, queryAllByPlaceholderText$1.name, "queryAll"), [queryByPlaceholderText$1, getAllByPlaceholderText$1, getByPlaceholderText$1, findAllByPlaceholderText$1, findByPlaceholderText$1] = buildQueries$1(queryAllByPlaceholderText$1, getMultipleError$6$1, getMissingError$6$1), queryAllByText$1 = function(container, text, _temp) {
  let { selector = "*", exact = true, collapseWhitespace, trim, ignore = getConfig$2().defaultIgnore, normalizer } = _temp === void 0 ? {} : _temp;
  checkContainerType$1(container);
  let matcher = exact ? matches2 : fuzzyMatches$1, matchNormalizer = makeNormalizer$1({ collapseWhitespace, trim, normalizer }), baseArray = [];
  return typeof container.matches == "function" && container.matches(selector) && (baseArray = [container]), [...baseArray, ...Array.from(container.querySelectorAll(selector))].filter((node) => !ignore || !node.matches(ignore)).filter((node) => matcher(getNodeText$1(node), node, text, matchNormalizer));
}, getMultipleError$5$1 = (c2, text) => "Found multiple elements with the text: " + text, getMissingError$5$1 = function(c2, text, options) {
  options === void 0 && (options = {});
  let { collapseWhitespace, trim, normalizer, selector } = options, normalizedText = makeNormalizer$1({ collapseWhitespace, trim, normalizer })(text.toString()), isNormalizedDifferent = normalizedText !== text.toString(), isCustomSelector = (selector ?? "*") !== "*";
  return "Unable to find an element with the text: " + (isNormalizedDifferent ? normalizedText + " (normalized from '" + text + "')" : text) + (isCustomSelector ? ", which matches selector '" + selector + "'" : "") + ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.";
}, queryAllByTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByText$1, queryAllByText$1.name, "queryAll"), [queryByText$1, getAllByText$1, getByText$1, findAllByText$1, findByText$1] = buildQueries$1(queryAllByText$1, getMultipleError$5$1, getMissingError$5$1), queryAllByDisplayValue$1 = function(container, value, _temp) {
  let { exact = true, collapseWhitespace, trim, normalizer } = _temp === void 0 ? {} : _temp;
  checkContainerType$1(container);
  let matcher = exact ? matches2 : fuzzyMatches$1, matchNormalizer = makeNormalizer$1({ collapseWhitespace, trim, normalizer });
  return Array.from(container.querySelectorAll("input,textarea,select")).filter((node) => node.tagName === "SELECT" ? Array.from(node.options).filter((option) => option.selected).some((optionNode) => matcher(getNodeText$1(optionNode), optionNode, value, matchNormalizer)) : matcher(node.value, node, value, matchNormalizer));
}, getMultipleError$4$1 = (c2, value) => "Found multiple elements with the display value: " + value + ".", getMissingError$4$1 = (c2, value) => "Unable to find an element with the display value: " + value + ".", queryAllByDisplayValueWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByDisplayValue$1, queryAllByDisplayValue$1.name, "queryAll"), [queryByDisplayValue$1, getAllByDisplayValue$1, getByDisplayValue$1, findAllByDisplayValue$1, findByDisplayValue$1] = buildQueries$1(queryAllByDisplayValue$1, getMultipleError$4$1, getMissingError$4$1), VALID_TAG_REGEXP$1 = /^(img|input|area|.+-.+)$/i, queryAllByAltText$1 = function(container, alt, options) {
  return options === void 0 && (options = {}), checkContainerType$1(container), queryAllByAttribute$1("alt", container, alt, options).filter((node) => VALID_TAG_REGEXP$1.test(node.tagName));
}, getMultipleError$3$1 = (c2, alt) => "Found multiple elements with the alt text: " + alt, getMissingError$3$1 = (c2, alt) => "Unable to find an element with the alt text: " + alt, queryAllByAltTextWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByAltText$1, queryAllByAltText$1.name, "queryAll"), [queryByAltText$1, getAllByAltText$1, getByAltText$1, findAllByAltText$1, findByAltText$1] = buildQueries$1(queryAllByAltText$1, getMultipleError$3$1, getMissingError$3$1), isSvgTitle$1 = (node) => {
  var _node$parentElement;
  return node.tagName.toLowerCase() === "title" && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === "svg";
}, queryAllByTitle$1 = function(container, text, _temp) {
  let { exact = true, collapseWhitespace, trim, normalizer } = _temp === void 0 ? {} : _temp;
  checkContainerType$1(container);
  let matcher = exact ? matches2 : fuzzyMatches$1, matchNormalizer = makeNormalizer$1({ collapseWhitespace, trim, normalizer });
  return Array.from(container.querySelectorAll("[title], svg > title")).filter((node) => matcher(node.getAttribute("title"), node, text, matchNormalizer) || isSvgTitle$1(node) && matcher(getNodeText$1(node), node, text, matchNormalizer));
}, getMultipleError$2$1 = (c2, title) => "Found multiple elements with the title: " + title + ".", getMissingError$2$1 = (c2, title) => "Unable to find an element with the title: " + title + ".", queryAllByTitleWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByTitle$1, queryAllByTitle$1.name, "queryAll"), [queryByTitle$1, getAllByTitle$1, getByTitle$1, findAllByTitle$1, findByTitle$1] = buildQueries$1(queryAllByTitle$1, getMultipleError$2$1, getMissingError$2$1), queryAllByRole$1 = function(container, role, _temp) {
  let { hidden = getConfig$2().defaultHidden, name, description, queryFallbacks = false, selected, busy, checked, pressed, current, level, expanded, value: { now: valueNow, min: valueMin, max: valueMax, text: valueText } = {} } = _temp === void 0 ? {} : _temp;
  if (checkContainerType$1(container), selected !== void 0) {
    var _allRoles$get;
    if (((_allRoles$get = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get.props["aria-selected"]) === void 0) throw new Error('"aria-selected" is not supported on role "' + role + '".');
  }
  if (busy !== void 0) {
    var _allRoles$get2;
    if (((_allRoles$get2 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get2.props["aria-busy"]) === void 0) throw new Error('"aria-busy" is not supported on role "' + role + '".');
  }
  if (checked !== void 0) {
    var _allRoles$get3;
    if (((_allRoles$get3 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get3.props["aria-checked"]) === void 0) throw new Error('"aria-checked" is not supported on role "' + role + '".');
  }
  if (pressed !== void 0) {
    var _allRoles$get4;
    if (((_allRoles$get4 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get4.props["aria-pressed"]) === void 0) throw new Error('"aria-pressed" is not supported on role "' + role + '".');
  }
  if (current !== void 0) {
    var _allRoles$get5;
    if (((_allRoles$get5 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get5.props["aria-current"]) === void 0) throw new Error('"aria-current" is not supported on role "' + role + '".');
  }
  if (level !== void 0 && role !== "heading") throw new Error('Role "' + role + '" cannot have "level" property.');
  if (valueNow !== void 0) {
    var _allRoles$get6;
    if (((_allRoles$get6 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get6.props["aria-valuenow"]) === void 0) throw new Error('"aria-valuenow" is not supported on role "' + role + '".');
  }
  if (valueMax !== void 0) {
    var _allRoles$get7;
    if (((_allRoles$get7 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get7.props["aria-valuemax"]) === void 0) throw new Error('"aria-valuemax" is not supported on role "' + role + '".');
  }
  if (valueMin !== void 0) {
    var _allRoles$get8;
    if (((_allRoles$get8 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get8.props["aria-valuemin"]) === void 0) throw new Error('"aria-valuemin" is not supported on role "' + role + '".');
  }
  if (valueText !== void 0) {
    var _allRoles$get9;
    if (((_allRoles$get9 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get9.props["aria-valuetext"]) === void 0) throw new Error('"aria-valuetext" is not supported on role "' + role + '".');
  }
  if (expanded !== void 0) {
    var _allRoles$get10;
    if (((_allRoles$get10 = import_aria_query3.roles.get(role)) == null ? void 0 : _allRoles$get10.props["aria-expanded"]) === void 0) throw new Error('"aria-expanded" is not supported on role "' + role + '".');
  }
  let subtreeIsInaccessibleCache = /* @__PURE__ */ new WeakMap();
  function cachedIsSubtreeInaccessible(element) {
    return subtreeIsInaccessibleCache.has(element) || subtreeIsInaccessibleCache.set(element, isSubtreeInaccessible$1(element)), subtreeIsInaccessibleCache.get(element);
  }
  return Array.from(container.querySelectorAll(makeRoleSelector$1(role))).filter((node) => {
    if (node.hasAttribute("role")) {
      let roleValue = node.getAttribute("role");
      if (queryFallbacks) return roleValue.split(" ").filter(Boolean).some((roleAttributeToken) => roleAttributeToken === role);
      let [firstRoleAttributeToken] = roleValue.split(" ");
      return firstRoleAttributeToken === role;
    }
    return getImplicitAriaRoles2(node).some((implicitRole) => implicitRole === role);
  }).filter((element) => {
    if (selected !== void 0) return selected === computeAriaSelected$1(element);
    if (busy !== void 0) return busy === computeAriaBusy$1(element);
    if (checked !== void 0) return checked === computeAriaChecked$1(element);
    if (pressed !== void 0) return pressed === computeAriaPressed$1(element);
    if (current !== void 0) return current === computeAriaCurrent$1(element);
    if (expanded !== void 0) return expanded === computeAriaExpanded$1(element);
    if (level !== void 0) return level === computeHeadingLevel$1(element);
    if (valueNow !== void 0 || valueMax !== void 0 || valueMin !== void 0 || valueText !== void 0) {
      let valueMatches = true;
      if (valueNow !== void 0 && valueMatches && (valueMatches = valueNow === computeAriaValueNow$1(element)), valueMax !== void 0 && valueMatches && (valueMatches = valueMax === computeAriaValueMax$1(element)), valueMin !== void 0 && valueMatches && (valueMatches = valueMin === computeAriaValueMin$1(element)), valueText !== void 0) {
        var _computeAriaValueText;
        valueMatches && (valueMatches = matches2((_computeAriaValueText = computeAriaValueText$1(element)) != null ? _computeAriaValueText : null, element, valueText, (text) => text));
      }
      return valueMatches;
    }
    return true;
  }).filter((element) => name === void 0 ? true : matches2(computeAccessibleName2(element, { computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements }), element, name, (text) => text)).filter((element) => description === void 0 ? true : matches2(computeAccessibleDescription2(element, { computedStyleSupportsPseudoElements: getConfig$2().computedStyleSupportsPseudoElements }), element, description, (text) => text)).filter((element) => hidden === false ? isInaccessible$1(element, { isSubtreeInaccessible: cachedIsSubtreeInaccessible }) === false : true);
};
function makeRoleSelector$1(role) {
  var _roleElements$get;
  let explicitRoleSelector = '*[role~="' + role + '"]', roleRelations = (_roleElements$get = import_aria_query3.roleElements.get(role)) != null ? _roleElements$get : /* @__PURE__ */ new Set(), implicitRoleSelectors = new Set(Array.from(roleRelations).map((_ref) => {
    let { name } = _ref;
    return name;
  }));
  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(",");
}
var getNameHint$1 = (name) => {
  let nameHint = "";
  return name === void 0 ? nameHint = "" : typeof name == "string" ? nameHint = ' and name "' + name + '"' : nameHint = " and name `" + name + "`", nameHint;
}, getMultipleError$1$1 = function(c2, role, _temp2) {
  let { name } = _temp2 === void 0 ? {} : _temp2;
  return 'Found multiple elements with the role "' + role + '"' + getNameHint$1(name);
}, getMissingError$1$1 = function(container, role, _temp3) {
  let { hidden = getConfig$2().defaultHidden, name, description } = _temp3 === void 0 ? {} : _temp3;
  if (getConfig$2()._disableExpensiveErrorDiagnostics) return 'Unable to find role="' + role + '"' + getNameHint$1(name);
  let roles3 = "";
  Array.from(container.children).forEach((childElement) => {
    roles3 += prettyRoles$1(childElement, { hidden, includeDescription: description !== void 0 });
  });
  let roleMessage;
  roles3.length === 0 ? hidden === false ? roleMessage = "There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole" : roleMessage = "There are no available roles." : roleMessage = (`
Here are the ` + (hidden === false ? "accessible" : "available") + ` roles:

  ` + roles3.replace(/\n/g, `
  `).replace(/\n\s\s\n/g, `

`) + `
`).trim();
  let nameHint = "";
  name === void 0 ? nameHint = "" : typeof name == "string" ? nameHint = ' and name "' + name + '"' : nameHint = " and name `" + name + "`";
  let descriptionHint = "";
  return description === void 0 ? descriptionHint = "" : typeof description == "string" ? descriptionHint = ' and description "' + description + '"' : descriptionHint = " and description `" + description + "`", (`
Unable to find an ` + (hidden === false ? "accessible " : "") + 'element with the role "' + role + '"' + nameHint + descriptionHint + `

` + roleMessage).trim();
}, queryAllByRoleWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByRole$1, queryAllByRole$1.name, "queryAll"), [queryByRole$1, getAllByRole$1, getByRole$1, findAllByRole$1, findByRole$1] = buildQueries$1(queryAllByRole$1, getMultipleError$1$1, getMissingError$1$1), getTestIdAttribute$1 = () => getConfig$2().testIdAttribute, queryAllByTestId$1 = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
  return checkContainerType$1(args[0]), queryAllByAttribute$1(getTestIdAttribute$1(), ...args);
}, getMultipleError$8 = (c2, id) => "Found multiple elements by: [" + getTestIdAttribute$1() + '="' + id + '"]', getMissingError$7 = (c2, id) => "Unable to find an element by: [" + getTestIdAttribute$1() + '="' + id + '"]', queryAllByTestIdWithSuggestions$1 = wrapAllByQueryWithSuggestion$1(queryAllByTestId$1, queryAllByTestId$1.name, "queryAll"), [queryByTestId$1, getAllByTestId$1, getByTestId$1, findAllByTestId$1, findByTestId$1] = buildQueries$1(queryAllByTestId$1, getMultipleError$8, getMissingError$7), queries$1 = Object.freeze({ __proto__: null, queryAllByLabelText: queryAllByLabelTextWithSuggestions$1, queryByLabelText: queryByLabelText$1, getAllByLabelText: getAllByLabelTextWithSuggestions$1, getByLabelText: getByLabelTextWithSuggestions$1, findAllByLabelText: findAllByLabelText$1, findByLabelText: findByLabelText$1, queryByPlaceholderText: queryByPlaceholderText$1, queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions$1, getByPlaceholderText: getByPlaceholderText$1, getAllByPlaceholderText: getAllByPlaceholderText$1, findAllByPlaceholderText: findAllByPlaceholderText$1, findByPlaceholderText: findByPlaceholderText$1, queryByText: queryByText$1, queryAllByText: queryAllByTextWithSuggestions$1, getByText: getByText$1, getAllByText: getAllByText$1, findAllByText: findAllByText$1, findByText: findByText$1, queryByDisplayValue: queryByDisplayValue$1, queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions$1, getByDisplayValue: getByDisplayValue$1, getAllByDisplayValue: getAllByDisplayValue$1, findAllByDisplayValue: findAllByDisplayValue$1, findByDisplayValue: findByDisplayValue$1, queryByAltText: queryByAltText$1, queryAllByAltText: queryAllByAltTextWithSuggestions$1, getByAltText: getByAltText$1, getAllByAltText: getAllByAltText$1, findAllByAltText: findAllByAltText$1, findByAltText: findByAltText$1, queryByTitle: queryByTitle$1, queryAllByTitle: queryAllByTitleWithSuggestions$1, getByTitle: getByTitle$1, getAllByTitle: getAllByTitle$1, findAllByTitle: findAllByTitle$1, findByTitle: findByTitle$1, queryByRole: queryByRole$1, queryAllByRole: queryAllByRoleWithSuggestions$1, getAllByRole: getAllByRole$1, getByRole: getByRole$1, findAllByRole: findAllByRole$1, findByRole: findByRole$1, queryByTestId: queryByTestId$1, queryAllByTestId: queryAllByTestIdWithSuggestions$1, getByTestId: getByTestId$1, getAllByTestId: getAllByTestId$1, findAllByTestId: findAllByTestId$1, findByTestId: findByTestId$1 });
function getQueriesForElement$1(element, queries$1$1, initialValue2) {
  return queries$1$1 === void 0 && (queries$1$1 = queries$1), initialValue2 === void 0 && (initialValue2 = {}), Object.keys(queries$1$1).reduce((helpers, key) => {
    let fn3 = queries$1$1[key];
    return helpers[key] = fn3.bind(null, element), helpers;
  }, initialValue2);
}
var isRemoved = (result) => !result || Array.isArray(result) && !result.length;
function initialCheck(elements) {
  if (isRemoved(elements)) throw new Error("The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.");
}
async function waitForElementToBeRemoved(callback, options) {
  let timeoutError = new Error("Timed out in waitForElementToBeRemoved.");
  if (typeof callback != "function") {
    initialCheck(callback);
    let getRemainingElements = (Array.isArray(callback) ? callback : [callback]).map((element) => {
      let parent = element.parentElement;
      if (parent === null) return () => null;
      for (; parent.parentElement; ) parent = parent.parentElement;
      return () => parent.contains(element) ? element : null;
    });
    callback = () => getRemainingElements.map((c2) => c2()).filter(Boolean);
  }
  return initialCheck(callback()), waitForWrapper$1(() => {
    let result;
    try {
      result = callback();
    } catch (error) {
      if (error.name === "TestingLibraryElementError") return;
      throw error;
    }
    if (!isRemoved(result)) throw timeoutError;
  }, options);
}
var eventMap$1 = { copy: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, cut: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, paste: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, compositionEnd: { EventType: "CompositionEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, compositionStart: { EventType: "CompositionEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, compositionUpdate: { EventType: "CompositionEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keyDown: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, charCode: 0, composed: true } }, keyPress: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, charCode: 0, composed: true } }, keyUp: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, charCode: 0, composed: true } }, focus: { EventType: "FocusEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, blur: { EventType: "FocusEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, focusIn: { EventType: "FocusEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, focusOut: { EventType: "FocusEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, change: { EventType: "Event", defaultInit: { bubbles: true, cancelable: false } }, input: { EventType: "InputEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, invalid: { EventType: "Event", defaultInit: { bubbles: false, cancelable: true } }, submit: { EventType: "Event", defaultInit: { bubbles: true, cancelable: true } }, reset: { EventType: "Event", defaultInit: { bubbles: true, cancelable: true } }, click: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, button: 0, composed: true } }, contextMenu: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dblClick: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, drag: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dragEnd: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, dragEnter: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dragExit: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, dragLeave: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, dragOver: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dragStart: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, drop: { EventType: "DragEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseDown: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseEnter: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mouseLeave: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mouseMove: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseOut: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseOver: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseUp: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, select: { EventType: "Event", defaultInit: { bubbles: true, cancelable: false } }, touchCancel: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, touchEnd: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, touchMove: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, touchStart: { EventType: "TouchEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, resize: { EventType: "UIEvent", defaultInit: { bubbles: false, cancelable: false } }, scroll: { EventType: "UIEvent", defaultInit: { bubbles: false, cancelable: false } }, wheel: { EventType: "WheelEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, abort: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, canPlay: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, canPlayThrough: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, durationChange: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, emptied: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, encrypted: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, ended: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, loadedData: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, loadedMetadata: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, loadStart: { EventType: "ProgressEvent", defaultInit: { bubbles: false, cancelable: false } }, pause: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, play: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, playing: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, progress: { EventType: "ProgressEvent", defaultInit: { bubbles: false, cancelable: false } }, rateChange: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, seeked: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, seeking: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, stalled: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, suspend: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, timeUpdate: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, volumeChange: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, waiting: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, load: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, error: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, animationStart: { EventType: "AnimationEvent", defaultInit: { bubbles: true, cancelable: false } }, animationEnd: { EventType: "AnimationEvent", defaultInit: { bubbles: true, cancelable: false } }, animationIteration: { EventType: "AnimationEvent", defaultInit: { bubbles: true, cancelable: false } }, transitionCancel: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: false } }, transitionEnd: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: true } }, transitionRun: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: false } }, transitionStart: { EventType: "TransitionEvent", defaultInit: { bubbles: true, cancelable: false } }, pointerOver: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerEnter: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, pointerDown: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerMove: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerUp: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerCancel: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, pointerOut: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerLeave: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, gotPointerCapture: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, lostPointerCapture: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, popState: { EventType: "PopStateEvent", defaultInit: { bubbles: true, cancelable: false } }, offline: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, online: { EventType: "Event", defaultInit: { bubbles: false, cancelable: false } }, pageHide: { EventType: "PageTransitionEvent", defaultInit: { bubbles: true, cancelable: true } }, pageShow: { EventType: "PageTransitionEvent", defaultInit: { bubbles: true, cancelable: true } } }, eventAliasMap$1 = { doubleClick: "dblClick" };
function fireEvent(element, event) {
  return getConfig$2().eventWrapper(() => {
    if (!event) throw new Error("Unable to fire an event - please provide an event object.");
    if (!element) throw new Error('Unable to fire a "' + event.type + '" event - please provide a DOM element.');
    return element.dispatchEvent(event);
  });
}
function createEvent(eventName, node, init, _temp) {
  let { EventType = "Event", defaultInit = {} } = _temp === void 0 ? {} : _temp;
  if (!node) throw new Error('Unable to fire a "' + eventName + '" event - please provide a DOM element.');
  let eventInit = { ...defaultInit, ...init }, { target: { value, files, ...targetProperties } = {} } = eventInit;
  value !== void 0 && setNativeValue(node, value), files !== void 0 && Object.defineProperty(node, "files", { configurable: true, enumerable: true, writable: true, value: files }), Object.assign(node, targetProperties);
  let window2 = getWindowFromNode$1(node), EventConstructor = window2[EventType] || window2.Event, event;
  if (typeof EventConstructor == "function") event = new EventConstructor(eventName, eventInit);
  else {
    event = window2.document.createEvent(EventType);
    let { bubbles, cancelable, detail, ...otherInit } = eventInit;
    event.initEvent(eventName, bubbles, cancelable, detail), Object.keys(otherInit).forEach((eventKey) => {
      event[eventKey] = otherInit[eventKey];
    });
  }
  return ["dataTransfer", "clipboardData"].forEach((dataTransferKey) => {
    let dataTransferValue = eventInit[dataTransferKey];
    typeof dataTransferValue == "object" && (typeof window2.DataTransfer == "function" ? Object.defineProperty(event, dataTransferKey, { value: Object.getOwnPropertyNames(dataTransferValue).reduce((acc, propName) => (Object.defineProperty(acc, propName, { value: dataTransferValue[propName] }), acc), new window2.DataTransfer()) }) : Object.defineProperty(event, dataTransferKey, { value: dataTransferValue }));
  }), event;
}
Object.keys(eventMap$1).forEach((key) => {
  let { EventType, defaultInit } = eventMap$1[key], eventName = key.toLowerCase();
  createEvent[key] = (node, init) => createEvent(eventName, node, init, { EventType, defaultInit }), fireEvent[key] = (node, init) => fireEvent(node, createEvent[key](node, init));
});
function setNativeValue(element, value) {
  let { set: valueSetter } = Object.getOwnPropertyDescriptor(element, "value") || {}, prototype = Object.getPrototypeOf(element), { set: prototypeValueSetter } = Object.getOwnPropertyDescriptor(prototype, "value") || {};
  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) prototypeValueSetter.call(element, value);
  else if (valueSetter) valueSetter.call(element, value);
  else throw new Error("The given element does not have a value setter");
}
Object.keys(eventAliasMap$1).forEach((aliasKey) => {
  let key = eventAliasMap$1[aliasKey];
  fireEvent[aliasKey] = function() {
    return fireEvent[key](...arguments);
  };
});
function unindent$1(string2) {
  return string2.replace(/[ \t]*[\n][ \t]*/g, `
`);
}
function encode$1(value) {
  return import_lz_string.default.compressToEncodedURIComponent(unindent$1(value));
}
function getPlaygroundUrl$1(markup2) {
  return "https://testing-playground.com/#markup=" + encode$1(markup2);
}
var debug$1 = (element, maxLength, options) => Array.isArray(element) ? element.forEach((el) => logDOM$1(el, maxLength, options)) : logDOM$1(element, maxLength, options), logTestingPlaygroundURL$1 = function(element) {
  if (element === void 0 && (element = getDocument$1().body), !element || !("innerHTML" in element)) {
    console.log("The element you're providing isn't a valid DOM element.");
    return;
  }
  if (!element.innerHTML) {
    console.log("The provided element doesn't have any children.");
    return;
  }
  let playgroundUrl = getPlaygroundUrl$1(element.innerHTML);
  return console.log(`Open this URL in your browser

` + playgroundUrl), playgroundUrl;
}, initialValue$1 = { debug: debug$1, logTestingPlaygroundURL: logTestingPlaygroundURL$1 }, screen$1 = typeof document < "u" && document.body ? getQueriesForElement$1(document.body, queries$1, initialValue$1) : Object.keys(queries$1).reduce((helpers, key) => (helpers[key] = () => {
  throw new TypeError("For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error");
}, helpers), initialValue$1);
function isElementType(element, tag, props) {
  return element.namespaceURI && element.namespaceURI !== "http://www.w3.org/1999/xhtml" || (tag = Array.isArray(tag) ? tag : [tag], !tag.includes(element.tagName.toLowerCase())) ? false : props ? Object.entries(props).every(([k2, v2]) => element[k2] === v2) : true;
}
var clickableInputTypes;
(function(clickableInputTypes2) {
  clickableInputTypes2.button = "button", clickableInputTypes2.color = "color", clickableInputTypes2.file = "file", clickableInputTypes2.image = "image", clickableInputTypes2.reset = "reset", clickableInputTypes2.submit = "submit", clickableInputTypes2.checkbox = "checkbox", clickableInputTypes2.radio = "radio";
})(clickableInputTypes || (clickableInputTypes = {}));
function isClickableInput(element) {
  return isElementType(element, "button") || isElementType(element, "input") && element.type in clickableInputTypes;
}
function getWindow(node) {
  var _node_ownerDocument;
  if (isDocument(node) && node.defaultView) return node.defaultView;
  if (!((_node_ownerDocument = node.ownerDocument) === null || _node_ownerDocument === void 0) && _node_ownerDocument.defaultView) return node.ownerDocument.defaultView;
  throw new Error(`Could not determine window of node. Node was ${describe(node)}`);
}
function isDocument(node) {
  return node.nodeType === 9;
}
function describe(val) {
  return typeof val == "function" ? `function ${val.name}` : val === null ? "null" : String(val);
}
function readBlobText(blob, FileReader) {
  return new Promise((res, rej) => {
    let fr = new FileReader();
    fr.onerror = rej, fr.onabort = rej, fr.onload = () => {
      res(String(fr.result));
    }, fr.readAsText(blob);
  });
}
function createFileList(window2, files) {
  let list = { ...files, length: files.length, item: (index) => list[index], [Symbol.iterator]: function* () {
    for (let i2 = 0; i2 < list.length; i2++) yield list[i2];
  } };
  return list.constructor = window2.FileList, window2.FileList && Object.setPrototypeOf(list, window2.FileList.prototype), Object.freeze(list), list;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var DataTransferItemStub = class {
  getAsFile() {
    return this.file;
  }
  getAsString(callback) {
    typeof this.data == "string" && callback(this.data);
  }
  webkitGetAsEntry() {
    throw new Error("not implemented");
  }
  constructor(dataOrFile, type3) {
    _define_property(this, "kind", void 0), _define_property(this, "type", void 0), _define_property(this, "file", null), _define_property(this, "data", void 0), typeof dataOrFile == "string" ? (this.kind = "string", this.type = String(type3), this.data = dataOrFile) : (this.kind = "file", this.type = dataOrFile.type, this.file = dataOrFile);
  }
}, DataTransferItemListStub = class extends Array {
  add(...args) {
    let item = new DataTransferItemStub(args[0], args[1]);
    return this.push(item), item;
  }
  clear() {
    this.splice(0, this.length);
  }
  remove(index) {
    this.splice(index, 1);
  }
};
function getTypeMatcher(type3, exact) {
  let [group, sub] = type3.split("/"), isGroup = !sub || sub === "*";
  return (item) => exact ? item.type === (isGroup ? group : type3) : isGroup ? item.type.startsWith(`${group}/`) : item.type === group;
}
function createDataTransferStub(window2) {
  return new class {
    getData(format4) {
      var _this_items_find;
      let match = (_this_items_find = this.items.find(getTypeMatcher(format4, true))) !== null && _this_items_find !== void 0 ? _this_items_find : this.items.find(getTypeMatcher(format4, false)), text = "";
      return match == null ? void 0 : match.getAsString((t) => {
        text = t;
      }), text;
    }
    setData(format4, data) {
      let matchIndex = this.items.findIndex(getTypeMatcher(format4, true)), item = new DataTransferItemStub(data, format4);
      matchIndex >= 0 ? this.items.splice(matchIndex, 1, item) : this.items.push(item);
    }
    clearData(format4) {
      if (format4) {
        let matchIndex = this.items.findIndex(getTypeMatcher(format4, true));
        matchIndex >= 0 && this.items.remove(matchIndex);
      } else this.items.clear();
    }
    get types() {
      let t = [];
      return this.files.length && t.push("Files"), this.items.forEach((i2) => t.push(i2.type)), Object.freeze(t), t;
    }
    setDragImage() {
    }
    constructor() {
      _define_property(this, "dropEffect", "none"), _define_property(this, "effectAllowed", "uninitialized"), _define_property(this, "items", new DataTransferItemListStub()), _define_property(this, "files", createFileList(window2, []));
    }
  }();
}
function createDataTransfer(window2, files = []) {
  let dt2 = typeof window2.DataTransfer > "u" ? createDataTransferStub(window2) : new window2.DataTransfer();
  return Object.defineProperty(dt2, "files", { get: () => createFileList(window2, files) }), dt2;
}
function getBlobFromDataTransferItem(window2, item) {
  if (item.kind === "file") return item.getAsFile();
  let data = "";
  return item.getAsString((s2) => {
    data = s2;
  }), new window2.Blob([data], { type: item.type });
}
function _define_property2(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
function createClipboardItem(window2, ...blobs) {
  let dataMap = Object.fromEntries(blobs.map((b2) => [typeof b2 == "string" ? "text/plain" : b2.type, Promise.resolve(b2)]));
  return typeof window2.ClipboardItem < "u" ? new window2.ClipboardItem(dataMap) : new class {
    get types() {
      return Array.from(Object.keys(this.data));
    }
    async getType(type3) {
      let value = await this.data[type3];
      if (!value) throw new Error(`${type3} is not one of the available MIME types on this item.`);
      return value instanceof window2.Blob ? value : new window2.Blob([value], { type: type3 });
    }
    constructor(d2) {
      _define_property2(this, "data", void 0), this.data = d2;
    }
  }(dataMap);
}
var ClipboardStubControl = Symbol("Manage ClipboardSub");
function createClipboardStub(window2, control) {
  return Object.assign(new class extends window2.EventTarget {
    async read() {
      return Array.from(this.items);
    }
    async readText() {
      let text = "";
      for (let item of this.items) {
        let type3 = item.types.includes("text/plain") ? "text/plain" : item.types.find((t) => t.startsWith("text/"));
        type3 && (text += await item.getType(type3).then((b2) => readBlobText(b2, window2.FileReader)));
      }
      return text;
    }
    async write(data) {
      this.items = data;
    }
    async writeText(text) {
      this.items = [createClipboardItem(window2, text)];
    }
    constructor(...args) {
      super(...args), _define_property2(this, "items", []);
    }
  }(), { [ClipboardStubControl]: control });
}
function isClipboardStub(clipboard) {
  return !!(clipboard == null ? void 0 : clipboard[ClipboardStubControl]);
}
function attachClipboardStubToView(window2) {
  if (isClipboardStub(window2.navigator.clipboard)) return window2.navigator.clipboard[ClipboardStubControl];
  let realClipboard = Object.getOwnPropertyDescriptor(window2.navigator, "clipboard"), stub, control = { resetClipboardStub: () => {
    stub = createClipboardStub(window2, control);
  }, detachClipboardStub: () => {
    realClipboard ? Object.defineProperty(window2.navigator, "clipboard", realClipboard) : Object.defineProperty(window2.navigator, "clipboard", { value: void 0, configurable: true });
  } };
  return stub = createClipboardStub(window2, control), Object.defineProperty(window2.navigator, "clipboard", { get: () => stub, configurable: true }), stub[ClipboardStubControl];
}
function resetClipboardStubOnView(window2) {
  isClipboardStub(window2.navigator.clipboard) && window2.navigator.clipboard[ClipboardStubControl].resetClipboardStub();
}
function detachClipboardStubFromView(window2) {
  isClipboardStub(window2.navigator.clipboard) && window2.navigator.clipboard[ClipboardStubControl].detachClipboardStub();
}
async function readDataTransferFromClipboard(document2) {
  let window2 = document2.defaultView, clipboard = window2 == null ? void 0 : window2.navigator.clipboard, items = clipboard && await clipboard.read();
  if (!items) throw new Error("The Clipboard API is unavailable.");
  let dt2 = createDataTransfer(window2);
  for (let item of items) for (let type3 of item.types) dt2.setData(type3, await item.getType(type3).then((b2) => readBlobText(b2, window2.FileReader)));
  return dt2;
}
async function writeDataTransferToClipboard(document2, clipboardData) {
  let window2 = getWindow(document2), clipboard = window2.navigator.clipboard, items = [];
  for (let i2 = 0; i2 < clipboardData.items.length; i2++) {
    let dtItem = clipboardData.items[i2], blob = getBlobFromDataTransferItem(window2, dtItem);
    items.push(createClipboardItem(window2, blob));
  }
  if (!(clipboard && await clipboard.write(items).then(() => true, () => false))) throw new Error("The Clipboard API is unavailable.");
}
var g$2 = globalThis;
typeof g$2.afterEach == "function" && g$2.afterEach(() => resetClipboardStubOnView(globalThis.window));
typeof g$2.afterAll == "function" && g$2.afterAll(() => detachClipboardStubFromView(globalThis.window));
function isContentEditable(element) {
  return element.hasAttribute("contenteditable") && (element.getAttribute("contenteditable") == "true" || element.getAttribute("contenteditable") == "");
}
function getContentEditable(node) {
  let element = getElement(node);
  return element && (element.closest('[contenteditable=""]') || element.closest('[contenteditable="true"]'));
}
function getElement(node) {
  return node.nodeType === 1 ? node : node.parentElement;
}
function isEditable(element) {
  return isEditableInputOrTextArea(element) && !element.readOnly || isContentEditable(element);
}
var editableInputTypes;
(function(editableInputTypes2) {
  editableInputTypes2.text = "text", editableInputTypes2.date = "date", editableInputTypes2["datetime-local"] = "datetime-local", editableInputTypes2.email = "email", editableInputTypes2.month = "month", editableInputTypes2.number = "number", editableInputTypes2.password = "password", editableInputTypes2.search = "search", editableInputTypes2.tel = "tel", editableInputTypes2.time = "time", editableInputTypes2.url = "url", editableInputTypes2.week = "week";
})(editableInputTypes || (editableInputTypes = {}));
function isEditableInputOrTextArea(element) {
  return isElementType(element, "textarea") || isElementType(element, "input") && element.type in editableInputTypes;
}
var maxLengthSupportedTypes;
(function(maxLengthSupportedTypes2) {
  maxLengthSupportedTypes2.email = "email", maxLengthSupportedTypes2.password = "password", maxLengthSupportedTypes2.search = "search", maxLengthSupportedTypes2.telephone = "telephone", maxLengthSupportedTypes2.text = "text", maxLengthSupportedTypes2.url = "url";
})(maxLengthSupportedTypes || (maxLengthSupportedTypes = {}));
function getMaxLength(element) {
  var _element_getAttribute;
  let attr = (_element_getAttribute = element.getAttribute("maxlength")) !== null && _element_getAttribute !== void 0 ? _element_getAttribute : "";
  return /^\d+$/.test(attr) && Number(attr) >= 0 ? Number(attr) : void 0;
}
function supportsMaxLength(element) {
  return isElementType(element, "textarea") || isElementType(element, "input") && element.type in maxLengthSupportedTypes;
}
var FOCUSABLE_SELECTOR = ["input:not([type=hidden]):not([disabled])", "button:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", '[contenteditable=""]', '[contenteditable="true"]', "a[href]", "[tabindex]:not([disabled])"].join(", ");
function isFocusable(element) {
  return element.matches(FOCUSABLE_SELECTOR);
}
var bracketDict;
(function(bracketDict2) {
  bracketDict2["{"] = "}", bracketDict2["["] = "]";
})(bracketDict || (bracketDict = {}));
function readNextDescriptor(text, context) {
  let pos = 0, startBracket = text[pos] in bracketDict ? text[pos] : "";
  pos += startBracket.length;
  let type3 = new RegExp(`^\\${startBracket}{2}`).test(text) ? "" : startBracket;
  return { type: type3, ...type3 === "" ? readPrintableChar(text, pos, context) : readTag(text, pos, type3, context) };
}
function readPrintableChar(text, pos, context) {
  let descriptor = text[pos];
  return assertDescriptor(descriptor, text, pos, context), pos += descriptor.length, { consumedLength: pos, descriptor, releasePrevious: false, releaseSelf: true, repeat: 1 };
}
function readTag(text, pos, startBracket, context) {
  var _text_slice_match, _text_slice_match1;
  let releasePreviousModifier = text[pos] === "/" ? "/" : "";
  pos += releasePreviousModifier.length;
  let escapedDescriptor = startBracket === "{" && text[pos] === "\\";
  pos += Number(escapedDescriptor);
  let descriptor = escapedDescriptor ? text[pos] : (_text_slice_match = text.slice(pos).match(startBracket === "{" ? /^\w+|^[^}>/]/ : /^\w+/)) === null || _text_slice_match === void 0 ? void 0 : _text_slice_match[0];
  assertDescriptor(descriptor, text, pos, context), pos += descriptor.length;
  var _text_slice_match_;
  let repeatModifier = (_text_slice_match_ = (_text_slice_match1 = text.slice(pos).match(/^>\d+/)) === null || _text_slice_match1 === void 0 ? void 0 : _text_slice_match1[0]) !== null && _text_slice_match_ !== void 0 ? _text_slice_match_ : "";
  pos += repeatModifier.length;
  let releaseSelfModifier = text[pos] === "/" || !repeatModifier && text[pos] === ">" ? text[pos] : "";
  pos += releaseSelfModifier.length;
  let expectedEndBracket = bracketDict[startBracket], endBracket = text[pos] === expectedEndBracket ? expectedEndBracket : "";
  if (!endBracket) throw new Error(getErrorMessage([!repeatModifier && "repeat modifier", !releaseSelfModifier && "release modifier", `"${expectedEndBracket}"`].filter(Boolean).join(" or "), text[pos], text, context));
  return pos += endBracket.length, { consumedLength: pos, descriptor, releasePrevious: !!releasePreviousModifier, repeat: repeatModifier ? Math.max(Number(repeatModifier.substr(1)), 1) : 1, releaseSelf: hasReleaseSelf(releaseSelfModifier, repeatModifier) };
}
function assertDescriptor(descriptor, text, pos, context) {
  if (!descriptor) throw new Error(getErrorMessage("key descriptor", text[pos], text, context));
}
function hasReleaseSelf(releaseSelfModifier, repeatModifier) {
  if (releaseSelfModifier) return releaseSelfModifier === "/";
  if (repeatModifier) return false;
}
function getErrorMessage(expected, found, text, context) {
  return `Expected ${expected} but found "${found ?? ""}" in "${text}"
    See ${context === "pointer" ? "https://testing-library.com/docs/user-event/pointer#pressing-a-button-or-touching-the-screen" : "https://testing-library.com/docs/user-event/keyboard"}
    for more information about how userEvent parses your input.`;
}
function cloneEvent(event) {
  return new event.constructor(event.type, event);
}
var ApiLevel;
(function(ApiLevel2) {
  ApiLevel2[ApiLevel2.Trigger = 2] = "Trigger", ApiLevel2[ApiLevel2.Call = 1] = "Call";
})(ApiLevel || (ApiLevel = {}));
function setLevelRef(instance, level) {
  instance.levelRefs[level] = {};
}
function getLevelRef(instance, level) {
  return instance.levelRefs[level];
}
var PointerEventsCheckLevel;
(function(PointerEventsCheckLevel2) {
  PointerEventsCheckLevel2[PointerEventsCheckLevel2.EachTrigger = 4] = "EachTrigger", PointerEventsCheckLevel2[PointerEventsCheckLevel2.EachApiCall = 2] = "EachApiCall", PointerEventsCheckLevel2[PointerEventsCheckLevel2.EachTarget = 1] = "EachTarget", PointerEventsCheckLevel2[PointerEventsCheckLevel2.Never = 0] = "Never";
})(PointerEventsCheckLevel || (PointerEventsCheckLevel = {}));
function isDisabled2(element) {
  for (let el = element; el; el = el.parentElement) if (isElementType(el, ["button", "input", "select", "textarea", "optgroup", "option"])) {
    if (el.hasAttribute("disabled")) return true;
  } else if (isElementType(el, "fieldset")) {
    var _el_querySelector;
    if (el.hasAttribute("disabled") && !(!((_el_querySelector = el.querySelector(":scope > legend")) === null || _el_querySelector === void 0) && _el_querySelector.contains(element))) return true;
  } else if (el.tagName.includes("-") && el.constructor.formAssociated && el.hasAttribute("disabled")) return true;
  return false;
}
function getActiveElement(document2) {
  let activeElement = document2.activeElement;
  return (activeElement == null ? void 0 : activeElement.shadowRoot) ? getActiveElement(activeElement.shadowRoot) : isDisabled2(activeElement) ? document2.ownerDocument ? document2.ownerDocument.body : document2.body : activeElement;
}
function getActiveElementOrBody(document2) {
  var _getActiveElement;
  return (_getActiveElement = getActiveElement(document2)) !== null && _getActiveElement !== void 0 ? _getActiveElement : document2.body;
}
function findClosest(element, callback) {
  let el = element;
  do {
    if (callback(el)) return el;
    el = el.parentElement;
  } while (el && el !== element.ownerDocument.body);
}
function hasOwnSelection(node) {
  return isElement3(node) && isEditableInputOrTextArea(node);
}
function hasNoSelection(node) {
  return isElement3(node) && isClickableInput(node);
}
function isElement3(node) {
  return node.nodeType === 1;
}
function updateSelectionOnFocus(element) {
  let selection = element.ownerDocument.getSelection();
  if ((selection == null ? void 0 : selection.focusNode) && hasOwnSelection(element)) {
    let contenteditable = getContentEditable(selection.focusNode);
    if (contenteditable) {
      if (!selection.isCollapsed) {
        var _contenteditable_firstChild;
        let focusNode = ((_contenteditable_firstChild = contenteditable.firstChild) === null || _contenteditable_firstChild === void 0 ? void 0 : _contenteditable_firstChild.nodeType) === 3 ? contenteditable.firstChild : contenteditable;
        selection.setBaseAndExtent(focusNode, 0, focusNode, 0);
      }
    } else selection.setBaseAndExtent(element, 0, element, 0);
  }
}
function wrapEvent(cb, _element) {
  return getConfig$2().eventWrapper(cb);
}
function focusElement(element) {
  let target = findClosest(element, isFocusable), activeElement = getActiveElement(element.ownerDocument);
  (target ?? element.ownerDocument.body) !== activeElement && (target ? wrapEvent(() => target.focus()) : wrapEvent(() => activeElement == null ? void 0 : activeElement.blur()), updateSelectionOnFocus(target ?? element.ownerDocument.body));
}
function blurElement(element) {
  !isFocusable(element) || !(getActiveElement(element.ownerDocument) === element) || wrapEvent(() => element.blur());
}
var behavior = {};
behavior.click = (event, target, instance) => {
  let context = target.closest("button,input,label,select,textarea"), control = context && isElementType(context, "label") && context.control;
  if (control) return () => {
    isFocusable(control) && focusElement(control), instance.dispatchEvent(control, cloneEvent(event));
  };
  if (isElementType(target, "input", { type: "file" })) return () => {
    blurElement(target), target.dispatchEvent(new (getWindow(target)).Event("fileDialog")), focusElement(target);
  };
};
var UIValue = Symbol("Displayed value in UI"), UISelection = Symbol("Displayed selection in UI"), InitialValue = Symbol("Initial value to compare on blur");
function isUIValue(value) {
  return typeof value == "object" && UIValue in value;
}
function isUISelectionStart(start) {
  return !!start && typeof start == "object" && UISelection in start;
}
function setUIValue(element, value) {
  element[InitialValue] === void 0 && (element[InitialValue] = element.value), element[UIValue] = value, element.value = Object.assign(new String(value), { [UIValue]: true });
}
function getUIValue(element) {
  return element[UIValue] === void 0 ? element.value : String(element[UIValue]);
}
function setUIValueClean(element) {
  element[UIValue] = void 0;
}
function clearInitialValue(element) {
  element[InitialValue] = void 0;
}
function getInitialValue(element) {
  return element[InitialValue];
}
function setUISelectionRaw(element, selection) {
  element[UISelection] = selection;
}
function setUISelection(element, { focusOffset: focusOffsetParam, anchorOffset: anchorOffsetParam = focusOffsetParam }, mode = "replace") {
  let valueLength = getUIValue(element).length, sanitizeOffset = (o) => Math.max(0, Math.min(valueLength, o)), anchorOffset = mode === "replace" || element[UISelection] === void 0 ? sanitizeOffset(anchorOffsetParam) : element[UISelection].anchorOffset, focusOffset = sanitizeOffset(focusOffsetParam), startOffset = Math.min(anchorOffset, focusOffset), endOffset = Math.max(anchorOffset, focusOffset);
  if (element[UISelection] = { anchorOffset, focusOffset }, element.selectionStart === startOffset && element.selectionEnd === endOffset) return;
  let startObj = Object.assign(new Number(startOffset), { [UISelection]: true });
  try {
    element.setSelectionRange(startObj, endOffset);
  } catch {
  }
}
function getUISelection(element) {
  var _element_selectionStart, _element_selectionEnd, _element_UISelection;
  let sel = (_element_UISelection = element[UISelection]) !== null && _element_UISelection !== void 0 ? _element_UISelection : { anchorOffset: (_element_selectionStart = element.selectionStart) !== null && _element_selectionStart !== void 0 ? _element_selectionStart : 0, focusOffset: (_element_selectionEnd = element.selectionEnd) !== null && _element_selectionEnd !== void 0 ? _element_selectionEnd : 0 };
  return { ...sel, startOffset: Math.min(sel.anchorOffset, sel.focusOffset), endOffset: Math.max(sel.anchorOffset, sel.focusOffset) };
}
function hasUISelection(element) {
  return !!element[UISelection];
}
function setUISelectionClean(element) {
  element[UISelection] = void 0;
}
var parseInt2 = globalThis.parseInt;
function buildTimeValue(value) {
  let onlyDigitsValue = value.replace(/\D/g, "");
  if (onlyDigitsValue.length < 2) return value;
  let firstDigit = parseInt2(onlyDigitsValue[0], 10), secondDigit = parseInt2(onlyDigitsValue[1], 10);
  if (firstDigit >= 3 || firstDigit === 2 && secondDigit >= 4) {
    let index;
    return firstDigit >= 3 ? index = 1 : index = 2, build$1(onlyDigitsValue, index);
  }
  return value.length === 2 ? value : build$1(onlyDigitsValue, 2);
}
function build$1(onlyDigitsValue, index) {
  let hours = onlyDigitsValue.slice(0, index), validHours = Math.min(parseInt2(hours, 10), 23), minuteCharacters = onlyDigitsValue.slice(index), parsedMinutes = parseInt2(minuteCharacters, 10), validMinutes = Math.min(parsedMinutes, 59);
  return `${validHours.toString().padStart(2, "0")}:${validMinutes.toString().padStart(2, "0")}`;
}
function isValidDateOrTimeValue(element, value) {
  let clone2 = element.cloneNode();
  return clone2.value = value, clone2.value === value;
}
function getNextCursorPosition(node, offset, direction, inputType) {
  if (isTextNode(node) && offset + direction >= 0 && offset + direction <= node.nodeValue.length) return { node, offset: offset + direction };
  let nextNode = getNextCharacterContentNode(node, offset, direction);
  if (nextNode) {
    if (isTextNode(nextNode)) return { node: nextNode, offset: direction > 0 ? Math.min(1, nextNode.nodeValue.length) : Math.max(nextNode.nodeValue.length - 1, 0) };
    if (isElementType(nextNode, "br")) {
      let nextPlusOne = getNextCharacterContentNode(nextNode, void 0, direction);
      return nextPlusOne ? isTextNode(nextPlusOne) ? { node: nextPlusOne, offset: direction > 0 ? 0 : nextPlusOne.nodeValue.length } : direction < 0 && isElementType(nextPlusOne, "br") ? { node: nextNode.parentNode, offset: getOffset(nextNode) } : { node: nextPlusOne.parentNode, offset: getOffset(nextPlusOne) + (direction > 0 ? 0 : 1) } : direction < 0 && inputType === "deleteContentBackward" ? { node: nextNode.parentNode, offset: getOffset(nextNode) } : void 0;
    } else return { node: nextNode.parentNode, offset: getOffset(nextNode) + (direction > 0 ? 1 : 0) };
  }
}
function getNextCharacterContentNode(node, offset, direction) {
  let nextOffset = Number(offset) + (direction < 0 ? -1 : 0);
  return offset !== void 0 && isElement4(node) && nextOffset >= 0 && nextOffset < node.children.length && (node = node.children[nextOffset]), walkNodes(node, direction === 1 ? "next" : "previous", isTreatedAsCharacterContent);
}
function isTreatedAsCharacterContent(node) {
  if (isTextNode(node)) return true;
  if (isElement4(node)) {
    if (isElementType(node, ["input", "textarea"])) return node.type !== "hidden";
    if (isElementType(node, "br")) return true;
  }
  return false;
}
function getOffset(node) {
  let i2 = 0;
  for (; node.previousSibling; ) i2++, node = node.previousSibling;
  return i2;
}
function isElement4(node) {
  return node.nodeType === 1;
}
function isTextNode(node) {
  return node.nodeType === 3;
}
function walkNodes(node, direction, callback) {
  for (; ; ) {
    var _node_ownerDocument;
    let sibling = node[`${direction}Sibling`];
    if (sibling) {
      if (node = getDescendant(sibling, direction === "next" ? "first" : "last"), callback(node)) return node;
    } else if (node.parentNode && (!isElement4(node.parentNode) || !isContentEditable(node.parentNode) && node.parentNode !== ((_node_ownerDocument = node.ownerDocument) === null || _node_ownerDocument === void 0 ? void 0 : _node_ownerDocument.body))) node = node.parentNode;
    else break;
  }
}
function getDescendant(node, direction) {
  for (; node.hasChildNodes(); ) node = node[`${direction}Child`];
  return node;
}
var TrackChanges = Symbol("Track programmatic changes for React workaround");
function isReact17Element(element) {
  return Object.getOwnPropertyNames(element).some((k2) => k2.startsWith("__react")) && getWindow(element).REACT_VERSION === 17;
}
function startTrackValue(element) {
  isReact17Element(element) && (element[TrackChanges] = { previousValue: String(element.value), tracked: [] });
}
function trackOrSetValue(element, v2) {
  var _element_TrackChanges_tracked, _element_TrackChanges;
  (_element_TrackChanges = element[TrackChanges]) === null || _element_TrackChanges === void 0 || (_element_TrackChanges_tracked = _element_TrackChanges.tracked) === null || _element_TrackChanges_tracked === void 0 || _element_TrackChanges_tracked.push(v2), element[TrackChanges] || (setUIValueClean(element), setUISelection(element, { focusOffset: v2.length }));
}
function commitValueAfterInput(element, cursorOffset) {
  var _changes_tracked;
  let changes = element[TrackChanges];
  if (element[TrackChanges] = void 0, !(!(changes == null || (_changes_tracked = changes.tracked) === null || _changes_tracked === void 0) && _changes_tracked.length)) return;
  let isJustReactStateUpdate = changes.tracked.length === 2 && changes.tracked[0] === changes.previousValue && changes.tracked[1] === element.value;
  isJustReactStateUpdate || setUIValueClean(element), hasUISelection(element) && setUISelection(element, { focusOffset: isJustReactStateUpdate ? cursorOffset : element.value.length });
}
function getTargetTypeAndSelection(node) {
  let element = getElement2(node);
  if (element && hasOwnSelection(element)) return { type: "input", selection: getUISelection(element) };
  let selection = element == null ? void 0 : element.ownerDocument.getSelection();
  return { type: getContentEditable(node) && (selection == null ? void 0 : selection.anchorNode) && getContentEditable(selection.anchorNode) ? "contenteditable" : "default", selection };
}
function getElement2(node) {
  return node.nodeType === 1 ? node : node.parentElement;
}
function getInputRange(focusNode) {
  let typeAndSelection = getTargetTypeAndSelection(focusNode);
  if (typeAndSelection.type === "input") return typeAndSelection.selection;
  if (typeAndSelection.type === "contenteditable") {
    var _typeAndSelection_selection;
    return (_typeAndSelection_selection = typeAndSelection.selection) === null || _typeAndSelection_selection === void 0 ? void 0 : _typeAndSelection_selection.getRangeAt(0);
  }
}
function setSelection({ focusNode, focusOffset, anchorNode = focusNode, anchorOffset = focusOffset }) {
  var _anchorNode_ownerDocument_getSelection, _anchorNode_ownerDocument;
  if (getTargetTypeAndSelection(focusNode).type === "input") return setUISelection(focusNode, { anchorOffset, focusOffset });
  (_anchorNode_ownerDocument = anchorNode.ownerDocument) === null || _anchorNode_ownerDocument === void 0 || (_anchorNode_ownerDocument_getSelection = _anchorNode_ownerDocument.getSelection()) === null || _anchorNode_ownerDocument_getSelection === void 0 || _anchorNode_ownerDocument_getSelection.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);
}
function isDateOrTime(element) {
  return isElementType(element, "input") && ["date", "time"].includes(element.type);
}
function input(instance, element, data, inputType = "insertText") {
  let inputRange = getInputRange(element);
  inputRange && (!isDateOrTime(element) && !instance.dispatchUIEvent(element, "beforeinput", { inputType, data }) || ("startContainer" in inputRange ? editContenteditable(instance, element, inputRange, data, inputType) : editInputElement(instance, element, inputRange, data, inputType)));
}
function editContenteditable(instance, element, inputRange, data, inputType) {
  let del = false;
  if (!inputRange.collapsed) del = true, inputRange.deleteContents();
  else if (["deleteContentBackward", "deleteContentForward"].includes(inputType)) {
    let nextPosition = getNextCursorPosition(inputRange.startContainer, inputRange.startOffset, inputType === "deleteContentBackward" ? -1 : 1, inputType);
    if (nextPosition) {
      del = true;
      let delRange = inputRange.cloneRange();
      delRange.comparePoint(nextPosition.node, nextPosition.offset) < 0 ? delRange.setStart(nextPosition.node, nextPosition.offset) : delRange.setEnd(nextPosition.node, nextPosition.offset), delRange.deleteContents();
    }
  }
  if (data) if (inputRange.endContainer.nodeType === 3) {
    let offset = inputRange.endOffset;
    inputRange.endContainer.insertData(offset, data), inputRange.setStart(inputRange.endContainer, offset + data.length), inputRange.setEnd(inputRange.endContainer, offset + data.length);
  } else {
    let text = element.ownerDocument.createTextNode(data);
    inputRange.insertNode(text), inputRange.setStart(text, data.length), inputRange.setEnd(text, data.length);
  }
  (del || data) && instance.dispatchUIEvent(element, "input", { inputType });
}
function editInputElement(instance, element, inputRange, data, inputType) {
  let dataToInsert = data;
  if (supportsMaxLength(element)) {
    let maxLength = getMaxLength(element);
    if (maxLength !== void 0 && data.length > 0) {
      let spaceUntilMaxLength = maxLength - element.value.length;
      if (spaceUntilMaxLength > 0) dataToInsert = data.substring(0, spaceUntilMaxLength);
      else return;
    }
  }
  let { newValue, newOffset, oldValue } = calculateNewValue(dataToInsert, element, inputRange, inputType);
  newValue === oldValue && newOffset === inputRange.startOffset && newOffset === inputRange.endOffset || isElementType(element, "input", { type: "number" }) && !isValidNumberInput(newValue) || (setUIValue(element, newValue), setSelection({ focusNode: element, anchorOffset: newOffset, focusOffset: newOffset }), isDateOrTime(element) ? isValidDateOrTimeValue(element, newValue) && (commitInput(instance, element, newOffset, {}), instance.dispatchUIEvent(element, "change"), clearInitialValue(element)) : commitInput(instance, element, newOffset, { data, inputType }));
}
function calculateNewValue(inputData, node, { startOffset, endOffset }, inputType) {
  let value = getUIValue(node), prologEnd = Math.max(0, startOffset === endOffset && inputType === "deleteContentBackward" ? startOffset - 1 : startOffset), prolog = value.substring(0, prologEnd), epilogStart = Math.min(value.length, startOffset === endOffset && inputType === "deleteContentForward" ? startOffset + 1 : endOffset), epilog = value.substring(epilogStart, value.length), newValue = `${prolog}${inputData}${epilog}`, newOffset = prologEnd + inputData.length;
  if (isElementType(node, "input", { type: "time" })) {
    let builtValue = buildTimeValue(newValue);
    builtValue !== "" && isValidDateOrTimeValue(node, builtValue) && (newValue = builtValue, newOffset = builtValue.length);
  }
  return { oldValue: value, newValue, newOffset };
}
function commitInput(instance, element, newOffset, inputInit) {
  instance.dispatchUIEvent(element, "input", inputInit), commitValueAfterInput(element, newOffset);
}
function isValidNumberInput(value) {
  var _value_match, _value_match1;
  let valueParts = value.split("e", 2);
  return !(/[^\d.\-e]/.test(value) || Number((_value_match = value.match(/-/g)) === null || _value_match === void 0 ? void 0 : _value_match.length) > 2 || Number((_value_match1 = value.match(/\./g)) === null || _value_match1 === void 0 ? void 0 : _value_match1.length) > 1 || valueParts[1] && !/^-?\d*$/.test(valueParts[1]));
}
behavior.cut = (event, target, instance) => () => {
  isEditable(target) && input(instance, target, "", "deleteByCut");
};
function getValueOrTextContent(element) {
  return element ? isContentEditable(element) ? element.textContent : getUIValue(element) : null;
}
function isVisible(element) {
  let window2 = getWindow(element);
  for (let el = element; el == null ? void 0 : el.ownerDocument; el = el.parentElement) {
    let { display: display2, visibility } = window2.getComputedStyle(el);
    if (display2 === "none" || visibility === "hidden") return false;
  }
  return true;
}
function getTabDestination(activeElement, shift) {
  let document2 = activeElement.ownerDocument, focusableElements = document2.querySelectorAll(FOCUSABLE_SELECTOR), enabledElements = Array.from(focusableElements).filter((el) => el === activeElement || !(Number(el.getAttribute("tabindex")) < 0 || isDisabled2(el)));
  Number(activeElement.getAttribute("tabindex")) >= 0 && enabledElements.sort((a, b2) => {
    let i2 = Number(a.getAttribute("tabindex")), j2 = Number(b2.getAttribute("tabindex"));
    return i2 === j2 ? 0 : i2 === 0 ? 1 : j2 === 0 ? -1 : i2 - j2;
  });
  let checkedRadio = {}, prunedElements = [document2.body], activeRadioGroup = isElementType(activeElement, "input", { type: "radio" }) ? activeElement.name : void 0;
  enabledElements.forEach((currentElement) => {
    let el = currentElement;
    if (isElementType(el, "input", { type: "radio" }) && el.name) {
      if (el === activeElement) {
        prunedElements.push(el);
        return;
      } else if (el.name === activeRadioGroup) return;
      if (el.checked) {
        prunedElements = prunedElements.filter((e2) => !isElementType(e2, "input", { type: "radio", name: el.name })), prunedElements.push(el), checkedRadio[el.name] = el;
        return;
      }
      if (typeof checkedRadio[el.name] < "u") return;
    }
    prunedElements.push(el);
  });
  for (let index = prunedElements.findIndex((el) => el === activeElement); ; ) if (index += shift ? -1 : 1, index === prunedElements.length ? index = 0 : index === -1 && (index = prunedElements.length - 1), prunedElements[index] === activeElement || prunedElements[index] === document2.body || isVisible(prunedElements[index])) return prunedElements[index];
}
function moveSelection(node, direction) {
  if (hasOwnSelection(node)) {
    let selection = getUISelection(node);
    setSelection({ focusNode: node, focusOffset: selection.startOffset === selection.endOffset ? selection.focusOffset + direction : direction < 0 ? selection.startOffset : selection.endOffset });
  } else {
    let selection = node.ownerDocument.getSelection();
    if (!(selection == null ? void 0 : selection.focusNode)) return;
    if (selection.isCollapsed) {
      let nextPosition = getNextCursorPosition(selection.focusNode, selection.focusOffset, direction);
      nextPosition && setSelection({ focusNode: nextPosition.node, focusOffset: nextPosition.offset });
    } else selection[direction < 0 ? "collapseToStart" : "collapseToEnd"]();
  }
}
function selectAll(target) {
  if (hasOwnSelection(target)) return setSelection({ focusNode: target, anchorOffset: 0, focusOffset: getUIValue(target).length });
  var _getContentEditable;
  let focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body;
  setSelection({ focusNode, anchorOffset: 0, focusOffset: focusNode.childNodes.length });
}
function isAllSelected(target) {
  if (hasOwnSelection(target)) return getUISelection(target).startOffset === 0 && getUISelection(target).endOffset === getUIValue(target).length;
  var _getContentEditable;
  let focusNode = (_getContentEditable = getContentEditable(target)) !== null && _getContentEditable !== void 0 ? _getContentEditable : target.ownerDocument.body, selection = target.ownerDocument.getSelection();
  return (selection == null ? void 0 : selection.anchorNode) === focusNode && selection.focusNode === focusNode && selection.anchorOffset === 0 && selection.focusOffset === focusNode.childNodes.length;
}
function setSelectionRange(element, anchorOffset, focusOffset) {
  var _element_firstChild;
  if (hasOwnSelection(element)) return setSelection({ focusNode: element, anchorOffset, focusOffset });
  if (isContentEditable(element) && ((_element_firstChild = element.firstChild) === null || _element_firstChild === void 0 ? void 0 : _element_firstChild.nodeType) === 3) return setSelection({ focusNode: element.firstChild, anchorOffset, focusOffset });
  throw new Error("Not implemented. The result of this interaction is unreliable.");
}
function walkRadio(instance, el, direction) {
  let window2 = getWindow(el), group = Array.from(el.ownerDocument.querySelectorAll(el.name ? `input[type="radio"][name="${window2.CSS.escape(el.name)}"]` : 'input[type="radio"][name=""], input[type="radio"]:not([name])'));
  for (let i2 = group.findIndex((e2) => e2 === el) + direction; ; i2 += direction) {
    if (group[i2] || (i2 = direction > 0 ? 0 : group.length - 1), group[i2] === el) return;
    isDisabled2(group[i2]) || (focusElement(group[i2]), instance.dispatchUIEvent(group[i2], "click"));
  }
}
behavior.keydown = (event, target, instance) => {
  var _keydownBehavior_event_key, _keydownBehavior_event_key1;
  return (_keydownBehavior_event_key1 = (_keydownBehavior_event_key = keydownBehavior[event.key]) === null || _keydownBehavior_event_key === void 0 ? void 0 : _keydownBehavior_event_key.call(keydownBehavior, event, target, instance)) !== null && _keydownBehavior_event_key1 !== void 0 ? _keydownBehavior_event_key1 : combinationBehavior(event, target, instance);
};
var keydownBehavior = { ArrowDown: (event, target, instance) => {
  if (isElementType(target, "input", { type: "radio" })) return () => walkRadio(instance, target, -1);
}, ArrowLeft: (event, target, instance) => isElementType(target, "input", { type: "radio" }) ? () => walkRadio(instance, target, -1) : () => moveSelection(target, -1), ArrowRight: (event, target, instance) => isElementType(target, "input", { type: "radio" }) ? () => walkRadio(instance, target, 1) : () => moveSelection(target, 1), ArrowUp: (event, target, instance) => {
  if (isElementType(target, "input", { type: "radio" })) return () => walkRadio(instance, target, 1);
}, Backspace: (event, target, instance) => {
  if (isEditable(target)) return () => {
    input(instance, target, "", "deleteContentBackward");
  };
}, Delete: (event, target, instance) => {
  if (isEditable(target)) return () => {
    input(instance, target, "", "deleteContentForward");
  };
}, End: (event, target) => {
  if (isElementType(target, ["input", "textarea"]) || isContentEditable(target)) return () => {
    var _getValueOrTextContent, _getValueOrTextContent_length;
    let newPos = (_getValueOrTextContent_length = (_getValueOrTextContent = getValueOrTextContent(target)) === null || _getValueOrTextContent === void 0 ? void 0 : _getValueOrTextContent.length) !== null && _getValueOrTextContent_length !== void 0 ? _getValueOrTextContent_length : 0;
    setSelectionRange(target, newPos, newPos);
  };
}, Home: (event, target) => {
  if (isElementType(target, ["input", "textarea"]) || isContentEditable(target)) return () => {
    setSelectionRange(target, 0, 0);
  };
}, PageDown: (event, target) => {
  if (isElementType(target, ["input"])) return () => {
    let newPos = getUIValue(target).length;
    setSelectionRange(target, newPos, newPos);
  };
}, PageUp: (event, target) => {
  if (isElementType(target, ["input"])) return () => {
    setSelectionRange(target, 0, 0);
  };
}, Tab: (event, target, instance) => () => {
  let dest = getTabDestination(target, instance.system.keyboard.modifiers.Shift);
  focusElement(dest), hasOwnSelection(dest) && setUISelection(dest, { anchorOffset: 0, focusOffset: dest.value.length });
} }, combinationBehavior = (event, target, instance) => {
  if (event.code === "KeyA" && instance.system.keyboard.modifiers.Control) return () => selectAll(target);
};
behavior.keypress = (event, target, instance) => {
  if (event.key === "Enter") {
    if (isElementType(target, "button") || isElementType(target, "input") && ClickInputOnEnter.includes(target.type) || isElementType(target, "a") && target.href) return () => {
      instance.dispatchUIEvent(target, "click");
    };
    if (isElementType(target, "input")) {
      let form = target.form, submit = form == null ? void 0 : form.querySelector('input[type="submit"], button:not([type]), button[type="submit"]');
      return submit ? () => instance.dispatchUIEvent(submit, "click") : form && SubmitSingleInputOnEnter.includes(target.type) && form.querySelectorAll("input").length === 1 ? () => instance.dispatchUIEvent(form, "submit") : void 0;
    }
  }
  if (isEditable(target)) {
    let inputType = event.key === "Enter" ? isContentEditable(target) && !instance.system.keyboard.modifiers.Shift ? "insertParagraph" : "insertLineBreak" : "insertText", inputData = event.key === "Enter" ? `
` : event.key;
    return () => input(instance, target, inputData, inputType);
  }
};
var ClickInputOnEnter = ["button", "color", "file", "image", "reset", "submit"], SubmitSingleInputOnEnter = ["email", "month", "password", "search", "tel", "text", "url", "week"];
behavior.keyup = (event, target, instance) => {
  var _keyupBehavior_event_key;
  return (_keyupBehavior_event_key = keyupBehavior[event.key]) === null || _keyupBehavior_event_key === void 0 ? void 0 : _keyupBehavior_event_key.call(keyupBehavior, event, target, instance);
};
var keyupBehavior = { " ": (event, target, instance) => {
  if (isClickableInput(target)) return () => instance.dispatchUIEvent(target, "click");
} };
behavior.paste = (event, target, instance) => {
  if (isEditable(target)) return () => {
    var _event_clipboardData;
    let insertData = (_event_clipboardData = event.clipboardData) === null || _event_clipboardData === void 0 ? void 0 : _event_clipboardData.getData("text");
    insertData && input(instance, target, insertData, "insertFromPaste");
  };
};
var eventMap2 = { auxclick: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, beforeinput: { EventType: "InputEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, click: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, contextmenu: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, copy: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, change: { EventType: "Event", defaultInit: { bubbles: true, cancelable: false } }, cut: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, dblclick: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keydown: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keypress: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, keyup: { EventType: "KeyboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, paste: { EventType: "ClipboardEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, input: { EventType: "InputEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, mousedown: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseenter: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mouseleave: { EventType: "MouseEvent", defaultInit: { bubbles: false, cancelable: false, composed: true } }, mousemove: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseout: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseover: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, mouseup: { EventType: "MouseEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerover: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerenter: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, pointerdown: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointermove: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerup: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointercancel: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: false, composed: true } }, pointerout: { EventType: "PointerEvent", defaultInit: { bubbles: true, cancelable: true, composed: true } }, pointerleave: { EventType: "PointerEvent", defaultInit: { bubbles: false, cancelable: false } }, submit: { EventType: "Event", defaultInit: { bubbles: true, cancelable: true } } };
function getEventClass(type3) {
  return eventMap2[type3].EventType;
}
var mouseEvents = ["MouseEvent", "PointerEvent"];
function isMouseEvent(type3) {
  return mouseEvents.includes(getEventClass(type3));
}
function isKeyboardEvent(type3) {
  return getEventClass(type3) === "KeyboardEvent";
}
var eventInitializer = { ClipboardEvent: [initClipboardEvent], Event: [], InputEvent: [initUIEvent, initInputEvent], MouseEvent: [initUIEvent, initUIEventModififiers, initMouseEvent], PointerEvent: [initUIEvent, initUIEventModififiers, initMouseEvent, initPointerEvent], KeyboardEvent: [initUIEvent, initUIEventModififiers, initKeyboardEvent] };
function createEvent2(type3, target, init) {
  let window2 = getWindow(target), { EventType, defaultInit } = eventMap2[type3], event = new (getEventConstructors(window2))[EventType](type3, defaultInit);
  return eventInitializer[EventType].forEach((f2) => f2(event, init ?? {})), event;
}
function getEventConstructors(window2) {
  var _window_Event;
  let Event = (_window_Event = window2.Event) !== null && _window_Event !== void 0 ? _window_Event : class {
  };
  var _window_AnimationEvent;
  let AnimationEvent = (_window_AnimationEvent = window2.AnimationEvent) !== null && _window_AnimationEvent !== void 0 ? _window_AnimationEvent : class extends Event {
  };
  var _window_ClipboardEvent;
  let ClipboardEvent = (_window_ClipboardEvent = window2.ClipboardEvent) !== null && _window_ClipboardEvent !== void 0 ? _window_ClipboardEvent : class extends Event {
  };
  var _window_PopStateEvent;
  let PopStateEvent = (_window_PopStateEvent = window2.PopStateEvent) !== null && _window_PopStateEvent !== void 0 ? _window_PopStateEvent : class extends Event {
  };
  var _window_ProgressEvent;
  let ProgressEvent = (_window_ProgressEvent = window2.ProgressEvent) !== null && _window_ProgressEvent !== void 0 ? _window_ProgressEvent : class extends Event {
  };
  var _window_TransitionEvent;
  let TransitionEvent = (_window_TransitionEvent = window2.TransitionEvent) !== null && _window_TransitionEvent !== void 0 ? _window_TransitionEvent : class extends Event {
  };
  var _window_UIEvent;
  let UIEvent = (_window_UIEvent = window2.UIEvent) !== null && _window_UIEvent !== void 0 ? _window_UIEvent : class extends Event {
  };
  var _window_CompositionEvent;
  let CompositionEvent = (_window_CompositionEvent = window2.CompositionEvent) !== null && _window_CompositionEvent !== void 0 ? _window_CompositionEvent : class extends UIEvent {
  };
  var _window_FocusEvent;
  let FocusEvent = (_window_FocusEvent = window2.FocusEvent) !== null && _window_FocusEvent !== void 0 ? _window_FocusEvent : class extends UIEvent {
  };
  var _window_InputEvent;
  let InputEvent = (_window_InputEvent = window2.InputEvent) !== null && _window_InputEvent !== void 0 ? _window_InputEvent : class extends UIEvent {
  };
  var _window_KeyboardEvent;
  let KeyboardEvent = (_window_KeyboardEvent = window2.KeyboardEvent) !== null && _window_KeyboardEvent !== void 0 ? _window_KeyboardEvent : class extends UIEvent {
  };
  var _window_MouseEvent;
  let MouseEvent = (_window_MouseEvent = window2.MouseEvent) !== null && _window_MouseEvent !== void 0 ? _window_MouseEvent : class extends UIEvent {
  };
  var _window_DragEvent;
  let DragEvent = (_window_DragEvent = window2.DragEvent) !== null && _window_DragEvent !== void 0 ? _window_DragEvent : class extends MouseEvent {
  };
  var _window_PointerEvent;
  let PointerEvent = (_window_PointerEvent = window2.PointerEvent) !== null && _window_PointerEvent !== void 0 ? _window_PointerEvent : class extends MouseEvent {
  };
  var _window_TouchEvent;
  let TouchEvent = (_window_TouchEvent = window2.TouchEvent) !== null && _window_TouchEvent !== void 0 ? _window_TouchEvent : class extends UIEvent {
  };
  return { Event, AnimationEvent, ClipboardEvent, PopStateEvent, ProgressEvent, TransitionEvent, UIEvent, CompositionEvent, FocusEvent, InputEvent, KeyboardEvent, MouseEvent, DragEvent, PointerEvent, TouchEvent };
}
function assignProps(obj, props) {
  for (let [key, value] of Object.entries(props)) Object.defineProperty(obj, key, { get: () => value ?? null });
}
function sanitizeNumber(n2) {
  return Number(n2 ?? 0);
}
function initClipboardEvent(event, { clipboardData }) {
  assignProps(event, { clipboardData });
}
function initInputEvent(event, { data, inputType, isComposing }) {
  assignProps(event, { data, isComposing: !!isComposing, inputType: String(inputType) });
}
function initUIEvent(event, { view, detail }) {
  assignProps(event, { view, detail: sanitizeNumber(detail ?? 0) });
}
function initUIEventModififiers(event, { altKey, ctrlKey, metaKey, shiftKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierNumLock, modifierScrollLock, modifierSymbol, modifierSymbolLock }) {
  assignProps(event, { altKey: !!altKey, ctrlKey: !!ctrlKey, metaKey: !!metaKey, shiftKey: !!shiftKey, getModifierState(k2) {
    return !!{ Alt: altKey, AltGraph: modifierAltGraph, CapsLock: modifierCapsLock, Control: ctrlKey, Fn: modifierFn, FnLock: modifierFnLock, Meta: metaKey, NumLock: modifierNumLock, ScrollLock: modifierScrollLock, Shift: shiftKey, Symbol: modifierSymbol, SymbolLock: modifierSymbolLock }[k2];
  } });
}
function initKeyboardEvent(event, { key, code, location, repeat, isComposing, charCode }) {
  assignProps(event, { key: String(key), code: String(code), location: sanitizeNumber(location), repeat: !!repeat, isComposing: !!isComposing, charCode });
}
function initMouseEvent(event, { x: x2, y: y2, screenX, screenY, clientX = x2, clientY = y2, button, buttons, relatedTarget }) {
  assignProps(event, { screenX: sanitizeNumber(screenX), screenY: sanitizeNumber(screenY), clientX: sanitizeNumber(clientX), x: sanitizeNumber(clientX), clientY: sanitizeNumber(clientY), y: sanitizeNumber(clientY), button: sanitizeNumber(button), buttons: sanitizeNumber(buttons), relatedTarget });
}
function initPointerEvent(event, { pointerId, width, height, pressure, tangentialPressure, tiltX, tiltY, twist, pointerType, isPrimary }) {
  assignProps(event, { pointerId: sanitizeNumber(pointerId), width: sanitizeNumber(width), height: sanitizeNumber(height), pressure: sanitizeNumber(pressure), tangentialPressure: sanitizeNumber(tangentialPressure), tiltX: sanitizeNumber(tiltX), tiltY: sanitizeNumber(tiltY), twist: sanitizeNumber(twist), pointerType: String(pointerType), isPrimary: !!isPrimary });
}
function dispatchUIEvent(target, type3, init, preventDefault = false) {
  (isMouseEvent(type3) || isKeyboardEvent(type3)) && (init = { ...init, ...this.system.getUIEventModifiers() });
  let event = createEvent2(type3, target, init);
  return dispatchEvent.call(this, target, event, preventDefault);
}
function dispatchEvent(target, event, preventDefault = false) {
  var _behavior_type;
  let type3 = event.type, behaviorImplementation = preventDefault ? () => {
  } : (_behavior_type = behavior[type3]) === null || _behavior_type === void 0 ? void 0 : _behavior_type.call(behavior, event, target, this);
  if (behaviorImplementation) {
    event.preventDefault();
    let defaultPrevented = false;
    return Object.defineProperty(event, "defaultPrevented", { get: () => defaultPrevented }), Object.defineProperty(event, "preventDefault", { value: () => {
      defaultPrevented = event.cancelable;
    } }), wrapEvent(() => target.dispatchEvent(event)), defaultPrevented || behaviorImplementation(), !defaultPrevented;
  }
  return wrapEvent(() => target.dispatchEvent(event));
}
function dispatchDOMEvent(target, type3, init) {
  let event = createEvent2(type3, target, init);
  wrapEvent(() => target.dispatchEvent(event));
}
var Interceptor = Symbol("Interceptor for programmatical calls");
function prepareInterceptor(element, propName, interceptorImpl) {
  let prototypeDescriptor = Object.getOwnPropertyDescriptor(element.constructor.prototype, propName), objectDescriptor = Object.getOwnPropertyDescriptor(element, propName), target = (prototypeDescriptor == null ? void 0 : prototypeDescriptor.set) ? "set" : "value";
  if (typeof (prototypeDescriptor == null ? void 0 : prototypeDescriptor[target]) != "function" || prototypeDescriptor[target][Interceptor]) throw new Error(`Element ${element.tagName} does not implement "${String(propName)}".`);
  function intercept(...args) {
    let { applyNative = false, realArgs, then } = interceptorImpl.call(this, ...args), realFunc = (!applyNative && objectDescriptor || prototypeDescriptor)[target];
    target === "set" ? realFunc.call(this, realArgs) : realFunc.call(this, ...realArgs), then == null ? void 0 : then();
  }
  intercept[Interceptor] = Interceptor, Object.defineProperty(element, propName, { ...objectDescriptor ?? prototypeDescriptor, [target]: intercept });
}
function prepareValueInterceptor(element) {
  prepareInterceptor(element, "value", function(v2) {
    let isUI = isUIValue(v2);
    return isUI && startTrackValue(this), { applyNative: !!isUI, realArgs: sanitizeValue(this, v2), then: isUI ? void 0 : () => trackOrSetValue(this, String(v2)) };
  });
}
function sanitizeValue(element, v2) {
  return isElementType(element, "input", { type: "number" }) && String(v2) !== "" && !Number.isNaN(Number(v2)) ? String(Number(v2)) : String(v2);
}
function prepareSelectionInterceptor(element) {
  prepareInterceptor(element, "setSelectionRange", function(start, ...others) {
    let isUI = isUISelectionStart(start);
    return { applyNative: !!isUI, realArgs: [Number(start), ...others], then: () => isUI ? void 0 : setUISelectionClean(element) };
  }), prepareInterceptor(element, "selectionStart", function(v2) {
    return { realArgs: v2, then: () => setUISelectionClean(element) };
  }), prepareInterceptor(element, "selectionEnd", function(v2) {
    return { realArgs: v2, then: () => setUISelectionClean(element) };
  }), prepareInterceptor(element, "select", function() {
    return { realArgs: [], then: () => setUISelectionRaw(element, { anchorOffset: 0, focusOffset: getUIValue(element).length }) };
  });
}
function prepareRangeTextInterceptor(element) {
  prepareInterceptor(element, "setRangeText", function(...realArgs) {
    return { realArgs, then: () => {
      setUIValueClean(element), setUISelectionClean(element);
    } };
  });
}
var isPrepared = Symbol("Node prepared with document state workarounds");
function prepareDocument(document2) {
  document2[isPrepared] || (document2.addEventListener("focus", (e2) => {
    let el = e2.target;
    prepareElement(el);
  }, { capture: true, passive: true }), document2.activeElement && prepareElement(document2.activeElement), document2.addEventListener("blur", (e2) => {
    let el = e2.target, initialValue2 = getInitialValue(el);
    initialValue2 !== void 0 && (el.value !== initialValue2 && dispatchDOMEvent(el, "change"), clearInitialValue(el));
  }, { capture: true, passive: true }), document2[isPrepared] = isPrepared);
}
function prepareElement(el) {
  el[isPrepared] || (isElementType(el, ["input", "textarea"]) && (prepareValueInterceptor(el), prepareSelectionInterceptor(el), prepareRangeTextInterceptor(el)), el[isPrepared] = isPrepared);
}
function getDocumentFromNode(el) {
  return isDocument2(el) ? el : el.ownerDocument;
}
function isDocument2(node) {
  return node.nodeType === 9;
}
function wait(config3) {
  let delay = config3.delay;
  if (typeof delay == "number") return Promise.all([new Promise((resolve) => globalThis.setTimeout(() => resolve(), delay)), config3.advanceTimers(delay)]);
}
function _define_property3(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var DOM_KEY_LOCATION;
(function(DOM_KEY_LOCATION2) {
  DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.STANDARD = 0] = "STANDARD", DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.LEFT = 1] = "LEFT", DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.RIGHT = 2] = "RIGHT", DOM_KEY_LOCATION2[DOM_KEY_LOCATION2.NUMPAD = 3] = "NUMPAD";
})(DOM_KEY_LOCATION || (DOM_KEY_LOCATION = {}));
var modifierKeys = ["Alt", "AltGraph", "Control", "Fn", "Meta", "Shift", "Symbol"];
function isModifierKey(key) {
  return modifierKeys.includes(key);
}
var modifierLocks = ["CapsLock", "FnLock", "NumLock", "ScrollLock", "SymbolLock"];
function isModifierLock(key) {
  return modifierLocks.includes(key);
}
var KeyboardHost = class {
  isKeyPressed(keyDef) {
    return !!this.pressed[String(keyDef.code)];
  }
  getPressedKeys() {
    return Object.values(this.pressed).map((p2) => p2.keyDef);
  }
  async keydown(instance, keyDef) {
    var _this_pressed, _code, _this_pressed_code;
    let key = String(keyDef.key), code = String(keyDef.code), target = getActiveElementOrBody(instance.config.document);
    this.setKeydownTarget(target);
    var _2;
    (_2 = (_this_pressed = this.pressed)[_code = code]) !== null && _2 !== void 0 || (_this_pressed[_code] = { keyDef, unpreventedDefault: false }), isModifierKey(key) && (this.modifiers[key] = true);
    let unprevented = instance.dispatchUIEvent(target, "keydown", { key, code });
    isModifierLock(key) && !this.modifiers[key] && (this.modifiers[key] = true, this.modifierLockStart[key] = true), (_this_pressed_code = this.pressed[code]).unpreventedDefault || (_this_pressed_code.unpreventedDefault = unprevented), unprevented && this.hasKeyPress(key) && instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document), "keypress", { key, code, charCode: keyDef.key === "Enter" ? 13 : String(keyDef.key).charCodeAt(0) });
  }
  async keyup(instance, keyDef) {
    let key = String(keyDef.key), code = String(keyDef.code), unprevented = this.pressed[code].unpreventedDefault;
    delete this.pressed[code], isModifierKey(key) && !Object.values(this.pressed).find((p2) => p2.keyDef.key === key) && (this.modifiers[key] = false), instance.dispatchUIEvent(getActiveElementOrBody(instance.config.document), "keyup", { key, code }, !unprevented), isModifierLock(key) && this.modifiers[key] && (this.modifierLockStart[key] ? this.modifierLockStart[key] = false : this.modifiers[key] = false);
  }
  setKeydownTarget(target) {
    target !== this.lastKeydownTarget && (this.carryChar = ""), this.lastKeydownTarget = target;
  }
  hasKeyPress(key) {
    return (key.length === 1 || key === "Enter") && !this.modifiers.Control && !this.modifiers.Alt;
  }
  constructor(system) {
    _define_property3(this, "system", void 0), _define_property3(this, "modifiers", { Alt: false, AltGraph: false, CapsLock: false, Control: false, Fn: false, FnLock: false, Meta: false, NumLock: false, ScrollLock: false, Shift: false, Symbol: false, SymbolLock: false }), _define_property3(this, "pressed", {}), _define_property3(this, "carryChar", ""), _define_property3(this, "lastKeydownTarget", void 0), _define_property3(this, "modifierLockStart", {}), this.system = system;
  }
};
var defaultKeyMap = [..."0123456789".split("").map((c2) => ({ code: `Digit${c2}`, key: c2 })), ...")!@#$%^&*(".split("").map((c2, i2) => ({ code: `Digit${i2}`, key: c2, shiftKey: true })), ..."abcdefghijklmnopqrstuvwxyz".split("").map((c2) => ({ code: `Key${c2.toUpperCase()}`, key: c2 })), ..."ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").map((c2) => ({ code: `Key${c2}`, key: c2, shiftKey: true })), { code: "Space", key: " " }, { code: "AltLeft", key: "Alt", location: DOM_KEY_LOCATION.LEFT }, { code: "AltRight", key: "Alt", location: DOM_KEY_LOCATION.RIGHT }, { code: "ShiftLeft", key: "Shift", location: DOM_KEY_LOCATION.LEFT }, { code: "ShiftRight", key: "Shift", location: DOM_KEY_LOCATION.RIGHT }, { code: "ControlLeft", key: "Control", location: DOM_KEY_LOCATION.LEFT }, { code: "ControlRight", key: "Control", location: DOM_KEY_LOCATION.RIGHT }, { code: "MetaLeft", key: "Meta", location: DOM_KEY_LOCATION.LEFT }, { code: "MetaRight", key: "Meta", location: DOM_KEY_LOCATION.RIGHT }, { code: "OSLeft", key: "OS", location: DOM_KEY_LOCATION.LEFT }, { code: "OSRight", key: "OS", location: DOM_KEY_LOCATION.RIGHT }, { code: "Tab", key: "Tab" }, { code: "CapsLock", key: "CapsLock" }, { code: "Backspace", key: "Backspace" }, { code: "Enter", key: "Enter" }, { code: "Escape", key: "Escape" }, { code: "ArrowUp", key: "ArrowUp" }, { code: "ArrowDown", key: "ArrowDown" }, { code: "ArrowLeft", key: "ArrowLeft" }, { code: "ArrowRight", key: "ArrowRight" }, { code: "Home", key: "Home" }, { code: "End", key: "End" }, { code: "Delete", key: "Delete" }, { code: "PageUp", key: "PageUp" }, { code: "PageDown", key: "PageDown" }, { code: "Fn", key: "Fn" }, { code: "Symbol", key: "Symbol" }, { code: "AltRight", key: "AltGraph" }];
var defaultKeyMap2 = [{ name: "MouseLeft", pointerType: "mouse", button: "primary" }, { name: "MouseRight", pointerType: "mouse", button: "secondary" }, { name: "MouseMiddle", pointerType: "mouse", button: "auxiliary" }, { name: "TouchA", pointerType: "touch" }, { name: "TouchB", pointerType: "touch" }, { name: "TouchC", pointerType: "touch" }];
function _define_property4(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var Buttons = class {
  getButtons() {
    let v2 = 0;
    for (let button of Object.keys(this.pressed)) v2 |= 2 ** Number(button);
    return v2;
  }
  down(keyDef) {
    let button = getMouseButtonId(keyDef.button);
    if (button in this.pressed) {
      this.pressed[button].push(keyDef);
      return;
    }
    return this.pressed[button] = [keyDef], button;
  }
  up(keyDef) {
    let button = getMouseButtonId(keyDef.button);
    if (button in this.pressed && (this.pressed[button] = this.pressed[button].filter((k2) => k2.name !== keyDef.name), this.pressed[button].length === 0)) return delete this.pressed[button], button;
  }
  constructor() {
    _define_property4(this, "pressed", {});
  }
}, MouseButton = { primary: 0, secondary: 1, auxiliary: 2, back: 3, X1: 3, forward: 4, X2: 4 };
function getMouseButtonId(button = 0) {
  return button in MouseButton ? MouseButton[button] : Number(button);
}
var MouseButtonFlip = { 1: 2, 2: 1 };
function getMouseEventButton(button) {
  return button = getMouseButtonId(button), button in MouseButtonFlip ? MouseButtonFlip[button] : button;
}
function _define_property5(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var Device = class {
  get countPressed() {
    return this.pressedKeys.size;
  }
  isPressed(keyDef) {
    return this.pressedKeys.has(keyDef.name);
  }
  addPressed(keyDef) {
    return this.pressedKeys.add(keyDef.name);
  }
  removePressed(keyDef) {
    return this.pressedKeys.delete(keyDef.name);
  }
  constructor() {
    _define_property5(this, "pressedKeys", /* @__PURE__ */ new Set());
  }
};
function getTreeDiff(a, b2) {
  let treeA = [];
  for (let el = a; el; el = el.parentElement) treeA.push(el);
  let treeB = [];
  for (let el = b2; el; el = el.parentElement) treeB.push(el);
  let i2 = 0;
  for (; !(i2 >= treeA.length || i2 >= treeB.length || treeA[treeA.length - 1 - i2] !== treeB[treeB.length - 1 - i2]); i2++) ;
  return [treeA.slice(0, treeA.length - i2), treeB.slice(0, treeB.length - i2), treeB.slice(treeB.length - i2)];
}
function resolveCaretPosition({ target, node, offset }) {
  return hasOwnSelection(target) ? { node: target, offset: offset ?? getUIValue(target).length } : node ? { node, offset: offset ?? (node.nodeType === 3 ? node.nodeValue.length : node.childNodes.length) } : findNodeAtTextOffset(target, offset);
}
function findNodeAtTextOffset(node, offset, isRoot = true) {
  let i2 = offset === void 0 ? node.childNodes.length - 1 : 0, step = offset === void 0 ? -1 : 1;
  for (; offset === void 0 ? i2 >= (isRoot ? Math.max(node.childNodes.length - 1, 0) : 0) : i2 <= node.childNodes.length; ) {
    if (offset && i2 === node.childNodes.length) throw new Error("The given offset is out of bounds.");
    let c2 = node.childNodes.item(i2), text = String(c2.textContent);
    if (text.length) if (offset !== void 0 && text.length < offset) offset -= text.length;
    else {
      if (c2.nodeType === 1) return findNodeAtTextOffset(c2, offset, false);
      if (c2.nodeType === 3) return { node: c2, offset: offset ?? c2.nodeValue.length };
    }
    i2 += step;
  }
  return { node, offset: node.childNodes.length };
}
function setSelectionPerMouseDown({ document: document2, target, clickCount, node, offset }) {
  if (hasNoSelection(target)) return;
  let targetHasOwnSelection = hasOwnSelection(target), text = String(targetHasOwnSelection ? getUIValue(target) : target.textContent), [start, end] = node ? [offset, offset] : getTextRange(text, offset, clickCount);
  if (targetHasOwnSelection) return setUISelection(target, { anchorOffset: start ?? text.length, focusOffset: end ?? text.length }), { node: target, start: start ?? 0, end: end ?? text.length };
  {
    let { node: startNode, offset: startOffset } = resolveCaretPosition({ target, node, offset: start }), { node: endNode, offset: endOffset } = resolveCaretPosition({ target, node, offset: end }), range = target.ownerDocument.createRange();
    try {
      range.setStart(startNode, startOffset), range.setEnd(endNode, endOffset);
    } catch {
      throw new Error("The given offset is out of bounds.");
    }
    let selection = document2.getSelection();
    return selection == null ? void 0 : selection.removeAllRanges(), selection == null ? void 0 : selection.addRange(range.cloneRange()), range;
  }
}
function getTextRange(text, pos, clickCount) {
  if (clickCount % 3 === 1 || text.length === 0) return [pos, pos];
  let textPos = pos ?? text.length;
  return clickCount % 3 === 2 ? [textPos - text.substr(0, pos).match(/(\w+|\s+|\W)?$/)[0].length, pos === void 0 ? pos : pos + text.substr(pos).match(/^(\w+|\s+|\W)?/)[0].length] : [textPos - text.substr(0, pos).match(/[^\r\n]*$/)[0].length, pos === void 0 ? pos : pos + text.substr(pos).match(/^[^\r\n]*/)[0].length];
}
function modifySelectionPerMouseMove(selectionRange, { document: document2, target, node, offset }) {
  let selectionFocus = resolveCaretPosition({ target, node, offset });
  if ("node" in selectionRange) {
    if (selectionFocus.node === selectionRange.node) {
      let anchorOffset = selectionFocus.offset < selectionRange.start ? selectionRange.end : selectionRange.start, focusOffset = selectionFocus.offset > selectionRange.end || selectionFocus.offset < selectionRange.start ? selectionFocus.offset : selectionRange.end;
      setUISelection(selectionRange.node, { anchorOffset, focusOffset });
    }
  } else {
    let range = selectionRange.cloneRange(), cmp = range.comparePoint(selectionFocus.node, selectionFocus.offset);
    cmp < 0 ? range.setStart(selectionFocus.node, selectionFocus.offset) : cmp > 0 && range.setEnd(selectionFocus.node, selectionFocus.offset);
    let selection = document2.getSelection();
    selection == null ? void 0 : selection.removeAllRanges(), selection == null ? void 0 : selection.addRange(range.cloneRange());
  }
}
function isDifferentPointerPosition(positionA, positionB) {
  var _positionA_coords, _positionB_coords, _positionA_coords1, _positionB_coords1, _positionA_caret, _positionB_caret, _positionA_caret1, _positionB_caret1;
  return positionA.target !== positionB.target || ((_positionA_coords = positionA.coords) === null || _positionA_coords === void 0 ? void 0 : _positionA_coords.x) !== ((_positionB_coords = positionB.coords) === null || _positionB_coords === void 0 ? void 0 : _positionB_coords.y) || ((_positionA_coords1 = positionA.coords) === null || _positionA_coords1 === void 0 ? void 0 : _positionA_coords1.y) !== ((_positionB_coords1 = positionB.coords) === null || _positionB_coords1 === void 0 ? void 0 : _positionB_coords1.y) || ((_positionA_caret = positionA.caret) === null || _positionA_caret === void 0 ? void 0 : _positionA_caret.node) !== ((_positionB_caret = positionB.caret) === null || _positionB_caret === void 0 ? void 0 : _positionB_caret.node) || ((_positionA_caret1 = positionA.caret) === null || _positionA_caret1 === void 0 ? void 0 : _positionA_caret1.offset) !== ((_positionB_caret1 = positionB.caret) === null || _positionB_caret1 === void 0 ? void 0 : _positionB_caret1.offset);
}
function _define_property6(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var Mouse = class {
  move(instance, position) {
    let prevPosition = this.position, prevTarget = this.getTarget(instance);
    if (this.position = position, !isDifferentPointerPosition(prevPosition, position)) return;
    let nextTarget = this.getTarget(instance), init = this.getEventInit("mousemove"), [leave, enter] = getTreeDiff(prevTarget, nextTarget);
    return { leave: () => {
      prevTarget !== nextTarget && (instance.dispatchUIEvent(prevTarget, "mouseout", init), leave.forEach((el) => instance.dispatchUIEvent(el, "mouseleave", init)));
    }, enter: () => {
      prevTarget !== nextTarget && (instance.dispatchUIEvent(nextTarget, "mouseover", init), enter.forEach((el) => instance.dispatchUIEvent(el, "mouseenter", init)));
    }, move: () => {
      instance.dispatchUIEvent(nextTarget, "mousemove", init), this.modifySelecting(instance);
    } };
  }
  down(instance, keyDef, pointer3) {
    let button = this.buttons.down(keyDef);
    if (button === void 0) return;
    let target = this.getTarget(instance);
    this.buttonDownTarget[button] = target;
    let disabled = isDisabled2(target), init = this.getEventInit("mousedown", keyDef.button);
    (disabled || instance.dispatchUIEvent(target, "mousedown", init)) && (this.startSelecting(instance, init.detail), focusElement(target)), !disabled && getMouseEventButton(keyDef.button) === 2 && instance.dispatchUIEvent(target, "contextmenu", this.getEventInit("contextmenu", keyDef.button, pointer3));
  }
  up(instance, keyDef, pointer3) {
    let button = this.buttons.up(keyDef);
    if (button === void 0) return;
    let target = this.getTarget(instance);
    if (!isDisabled2(target)) {
      instance.dispatchUIEvent(target, "mouseup", this.getEventInit("mouseup", keyDef.button)), this.endSelecting();
      let clickTarget = getTreeDiff(this.buttonDownTarget[button], target)[2][0];
      if (clickTarget) {
        let init = this.getEventInit("click", keyDef.button, pointer3);
        init.detail && (instance.dispatchUIEvent(clickTarget, init.button === 0 ? "click" : "auxclick", init), init.button === 0 && init.detail === 2 && instance.dispatchUIEvent(clickTarget, "dblclick", { ...this.getEventInit("dblclick", keyDef.button), detail: init.detail }));
      }
    }
  }
  resetClickCount() {
    this.clickCount.reset();
  }
  getEventInit(type3, button, pointer3) {
    let init = { ...this.position.coords };
    return pointer3 && (init.pointerId = pointer3.pointerId, init.pointerType = pointer3.pointerType, init.isPrimary = pointer3.isPrimary), init.button = getMouseEventButton(button), init.buttons = this.buttons.getButtons(), type3 === "mousedown" ? init.detail = this.clickCount.getOnDown(init.button) : type3 === "mouseup" ? init.detail = this.clickCount.getOnUp(init.button) : (type3 === "click" || type3 === "auxclick") && (init.detail = this.clickCount.incOnClick(init.button)), init;
  }
  getTarget(instance) {
    var _this_position_target;
    return (_this_position_target = this.position.target) !== null && _this_position_target !== void 0 ? _this_position_target : instance.config.document.body;
  }
  startSelecting(instance, clickCount) {
    var _this_position_caret, _this_position_caret1;
    this.selecting = setSelectionPerMouseDown({ document: instance.config.document, target: this.getTarget(instance), node: (_this_position_caret = this.position.caret) === null || _this_position_caret === void 0 ? void 0 : _this_position_caret.node, offset: (_this_position_caret1 = this.position.caret) === null || _this_position_caret1 === void 0 ? void 0 : _this_position_caret1.offset, clickCount });
  }
  modifySelecting(instance) {
    var _this_position_caret, _this_position_caret1;
    this.selecting && modifySelectionPerMouseMove(this.selecting, { document: instance.config.document, target: this.getTarget(instance), node: (_this_position_caret = this.position.caret) === null || _this_position_caret === void 0 ? void 0 : _this_position_caret.node, offset: (_this_position_caret1 = this.position.caret) === null || _this_position_caret1 === void 0 ? void 0 : _this_position_caret1.offset });
  }
  endSelecting() {
    this.selecting = void 0;
  }
  constructor() {
    _define_property6(this, "position", {}), _define_property6(this, "buttons", new Buttons()), _define_property6(this, "selecting", void 0), _define_property6(this, "buttonDownTarget", {}), _define_property6(this, "clickCount", new class {
      incOnClick(button) {
        let current = this.down[button] === void 0 ? void 0 : Number(this.down[button]) + 1;
        return this.count = this.count[button] === void 0 ? {} : { [button]: Number(this.count[button]) + 1 }, current;
      }
      getOnDown(button) {
        var _this_count_button;
        this.down = { [button]: (_this_count_button = this.count[button]) !== null && _this_count_button !== void 0 ? _this_count_button : 0 };
        var _this_count_button1;
        return this.count = { [button]: (_this_count_button1 = this.count[button]) !== null && _this_count_button1 !== void 0 ? _this_count_button1 : 0 }, Number(this.count[button]) + 1;
      }
      getOnUp(button) {
        return this.down[button] === void 0 ? void 0 : Number(this.down[button]) + 1;
      }
      reset() {
        this.count = {};
      }
      constructor() {
        _define_property6(this, "down", {}), _define_property6(this, "count", {});
      }
    }());
  }
};
function hasPointerEvents(instance, element) {
  var _checkPointerEvents;
  return ((_checkPointerEvents = checkPointerEvents(instance, element)) === null || _checkPointerEvents === void 0 ? void 0 : _checkPointerEvents.pointerEvents) !== "none";
}
function closestPointerEventsDeclaration(element) {
  let window2 = getWindow(element);
  for (let el = element, tree = []; el == null ? void 0 : el.ownerDocument; el = el.parentElement) {
    tree.push(el);
    let pointerEvents = window2.getComputedStyle(el).pointerEvents;
    if (pointerEvents && !["inherit", "unset"].includes(pointerEvents)) return { pointerEvents, tree };
  }
}
var PointerEventsCheck = Symbol("Last check for pointer-events");
function checkPointerEvents(instance, element) {
  let lastCheck = element[PointerEventsCheck];
  if (!(instance.config.pointerEventsCheck !== PointerEventsCheckLevel.Never && (!lastCheck || hasBitFlag(instance.config.pointerEventsCheck, PointerEventsCheckLevel.EachApiCall) && lastCheck[ApiLevel.Call] !== getLevelRef(instance, ApiLevel.Call) || hasBitFlag(instance.config.pointerEventsCheck, PointerEventsCheckLevel.EachTrigger) && lastCheck[ApiLevel.Trigger] !== getLevelRef(instance, ApiLevel.Trigger)))) return lastCheck == null ? void 0 : lastCheck.result;
  let declaration = closestPointerEventsDeclaration(element);
  return element[PointerEventsCheck] = { [ApiLevel.Call]: getLevelRef(instance, ApiLevel.Call), [ApiLevel.Trigger]: getLevelRef(instance, ApiLevel.Trigger), result: declaration }, declaration;
}
function assertPointerEvents(instance, element) {
  let declaration = checkPointerEvents(instance, element);
  if ((declaration == null ? void 0 : declaration.pointerEvents) === "none") throw new Error([`Unable to perform pointer interaction as the element ${declaration.tree.length > 1 ? "inherits" : "has"} \`pointer-events: none\`:`, "", printTree(declaration.tree)].join(`
`));
}
function printTree(tree) {
  return tree.reverse().map((el, i2) => ["".padEnd(i2), el.tagName, el.id && `#${el.id}`, el.hasAttribute("data-testid") && `(testId=${el.getAttribute("data-testid")})`, getLabelDescr(el), tree.length > 1 && i2 === 0 && "  <-- This element declared `pointer-events: none`", tree.length > 1 && i2 === tree.length - 1 && "  <-- Asserted pointer events here"].filter(Boolean).join("")).join(`
`);
}
function getLabelDescr(element) {
  var _element_labels;
  let label;
  if (element.hasAttribute("aria-label")) label = element.getAttribute("aria-label");
  else if (element.hasAttribute("aria-labelledby")) {
    var _element_ownerDocument_getElementById_textContent, _element_ownerDocument_getElementById;
    label = (_element_ownerDocument_getElementById = element.ownerDocument.getElementById(element.getAttribute("aria-labelledby"))) === null || _element_ownerDocument_getElementById === void 0 || (_element_ownerDocument_getElementById_textContent = _element_ownerDocument_getElementById.textContent) === null || _element_ownerDocument_getElementById_textContent === void 0 ? void 0 : _element_ownerDocument_getElementById_textContent.trim();
  } else if (isElementType(element, ["button", "input", "meter", "output", "progress", "select", "textarea"]) && (!((_element_labels = element.labels) === null || _element_labels === void 0) && _element_labels.length)) label = Array.from(element.labels).map((el) => {
    var _el_textContent;
    return (_el_textContent = el.textContent) === null || _el_textContent === void 0 ? void 0 : _el_textContent.trim();
  }).join("|");
  else if (isElementType(element, "button")) {
    var _element_textContent;
    label = (_element_textContent = element.textContent) === null || _element_textContent === void 0 ? void 0 : _element_textContent.trim();
  }
  return label = label == null ? void 0 : label.replace(/\n/g, "  "), Number(label == null ? void 0 : label.length) > 30 && (label = `${label == null ? void 0 : label.substring(0, 29)}…`), label ? `(label=${label})` : "";
}
function hasBitFlag(conf, flag) {
  return (conf & flag) > 0;
}
function _define_property7(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var Pointer = class {
  init(instance, position) {
    this.position = position;
    let target = this.getTarget(instance), [, enter] = getTreeDiff(null, target), init = this.getEventInit();
    return assertPointerEvents(instance, target), instance.dispatchUIEvent(target, "pointerover", init), enter.forEach((el) => instance.dispatchUIEvent(el, "pointerenter", init)), this;
  }
  move(instance, position) {
    let prevPosition = this.position, prevTarget = this.getTarget(instance);
    if (this.position = position, !isDifferentPointerPosition(prevPosition, position)) return;
    let nextTarget = this.getTarget(instance), init = this.getEventInit(), [leave, enter] = getTreeDiff(prevTarget, nextTarget);
    return { leave: () => {
      hasPointerEvents(instance, prevTarget) && prevTarget !== nextTarget && (instance.dispatchUIEvent(prevTarget, "pointerout", init), leave.forEach((el) => instance.dispatchUIEvent(el, "pointerleave", init)));
    }, enter: () => {
      assertPointerEvents(instance, nextTarget), prevTarget !== nextTarget && (instance.dispatchUIEvent(nextTarget, "pointerover", init), enter.forEach((el) => instance.dispatchUIEvent(el, "pointerenter", init)));
    }, move: () => {
      instance.dispatchUIEvent(nextTarget, "pointermove", init);
    } };
  }
  down(instance, _keyDef) {
    if (this.isDown) return;
    let target = this.getTarget(instance);
    assertPointerEvents(instance, target), this.isDown = true, this.isPrevented = !instance.dispatchUIEvent(target, "pointerdown", this.getEventInit());
  }
  up(instance, _keyDef) {
    if (!this.isDown) return;
    let target = this.getTarget(instance);
    assertPointerEvents(instance, target), this.isDown = false, instance.dispatchUIEvent(target, "pointerup", this.getEventInit());
  }
  release(instance) {
    let target = this.getTarget(instance), [leave] = getTreeDiff(target, null), init = this.getEventInit();
    hasPointerEvents(instance, target) && (instance.dispatchUIEvent(target, "pointerout", init), leave.forEach((el) => instance.dispatchUIEvent(el, "pointerleave", init))), this.isCancelled = true;
  }
  getTarget(instance) {
    var _this_position_target;
    return (_this_position_target = this.position.target) !== null && _this_position_target !== void 0 ? _this_position_target : instance.config.document.body;
  }
  getEventInit() {
    return { ...this.position.coords, pointerId: this.pointerId, pointerType: this.pointerType, isPrimary: this.isPrimary };
  }
  constructor({ pointerId, pointerType, isPrimary }) {
    _define_property7(this, "pointerId", void 0), _define_property7(this, "pointerType", void 0), _define_property7(this, "isPrimary", void 0), _define_property7(this, "isMultitouch", false), _define_property7(this, "isCancelled", false), _define_property7(this, "isDown", false), _define_property7(this, "isPrevented", false), _define_property7(this, "position", {}), this.pointerId = pointerId, this.pointerType = pointerType, this.isPrimary = isPrimary, this.isMultitouch = !isPrimary;
  }
};
function _define_property8(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var PointerHost = class {
  isKeyPressed(keyDef) {
    return this.devices.get(keyDef.pointerType).isPressed(keyDef);
  }
  async press(instance, keyDef, position) {
    let pointerName = this.getPointerName(keyDef), pointer3 = keyDef.pointerType === "touch" ? this.pointers.new(pointerName, keyDef).init(instance, position) : this.pointers.get(pointerName);
    pointer3.position = position, pointer3.pointerType !== "touch" && (this.mouse.position = position), this.devices.get(keyDef.pointerType).addPressed(keyDef), this.buttons.down(keyDef), pointer3.down(instance, keyDef), pointer3.pointerType !== "touch" && !pointer3.isPrevented && this.mouse.down(instance, keyDef, pointer3);
  }
  async move(instance, pointerName, position) {
    let pointer3 = this.pointers.get(pointerName), pointermove = pointer3.move(instance, position), mousemove = pointer3.pointerType === "touch" || pointer3.isPrevented && pointer3.isDown ? void 0 : this.mouse.move(instance, position);
    pointermove == null ? void 0 : pointermove.leave(), mousemove == null ? void 0 : mousemove.leave(), pointermove == null ? void 0 : pointermove.enter(), mousemove == null ? void 0 : mousemove.enter(), pointermove == null ? void 0 : pointermove.move(), mousemove == null ? void 0 : mousemove.move();
  }
  async release(instance, keyDef, position) {
    let device = this.devices.get(keyDef.pointerType);
    device.removePressed(keyDef), this.buttons.up(keyDef);
    let pointer3 = this.pointers.get(this.getPointerName(keyDef));
    if (pointer3.position = position, pointer3.pointerType !== "touch" && (this.mouse.position = position), device.countPressed === 0 && pointer3.up(instance, keyDef), pointer3.pointerType === "touch" && pointer3.release(instance), !pointer3.isPrevented) {
      if (pointer3.pointerType === "touch" && !pointer3.isMultitouch) {
        let mousemove = this.mouse.move(instance, pointer3.position);
        mousemove == null ? void 0 : mousemove.leave(), mousemove == null ? void 0 : mousemove.enter(), mousemove == null ? void 0 : mousemove.move(), this.mouse.down(instance, keyDef, pointer3);
      }
      if (!pointer3.isMultitouch) {
        let mousemove = this.mouse.move(instance, pointer3.position);
        mousemove == null ? void 0 : mousemove.leave(), mousemove == null ? void 0 : mousemove.enter(), mousemove == null ? void 0 : mousemove.move(), this.mouse.up(instance, keyDef, pointer3);
      }
    }
  }
  getPointerName(keyDef) {
    return keyDef.pointerType === "touch" ? keyDef.name : keyDef.pointerType;
  }
  getPreviousPosition(pointerName) {
    return this.pointers.has(pointerName) ? this.pointers.get(pointerName).position : void 0;
  }
  resetClickCount() {
    this.mouse.resetClickCount();
  }
  getMouseTarget(instance) {
    var _this_mouse_position_target;
    return (_this_mouse_position_target = this.mouse.position.target) !== null && _this_mouse_position_target !== void 0 ? _this_mouse_position_target : instance.config.document.body;
  }
  setMousePosition(position) {
    this.mouse.position = position, this.pointers.get("mouse").position = position;
  }
  constructor(system) {
    _define_property8(this, "system", void 0), _define_property8(this, "mouse", void 0), _define_property8(this, "buttons", void 0), _define_property8(this, "devices", new class {
      get(k2) {
        var _this_registry, _k2, _2;
        return (_2 = (_this_registry = this.registry)[_k2 = k2]) !== null && _2 !== void 0 || (_this_registry[_k2] = new Device()), this.registry[k2];
      }
      constructor() {
        _define_property8(this, "registry", {});
      }
    }()), _define_property8(this, "pointers", new class {
      new(pointerName, keyDef) {
        let isPrimary = keyDef.pointerType !== "touch" || !Object.values(this.registry).some((p2) => p2.pointerType === "touch" && !p2.isCancelled);
        return isPrimary || Object.values(this.registry).forEach((p2) => {
          p2.pointerType === keyDef.pointerType && !p2.isCancelled && (p2.isMultitouch = true);
        }), this.registry[pointerName] = new Pointer({ pointerId: this.nextId++, pointerType: keyDef.pointerType, isPrimary }), this.registry[pointerName];
      }
      get(pointerName) {
        if (!this.has(pointerName)) throw new Error(`Trying to access pointer "${pointerName}" which does not exist.`);
        return this.registry[pointerName];
      }
      has(pointerName) {
        return pointerName in this.registry;
      }
      constructor() {
        _define_property8(this, "registry", { mouse: new Pointer({ pointerId: 1, pointerType: "mouse", isPrimary: true }) }), _define_property8(this, "nextId", 2);
      }
    }()), this.system = system, this.buttons = new Buttons(), this.mouse = new Mouse();
  }
};
function _define_property9(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true }) : obj[key] = value, obj;
}
var System = class {
  getUIEventModifiers() {
    return { altKey: this.keyboard.modifiers.Alt, ctrlKey: this.keyboard.modifiers.Control, metaKey: this.keyboard.modifiers.Meta, shiftKey: this.keyboard.modifiers.Shift, modifierAltGraph: this.keyboard.modifiers.AltGraph, modifierCapsLock: this.keyboard.modifiers.CapsLock, modifierFn: this.keyboard.modifiers.Fn, modifierFnLock: this.keyboard.modifiers.FnLock, modifierNumLock: this.keyboard.modifiers.NumLock, modifierScrollLock: this.keyboard.modifiers.ScrollLock, modifierSymbol: this.keyboard.modifiers.Symbol, modifierSymbolLock: this.keyboard.modifiers.SymbolLock };
  }
  constructor() {
    _define_property9(this, "keyboard", new KeyboardHost(this)), _define_property9(this, "pointer", new PointerHost(this));
  }
};
async function click(element) {
  let pointerIn = [];
  return this.config.skipHover || pointerIn.push({ target: element }), pointerIn.push({ keys: "[MouseLeft]", target: element }), this.pointer(pointerIn);
}
async function dblClick(element) {
  return this.pointer([{ target: element }, "[MouseLeft][MouseLeft]"]);
}
async function tripleClick(element) {
  return this.pointer([{ target: element }, "[MouseLeft][MouseLeft][MouseLeft]"]);
}
async function hover(element) {
  return this.pointer({ target: element });
}
async function unhover(element) {
  return assertPointerEvents(this, this.system.pointer.getMouseTarget(this)), this.pointer({ target: element.ownerDocument.body });
}
async function tab({ shift } = {}) {
  return this.keyboard(shift === true ? "{Shift>}{Tab}{/Shift}" : shift === false ? "[/ShiftLeft][/ShiftRight]{Tab}" : "{Tab}");
}
function parseKeyDef(keyboardMap, text) {
  let defs = [];
  do {
    let { type: type3, descriptor, consumedLength, releasePrevious, releaseSelf = true, repeat } = readNextDescriptor(text, "keyboard");
    var _keyboardMap_find;
    let keyDef = (_keyboardMap_find = keyboardMap.find((def) => {
      if (type3 === "[") {
        var _def_code;
        return ((_def_code = def.code) === null || _def_code === void 0 ? void 0 : _def_code.toLowerCase()) === descriptor.toLowerCase();
      } else if (type3 === "{") {
        var _def_key;
        return ((_def_key = def.key) === null || _def_key === void 0 ? void 0 : _def_key.toLowerCase()) === descriptor.toLowerCase();
      }
      return def.key === descriptor;
    })) !== null && _keyboardMap_find !== void 0 ? _keyboardMap_find : { key: "Unknown", code: "Unknown", [type3 === "[" ? "code" : "key"]: descriptor };
    defs.push({ keyDef, releasePrevious, releaseSelf, repeat }), text = text.slice(consumedLength);
  } while (text);
  return defs;
}
async function keyboard(text) {
  let actions = parseKeyDef(this.config.keyboardMap, text);
  for (let i2 = 0; i2 < actions.length; i2++) await wait(this.config), await keyboardAction(this, actions[i2]);
}
async function keyboardAction(instance, { keyDef, releasePrevious, releaseSelf, repeat }) {
  let { system } = instance;
  if (system.keyboard.isKeyPressed(keyDef) && await system.keyboard.keyup(instance, keyDef), !releasePrevious) {
    for (let i2 = 1; i2 <= repeat; i2++) await system.keyboard.keydown(instance, keyDef), i2 < repeat && await wait(instance.config);
    releaseSelf && await system.keyboard.keyup(instance, keyDef);
  }
}
async function releaseAllKeys(instance) {
  for (let k2 of instance.system.keyboard.getPressedKeys()) await instance.system.keyboard.keyup(instance, k2);
}
function copySelection(target) {
  let data = hasOwnSelection(target) ? { "text/plain": readSelectedValueFromInput(target) } : { "text/plain": String(target.ownerDocument.getSelection()) }, dt2 = createDataTransfer(getWindow(target));
  for (let type3 in data) data[type3] && dt2.setData(type3, data[type3]);
  return dt2;
}
function readSelectedValueFromInput(target) {
  let sel = getUISelection(target);
  return getUIValue(target).substring(sel.startOffset, sel.endOffset);
}
async function copy() {
  let doc = this.config.document;
  var _doc_activeElement;
  let target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : doc.body, clipboardData = copySelection(target);
  if (clipboardData.items.length !== 0) return this.dispatchUIEvent(target, "copy", { clipboardData }) && this.config.writeToClipboard && await writeDataTransferToClipboard(doc, clipboardData), clipboardData;
}
async function cut() {
  let doc = this.config.document;
  var _doc_activeElement;
  let target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : doc.body, clipboardData = copySelection(target);
  if (clipboardData.items.length !== 0) return this.dispatchUIEvent(target, "cut", { clipboardData }) && this.config.writeToClipboard && await writeDataTransferToClipboard(target.ownerDocument, clipboardData), clipboardData;
}
async function paste(clipboardData) {
  let doc = this.config.document;
  var _doc_activeElement;
  let target = (_doc_activeElement = doc.activeElement) !== null && _doc_activeElement !== void 0 ? _doc_activeElement : doc.body;
  var _ref;
  let dataTransfer = (_ref = typeof clipboardData == "string" ? getClipboardDataFromString(doc, clipboardData) : clipboardData) !== null && _ref !== void 0 ? _ref : await readDataTransferFromClipboard(doc).catch(() => {
    throw new Error("`userEvent.paste()` without `clipboardData` requires the `ClipboardAPI` to be available.");
  });
  this.dispatchUIEvent(target, "paste", { clipboardData: dataTransfer });
}
function getClipboardDataFromString(doc, text) {
  let dt2 = createDataTransfer(getWindow(doc));
  return dt2.setData("text", text), dt2;
}
function parseKeyDef2(pointerMap, keys22) {
  let defs = [];
  do {
    let { descriptor, consumedLength, releasePrevious, releaseSelf = true } = readNextDescriptor(keys22, "pointer"), keyDef = pointerMap.find((p2) => p2.name === descriptor);
    keyDef && defs.push({ keyDef, releasePrevious, releaseSelf }), keys22 = keys22.slice(consumedLength);
  } while (keys22);
  return defs;
}
async function pointer(input2) {
  let { pointerMap } = this.config, actions = [];
  (Array.isArray(input2) ? input2 : [input2]).forEach((actionInput) => {
    typeof actionInput == "string" ? actions.push(...parseKeyDef2(pointerMap, actionInput)) : "keys" in actionInput ? actions.push(...parseKeyDef2(pointerMap, actionInput.keys).map((i2) => ({ ...actionInput, ...i2 }))) : actions.push(actionInput);
  });
  for (let i2 = 0; i2 < actions.length; i2++) await wait(this.config), await pointerAction(this, actions[i2]);
  this.system.pointer.resetClickCount();
}
async function pointerAction(instance, action) {
  var _previousPosition_caret, _previousPosition_caret1;
  let pointerName = "pointerName" in action && action.pointerName ? action.pointerName : "keyDef" in action ? instance.system.pointer.getPointerName(action.keyDef) : "mouse", previousPosition = instance.system.pointer.getPreviousPosition(pointerName);
  var _action_target, _action_coords, _action_node, _action_offset;
  let position = { target: (_action_target = action.target) !== null && _action_target !== void 0 ? _action_target : getPrevTarget(instance, previousPosition), coords: (_action_coords = action.coords) !== null && _action_coords !== void 0 ? _action_coords : previousPosition == null ? void 0 : previousPosition.coords, caret: { node: (_action_node = action.node) !== null && _action_node !== void 0 ? _action_node : hasCaretPosition(action) || previousPosition == null || (_previousPosition_caret = previousPosition.caret) === null || _previousPosition_caret === void 0 ? void 0 : _previousPosition_caret.node, offset: (_action_offset = action.offset) !== null && _action_offset !== void 0 ? _action_offset : hasCaretPosition(action) || previousPosition == null || (_previousPosition_caret1 = previousPosition.caret) === null || _previousPosition_caret1 === void 0 ? void 0 : _previousPosition_caret1.offset } };
  "keyDef" in action ? (instance.system.pointer.isKeyPressed(action.keyDef) && (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.release(instance, action.keyDef, position)), action.releasePrevious || (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.press(instance, action.keyDef, position), action.releaseSelf && (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.release(instance, action.keyDef, position)))) : (setLevelRef(instance, ApiLevel.Trigger), await instance.system.pointer.move(instance, pointerName, position));
}
function hasCaretPosition(action) {
  var _action_target, _ref;
  return !!((_ref = (_action_target = action.target) !== null && _action_target !== void 0 ? _action_target : action.node) !== null && _ref !== void 0 ? _ref : action.offset !== void 0);
}
function getPrevTarget(instance, position) {
  if (!position) throw new Error("This pointer has no previous position. Provide a target property!");
  var _position_target;
  return (_position_target = position.target) !== null && _position_target !== void 0 ? _position_target : instance.config.document.body;
}
async function clear(element) {
  if (!isEditable(element) || isDisabled2(element)) throw new Error("clear()` is only supported on editable elements.");
  if (focusElement(element), element.ownerDocument.activeElement !== element) throw new Error("The element to be cleared could not be focused.");
  if (selectAll(element), !isAllSelected(element)) throw new Error("The element content to be cleared could not be selected.");
  input(this, element, "", "deleteContentBackward");
}
async function selectOptions(select, values6) {
  return selectOptionsBase.call(this, true, select, values6);
}
async function deselectOptions(select, values6) {
  return selectOptionsBase.call(this, false, select, values6);
}
async function selectOptionsBase(newValue, select, values6) {
  if (!newValue && !select.multiple) throw getConfig$2().getElementError("Unable to deselect an option in a non-multiple select. Use selectOptions to change the selection instead.", select);
  let valArray = Array.isArray(values6) ? values6 : [values6], allOptions = Array.from(select.querySelectorAll('option, [role="option"]')), selectedOptions = valArray.map((val) => {
    if (typeof val != "string" && allOptions.includes(val)) return val;
    {
      let matchingOption = allOptions.find((o) => o.value === val || o.innerHTML === val);
      if (matchingOption) return matchingOption;
      throw getConfig$2().getElementError(`Value "${String(val)}" not found in options`, select);
    }
  }).filter((option) => !isDisabled2(option));
  if (isDisabled2(select) || !selectedOptions.length) return;
  let selectOption = (option) => {
    option.selected = newValue, this.dispatchUIEvent(select, "input", { bubbles: true, cancelable: false, composed: true }), this.dispatchUIEvent(select, "change");
  };
  if (isElementType(select, "select")) if (select.multiple) for (let option of selectedOptions) {
    let withPointerEvents = this.config.pointerEventsCheck === 0 ? true : hasPointerEvents(this, option);
    withPointerEvents && (this.dispatchUIEvent(option, "pointerover"), this.dispatchUIEvent(select, "pointerenter"), this.dispatchUIEvent(option, "mouseover"), this.dispatchUIEvent(select, "mouseenter"), this.dispatchUIEvent(option, "pointermove"), this.dispatchUIEvent(option, "mousemove"), this.dispatchUIEvent(option, "pointerdown"), this.dispatchUIEvent(option, "mousedown")), focusElement(select), withPointerEvents && (this.dispatchUIEvent(option, "pointerup"), this.dispatchUIEvent(option, "mouseup")), selectOption(option), withPointerEvents && this.dispatchUIEvent(option, "click"), await wait(this.config);
  }
  else if (selectedOptions.length === 1) {
    let withPointerEvents = this.config.pointerEventsCheck === 0 ? true : hasPointerEvents(this, select);
    withPointerEvents ? await this.click(select) : focusElement(select), selectOption(selectedOptions[0]), withPointerEvents && (this.dispatchUIEvent(select, "pointerover"), this.dispatchUIEvent(select, "pointerenter"), this.dispatchUIEvent(select, "mouseover"), this.dispatchUIEvent(select, "mouseenter"), this.dispatchUIEvent(select, "pointerup"), this.dispatchUIEvent(select, "mouseup"), this.dispatchUIEvent(select, "click")), await wait(this.config);
  } else throw getConfig$2().getElementError("Cannot select multiple options on a non-multiple select", select);
  else if (select.getAttribute("role") === "listbox") for (let option of selectedOptions) await this.click(option), await this.unhover(option);
  else throw getConfig$2().getElementError("Cannot select options on elements that are neither select nor listbox elements", select);
}
async function type(element, text, { skipClick = this.config.skipClick, skipAutoClose = this.config.skipAutoClose, initialSelectionStart, initialSelectionEnd } = {}) {
  element.disabled || (skipClick || await this.click(element), initialSelectionStart !== void 0 && setSelectionRange(element, initialSelectionStart, initialSelectionEnd ?? initialSelectionStart), await this.keyboard(text), skipAutoClose || await releaseAllKeys(this));
}
var fakeFiles = Symbol("files and value properties are mocked");
function restoreProperty(obj, prop, descriptor) {
  descriptor ? Object.defineProperty(obj, prop, descriptor) : delete obj[prop];
}
function setFiles(el, files) {
  var _el_fakeFiles;
  (_el_fakeFiles = el[fakeFiles]) === null || _el_fakeFiles === void 0 || _el_fakeFiles.restore();
  let typeDescr = Object.getOwnPropertyDescriptor(el, "type"), valueDescr = Object.getOwnPropertyDescriptor(el, "value"), filesDescr = Object.getOwnPropertyDescriptor(el, "files");
  function restore() {
    restoreProperty(el, "type", typeDescr), restoreProperty(el, "value", valueDescr), restoreProperty(el, "files", filesDescr);
  }
  el[fakeFiles] = { restore }, Object.defineProperties(el, { files: { configurable: true, get: () => files }, value: { configurable: true, get: () => files.length ? `C:\\fakepath\\${files[0].name}` : "", set(v2) {
    if (v2 === "") restore();
    else {
      var _valueDescr_set;
      valueDescr == null || (_valueDescr_set = valueDescr.set) === null || _valueDescr_set === void 0 || _valueDescr_set.call(el, v2);
    }
  } }, type: { configurable: true, get: () => "file", set(v2) {
    v2 !== "file" && (restore(), el.type = v2);
  } } });
}
async function upload(element, fileOrFiles) {
  let input2 = isElementType(element, "label") ? element.control : element;
  if (!input2 || !isElementType(input2, "input", { type: "file" })) throw new TypeError(`The ${input2 === element ? "given" : "associated"} ${input2 == null ? void 0 : input2.tagName} element does not accept file uploads`);
  if (isDisabled2(element)) return;
  let files = (Array.isArray(fileOrFiles) ? fileOrFiles : [fileOrFiles]).filter((file) => !this.config.applyAccept || isAcceptableFile(file, input2.accept)).slice(0, input2.multiple ? void 0 : 1), fileDialog = () => {
    var _input_files;
    files.length === ((_input_files = input2.files) === null || _input_files === void 0 ? void 0 : _input_files.length) && files.every((f2, i2) => {
      var _input_files2;
      return f2 === ((_input_files2 = input2.files) === null || _input_files2 === void 0 ? void 0 : _input_files2.item(i2));
    }) || (setFiles(input2, createFileList(getWindow(element), files)), this.dispatchUIEvent(input2, "input"), this.dispatchUIEvent(input2, "change"));
  };
  input2.addEventListener("fileDialog", fileDialog), await this.click(element), input2.removeEventListener("fileDialog", fileDialog);
}
function isAcceptableFile(file, accept) {
  if (!accept) return true;
  let wildcards = ["audio/*", "image/*", "video/*"];
  return accept.split(",").some((acceptToken) => acceptToken.startsWith(".") ? file.name.endsWith(acceptToken) : wildcards.includes(acceptToken) ? file.type.startsWith(acceptToken.substr(0, acceptToken.length - 1)) : file.type === acceptToken);
}
var userEventApi = { click, dblClick, tripleClick, hover, unhover, tab, keyboard, copy, cut, paste, pointer, clear, deselectOptions, selectOptions, type, upload };
function wrapAsync(implementation) {
  return getConfig$2().asyncWrapper(implementation);
}
var defaultOptionsDirect = { applyAccept: true, autoModify: true, delay: 0, document: globalThis.document, keyboardMap: defaultKeyMap, pointerMap: defaultKeyMap2, pointerEventsCheck: PointerEventsCheckLevel.EachApiCall, skipAutoClose: false, skipClick: false, skipHover: false, writeToClipboard: false, advanceTimers: () => Promise.resolve() }, defaultOptionsSetup = { ...defaultOptionsDirect, writeToClipboard: true };
function createConfig(options = {}, defaults = defaultOptionsSetup, node) {
  let document2 = getDocument2(options, node, defaults);
  return { ...defaults, ...options, document: document2 };
}
function setupMain(options = {}) {
  let config3 = createConfig(options);
  prepareDocument(config3.document);
  var _config_document_defaultView;
  let view = (_config_document_defaultView = config3.document.defaultView) !== null && _config_document_defaultView !== void 0 ? _config_document_defaultView : globalThis.window;
  return attachClipboardStubToView(view), createInstance(config3).api;
}
function setupDirect({ keyboardState, pointerState, ...options } = {}, node) {
  let config3 = createConfig(options, defaultOptionsDirect, node);
  prepareDocument(config3.document);
  var _ref;
  let system = (_ref = pointerState ?? keyboardState) !== null && _ref !== void 0 ? _ref : new System();
  return { api: createInstance(config3, system).api, system };
}
function setupSub(options) {
  return createInstance({ ...this.config, ...options }, this.system).api;
}
function wrapAndBindImpl(instance, impl) {
  function method(...args) {
    return setLevelRef(instance, ApiLevel.Call), wrapAsync(() => impl.apply(instance, args).then(async (ret) => (await wait(instance.config), ret)));
  }
  return Object.defineProperty(method, "name", { get: () => impl.name }), method;
}
function createInstance(config3, system = new System()) {
  let instance = {};
  return Object.assign(instance, { config: config3, dispatchEvent: dispatchEvent.bind(instance), dispatchUIEvent: dispatchUIEvent.bind(instance), system, levelRefs: {}, ...userEventApi }), { instance, api: { ...Object.fromEntries(Object.entries(userEventApi).map(([name, api]) => [name, wrapAndBindImpl(instance, api)])), setup: setupSub.bind(instance) } };
}
function getDocument2(options, node, defaults) {
  var _options_document, _ref;
  return (_ref = (_options_document = options.document) !== null && _options_document !== void 0 ? _options_document : node && getDocumentFromNode(node)) !== null && _ref !== void 0 ? _ref : defaults.document;
}
var directApi_exports = {};
__export(directApi_exports, { clear: () => clear2, click: () => click2, copy: () => copy2, cut: () => cut2, dblClick: () => dblClick2, deselectOptions: () => deselectOptions2, hover: () => hover2, keyboard: () => keyboard2, paste: () => paste2, pointer: () => pointer2, selectOptions: () => selectOptions2, tab: () => tab2, tripleClick: () => tripleClick2, type: () => type2, unhover: () => unhover2, upload: () => upload2 });
function clear2(element) {
  return setupDirect().api.clear(element);
}
function click2(element, options = {}) {
  return setupDirect(options, element).api.click(element);
}
function copy2(options = {}) {
  return setupDirect(options).api.copy();
}
function cut2(options = {}) {
  return setupDirect(options).api.cut();
}
function dblClick2(element, options = {}) {
  return setupDirect(options).api.dblClick(element);
}
function deselectOptions2(select, values6, options = {}) {
  return setupDirect(options).api.deselectOptions(select, values6);
}
function hover2(element, options = {}) {
  return setupDirect(options).api.hover(element);
}
async function keyboard2(text, options = {}) {
  let { api, system } = setupDirect(options);
  return api.keyboard(text).then(() => system);
}
async function pointer2(input2, options = {}) {
  let { api, system } = setupDirect(options);
  return api.pointer(input2).then(() => system);
}
function paste2(clipboardData, options) {
  return setupDirect(options).api.paste(clipboardData);
}
function selectOptions2(select, values6, options = {}) {
  return setupDirect(options).api.selectOptions(select, values6);
}
function tripleClick2(element, options = {}) {
  return setupDirect(options).api.tripleClick(element);
}
function type2(element, text, options = {}) {
  return setupDirect(options, element).api.type(element, text, options);
}
function unhover2(element, options = {}) {
  let { api, system } = setupDirect(options);
  return system.pointer.setMousePosition({ target: element }), api.unhover(element);
}
function upload2(element, fileOrFiles, options = {}) {
  return setupDirect(options).api.upload(element, fileOrFiles);
}
function tab2(options = {}) {
  return setupDirect().api.tab(options);
}
var userEvent = { ...directApi_exports, setup: setupMain };
function dedent(templ) {
  for (var values6 = [], _i2 = 1; _i2 < arguments.length; _i2++) values6[_i2 - 1] = arguments[_i2];
  var strings = Array.from(typeof templ == "string" ? [templ] : templ);
  strings[strings.length - 1] = strings[strings.length - 1].replace(/\r?\n([\t ]*)$/, "");
  var indentLengths = strings.reduce(function(arr, str) {
    var matches3 = str.match(/\n([\t ]+|(?!\s).)/g);
    return matches3 ? arr.concat(matches3.map(function(match) {
      var _a2, _b2;
      return (_b2 = (_a2 = match.match(/[\t ]/g)) === null || _a2 === void 0 ? void 0 : _a2.length) !== null && _b2 !== void 0 ? _b2 : 0;
    })) : arr;
  }, []);
  if (indentLengths.length) {
    var pattern_1 = new RegExp(`
[	 ]{` + Math.min.apply(Math, indentLengths) + "}", "g");
    strings = strings.map(function(str) {
      return str.replace(pattern_1, `
`);
    });
  }
  strings[0] = strings[0].replace(/^\r?\n/, "");
  var string2 = strings[0];
  return values6.forEach(function(value, i2) {
    var endentations = string2.match(/(?:^|\n)( *)$/), endentation = endentations ? endentations[1] : "", indentedValue = value;
    typeof value == "string" && value.includes(`
`) && (indentedValue = String(value).split(`
`).map(function(str, i22) {
      return i22 === 0 ? str : "" + endentation + str;
    }).join(`
`)), string2 += indentedValue + strings[i2 + 1];
  }), string2;
}
var esm_default = dedent;
var testingLibrary = instrument({ ...dom_esm_exports }, { intercept: (method, path) => path[0] === "fireEvent" || method.startsWith("find") || method.startsWith("waitFor") });
testingLibrary.screen = new Proxy(testingLibrary.screen, { get(target, prop, receiver) {
  return once.warn(esm_default`
          You are using Testing Library's \`screen\` object. Use \`within(canvasElement)\` instead.
          More info: https://storybook.js.org/docs/react/essentials/interactions
        `), Reflect.get(target, prop, receiver);
} });
var { buildQueries: buildQueries2, configure: configure2, createEvent: createEvent3, fireEvent: fireEvent2, findAllByAltText: findAllByAltText2, findAllByDisplayValue: findAllByDisplayValue2, findAllByLabelText: findAllByLabelText2, findAllByPlaceholderText: findAllByPlaceholderText2, findAllByRole: findAllByRole2, findAllByTestId: findAllByTestId2, findAllByText: findAllByText2, findAllByTitle: findAllByTitle2, findByAltText: findByAltText2, findByDisplayValue: findByDisplayValue2, findByLabelText: findByLabelText2, findByPlaceholderText: findByPlaceholderText2, findByRole: findByRole2, findByTestId: findByTestId2, findByText: findByText2, findByTitle: findByTitle2, getAllByAltText: getAllByAltText2, getAllByDisplayValue: getAllByDisplayValue2, getAllByLabelText: getAllByLabelText2, getAllByPlaceholderText: getAllByPlaceholderText2, getAllByRole: getAllByRole2, getAllByTestId: getAllByTestId2, getAllByText: getAllByText2, getAllByTitle: getAllByTitle2, getByAltText: getByAltText2, getByDisplayValue: getByDisplayValue2, getByLabelText: getByLabelText2, getByPlaceholderText: getByPlaceholderText2, getByRole: getByRole2, getByTestId: getByTestId2, getByText: getByText2, getByTitle: getByTitle2, getConfig: getConfig2, getDefaultNormalizer: getDefaultNormalizer2, getElementError: getElementError2, getNodeText: getNodeText2, getQueriesForElement: getQueriesForElement2, getRoles: getRoles2, getSuggestedQuery: getSuggestedQuery2, isInaccessible: isInaccessible2, logDOM: logDOM2, logRoles: logRoles2, prettyDOM: prettyDOM2, queries: queries2, queryAllByAltText: queryAllByAltText2, queryAllByAttribute: queryAllByAttribute2, queryAllByDisplayValue: queryAllByDisplayValue2, queryAllByLabelText: queryAllByLabelText2, queryAllByPlaceholderText: queryAllByPlaceholderText2, queryAllByRole: queryAllByRole2, queryAllByTestId: queryAllByTestId2, queryAllByText: queryAllByText2, queryAllByTitle: queryAllByTitle2, queryByAltText: queryByAltText2, queryByAttribute: queryByAttribute2, queryByDisplayValue: queryByDisplayValue2, queryByLabelText: queryByLabelText2, queryByPlaceholderText: queryByPlaceholderText2, queryByRole: queryByRole2, queryByTestId: queryByTestId2, queryByText: queryByText2, queryByTitle: queryByTitle2, queryHelpers: queryHelpers2, screen: screen2, waitFor: waitFor2, waitForElementToBeRemoved: waitForElementToBeRemoved2, within, prettyFormat: prettyFormat2 } = testingLibrary, { userEvent: userEvent2 } = instrument({ userEvent }, { intercept: true });
instrument({ expect: expect2 }, { getKeys: (obj, depth) => {
  let privateApi = ["assert", "__methods", "__flags", "_obj"];
  if (obj.constructor === chai_default.Assertion) {
    let keys22 = Object.keys(Object.getPrototypeOf(obj)).filter((it2) => !privateApi.includes(it2));
    return depth > 2 ? keys22 : [...keys22, "not"];
  }
  return Object.keys(obj);
}, intercept: (method) => method !== "expect" });
var resetAllMocksLoader = ({ parameters }) => {
  var _a2, _b2, _c2;
  ((_a2 = parameters == null ? void 0 : parameters.test) == null ? void 0 : _a2.mockReset) === true ? resetAllMocks() : ((_b2 = parameters == null ? void 0 : parameters.test) == null ? void 0 : _b2.clearMocks) === true ? clearAllMocks() : ((_c2 = parameters == null ? void 0 : parameters.test) == null ? void 0 : _c2.restoreMocks) !== false && restoreAllMocks();
}, traverseArgs = (value, depth = 0, key) => {
  var _a2;
  if (depth > 5 || value == null) return value;
  if (isMockFunction(value)) return key && value.mockName(key), value;
  if (typeof value == "function" && "isAction" in value && value.isAction && !("implicit" in value && value.implicit)) {
    let mock = fn2(value);
    return key && mock.mockName(key), mock;
  }
  if (Array.isArray(value)) return depth++, value.map((item) => traverseArgs(item, depth));
  if (typeof value == "object" && value.constructor === Object) {
    depth++;
    for (let [k2, v2] of Object.entries(value)) ((_a2 = Object.getOwnPropertyDescriptor(value, k2)) == null ? void 0 : _a2.writable) && (value[k2] = traverseArgs(v2, depth, k2));
    return value;
  }
  return value;
}, nameSpiesAndWrapActionsInSpies = ({ initialArgs }) => {
  traverseArgs(initialArgs);
}, enhanceContext = (context) => {
  globalThis.HTMLElement && context.canvasElement instanceof globalThis.HTMLElement && (context.canvas = within(context.canvasElement));
};
scope.__STORYBOOK_TEST_LOADERS__ = [resetAllMocksLoader, nameSpiesAndWrapActionsInSpies, enhanceContext];
scope.__STORYBOOK_TEST_ON_MOCK_CALL__ = onMockCall;
var build = {};
var ansiStyles = { exports: {} };
ansiStyles.exports;
(function(module2) {
  const ANSI_BACKGROUND_OFFSET = 10;
  const wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
  const wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
  function assembleStyles() {
    const codes = /* @__PURE__ */ new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        // 21 isn't widely supported and 22 does the same thing
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        overline: [53, 55],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        // Bright color
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        // Bright color
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.gray = styles.color.blackBright;
    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    styles.color.grey = styles.color.blackBright;
    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles[styleName] = {
          open: `\x1B[${style[0]}m`,
          close: `\x1B[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles, "codes", {
      value: codes,
      enumerable: false
    });
    styles.color.close = "\x1B[39m";
    styles.bgColor.close = "\x1B[49m";
    styles.color.ansi256 = wrapAnsi256();
    styles.color.ansi16m = wrapAnsi16m();
    styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
    styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
    Object.defineProperties(styles, {
      rgbToAnsi256: {
        value: (red, green, blue) => {
          if (red === green && green === blue) {
            if (red < 8) {
              return 16;
            }
            if (red > 248) {
              return 231;
            }
            return Math.round((red - 8) / 247 * 24) + 232;
          }
          return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
        },
        enumerable: false
      },
      hexToRgb: {
        value: (hex) => {
          const matches3 = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(hex.toString(16));
          if (!matches3) {
            return [0, 0, 0];
          }
          let { colorString } = matches3.groups;
          if (colorString.length === 3) {
            colorString = colorString.split("").map((character) => character + character).join("");
          }
          const integer = Number.parseInt(colorString, 16);
          return [
            integer >> 16 & 255,
            integer >> 8 & 255,
            integer & 255
          ];
        },
        enumerable: false
      },
      hexToAnsi256: {
        value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
        enumerable: false
      }
    });
    return styles;
  }
  Object.defineProperty(module2, "exports", {
    enumerable: true,
    get: assembleStyles
  });
})(ansiStyles);
var ansiStylesExports = ansiStyles.exports;
var collections = {};
Object.defineProperty(collections, "__esModule", {
  value: true
});
collections.printIteratorEntries = printIteratorEntries;
collections.printIteratorValues = printIteratorValues;
collections.printListItems = printListItems;
collections.printObjectProperties = printObjectProperties;
const getKeysOfEnumerableProperties = (object, compareKeys) => {
  const keys7 = Object.keys(object).sort(compareKeys);
  if (Object.getOwnPropertySymbols) {
    Object.getOwnPropertySymbols(object).forEach((symbol) => {
      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
        keys7.push(symbol);
      }
    });
  }
  return keys7;
};
function printIteratorEntries(iterator, config3, indentation, depth, refs, printer2, separator = ": ") {
  let result = "";
  let current = iterator.next();
  if (!current.done) {
    result += config3.spacingOuter;
    const indentationNext = indentation + config3.indent;
    while (!current.done) {
      const name = printer2(
        current.value[0],
        config3,
        indentationNext,
        depth,
        refs
      );
      const value = printer2(
        current.value[1],
        config3,
        indentationNext,
        depth,
        refs
      );
      result += indentationNext + name + separator + value;
      current = iterator.next();
      if (!current.done) {
        result += "," + config3.spacingInner;
      } else if (!config3.min) {
        result += ",";
      }
    }
    result += config3.spacingOuter + indentation;
  }
  return result;
}
function printIteratorValues(iterator, config3, indentation, depth, refs, printer2) {
  let result = "";
  let current = iterator.next();
  if (!current.done) {
    result += config3.spacingOuter;
    const indentationNext = indentation + config3.indent;
    while (!current.done) {
      result += indentationNext + printer2(current.value, config3, indentationNext, depth, refs);
      current = iterator.next();
      if (!current.done) {
        result += "," + config3.spacingInner;
      } else if (!config3.min) {
        result += ",";
      }
    }
    result += config3.spacingOuter + indentation;
  }
  return result;
}
function printListItems(list, config3, indentation, depth, refs, printer2) {
  let result = "";
  if (list.length) {
    result += config3.spacingOuter;
    const indentationNext = indentation + config3.indent;
    for (let i2 = 0; i2 < list.length; i2++) {
      result += indentationNext;
      if (i2 in list) {
        result += printer2(list[i2], config3, indentationNext, depth, refs);
      }
      if (i2 < list.length - 1) {
        result += "," + config3.spacingInner;
      } else if (!config3.min) {
        result += ",";
      }
    }
    result += config3.spacingOuter + indentation;
  }
  return result;
}
function printObjectProperties(val, config3, indentation, depth, refs, printer2) {
  let result = "";
  const keys7 = getKeysOfEnumerableProperties(val, config3.compareKeys);
  if (keys7.length) {
    result += config3.spacingOuter;
    const indentationNext = indentation + config3.indent;
    for (let i2 = 0; i2 < keys7.length; i2++) {
      const key = keys7[i2];
      const name = printer2(key, config3, indentationNext, depth, refs);
      const value = printer2(val[key], config3, indentationNext, depth, refs);
      result += indentationNext + name + ": " + value;
      if (i2 < keys7.length - 1) {
        result += "," + config3.spacingInner;
      } else if (!config3.min) {
        result += ",";
      }
    }
    result += config3.spacingOuter + indentation;
  }
  return result;
}
var AsymmetricMatcher = {};
Object.defineProperty(AsymmetricMatcher, "__esModule", {
  value: true
});
AsymmetricMatcher.test = AsymmetricMatcher.serialize = AsymmetricMatcher.default = void 0;
var _collections$3 = collections;
var global$2 = function() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  } else if (typeof global$2 !== "undefined") {
    return global$2;
  } else if (typeof self !== "undefined") {
    return self;
  } else if (typeof window !== "undefined") {
    return window;
  } else {
    return Function("return this")();
  }
}();
var Symbol$2 = global$2["jest-symbol-do-not-touch"] || global$2.Symbol;
const asymmetricMatcher = typeof Symbol$2 === "function" && Symbol$2.for ? Symbol$2.for("jest.asymmetricMatcher") : 1267621;
const SPACE$2 = " ";
const serialize$6 = (val, config3, indentation, depth, refs, printer2) => {
  const stringedValue = val.toString();
  if (stringedValue === "ArrayContaining" || stringedValue === "ArrayNotContaining") {
    if (++depth > config3.maxDepth) {
      return "[" + stringedValue + "]";
    }
    return stringedValue + SPACE$2 + "[" + (0, _collections$3.printListItems)(
      val.sample,
      config3,
      indentation,
      depth,
      refs,
      printer2
    ) + "]";
  }
  if (stringedValue === "ObjectContaining" || stringedValue === "ObjectNotContaining") {
    if (++depth > config3.maxDepth) {
      return "[" + stringedValue + "]";
    }
    return stringedValue + SPACE$2 + "{" + (0, _collections$3.printObjectProperties)(
      val.sample,
      config3,
      indentation,
      depth,
      refs,
      printer2
    ) + "}";
  }
  if (stringedValue === "StringMatching" || stringedValue === "StringNotMatching") {
    return stringedValue + SPACE$2 + printer2(val.sample, config3, indentation, depth, refs);
  }
  if (stringedValue === "StringContaining" || stringedValue === "StringNotContaining") {
    return stringedValue + SPACE$2 + printer2(val.sample, config3, indentation, depth, refs);
  }
  return val.toAsymmetricMatcher();
};
AsymmetricMatcher.serialize = serialize$6;
const test$6 = (val) => val && val.$$typeof === asymmetricMatcher;
AsymmetricMatcher.test = test$6;
const plugin$6 = {
  serialize: serialize$6,
  test: test$6
};
var _default$2q = plugin$6;
AsymmetricMatcher.default = _default$2q;
var ConvertAnsi = {};
var ansiRegex = ({ onlyFirst = false } = {}) => {
  const pattern = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
  ].join("|");
  return new RegExp(pattern, onlyFirst ? void 0 : "g");
};
Object.defineProperty(ConvertAnsi, "__esModule", {
  value: true
});
ConvertAnsi.test = ConvertAnsi.serialize = ConvertAnsi.default = void 0;
var _ansiRegex = _interopRequireDefault$d(ansiRegex);
var _ansiStyles$1 = _interopRequireDefault$d(ansiStylesExports);
function _interopRequireDefault$d(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const toHumanReadableAnsi = (text) => text.replace((0, _ansiRegex.default)(), (match) => {
  switch (match) {
    case _ansiStyles$1.default.red.close:
    case _ansiStyles$1.default.green.close:
    case _ansiStyles$1.default.cyan.close:
    case _ansiStyles$1.default.gray.close:
    case _ansiStyles$1.default.white.close:
    case _ansiStyles$1.default.yellow.close:
    case _ansiStyles$1.default.bgRed.close:
    case _ansiStyles$1.default.bgGreen.close:
    case _ansiStyles$1.default.bgYellow.close:
    case _ansiStyles$1.default.inverse.close:
    case _ansiStyles$1.default.dim.close:
    case _ansiStyles$1.default.bold.close:
    case _ansiStyles$1.default.reset.open:
    case _ansiStyles$1.default.reset.close:
      return "</>";
    case _ansiStyles$1.default.red.open:
      return "<red>";
    case _ansiStyles$1.default.green.open:
      return "<green>";
    case _ansiStyles$1.default.cyan.open:
      return "<cyan>";
    case _ansiStyles$1.default.gray.open:
      return "<gray>";
    case _ansiStyles$1.default.white.open:
      return "<white>";
    case _ansiStyles$1.default.yellow.open:
      return "<yellow>";
    case _ansiStyles$1.default.bgRed.open:
      return "<bgRed>";
    case _ansiStyles$1.default.bgGreen.open:
      return "<bgGreen>";
    case _ansiStyles$1.default.bgYellow.open:
      return "<bgYellow>";
    case _ansiStyles$1.default.inverse.open:
      return "<inverse>";
    case _ansiStyles$1.default.dim.open:
      return "<dim>";
    case _ansiStyles$1.default.bold.open:
      return "<bold>";
    default:
      return "";
  }
});
const test$5 = (val) => typeof val === "string" && !!val.match((0, _ansiRegex.default)());
ConvertAnsi.test = test$5;
const serialize$5 = (val, config3, indentation, depth, refs, printer2) => printer2(toHumanReadableAnsi(val), config3, indentation, depth, refs);
ConvertAnsi.serialize = serialize$5;
const plugin$5 = {
  serialize: serialize$5,
  test: test$5
};
var _default$2p = plugin$5;
ConvertAnsi.default = _default$2p;
var DOMCollection$1 = {};
Object.defineProperty(DOMCollection$1, "__esModule", {
  value: true
});
DOMCollection$1.test = DOMCollection$1.serialize = DOMCollection$1.default = void 0;
var _collections$2 = collections;
const SPACE$1 = " ";
const OBJECT_NAMES = ["DOMStringMap", "NamedNodeMap"];
const ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
const testName = (name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
const test$4 = (val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
DOMCollection$1.test = test$4;
const isNamedNodeMap = (collection) => collection.constructor.name === "NamedNodeMap";
const serialize$4 = (collection, config3, indentation, depth, refs, printer2) => {
  const name = collection.constructor.name;
  if (++depth > config3.maxDepth) {
    return "[" + name + "]";
  }
  return (config3.min ? "" : name + SPACE$1) + (OBJECT_NAMES.indexOf(name) !== -1 ? "{" + (0, _collections$2.printObjectProperties)(
    isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {
      props[attribute.name] = attribute.value;
      return props;
    }, {}) : { ...collection },
    config3,
    indentation,
    depth,
    refs,
    printer2
  ) + "}" : "[" + (0, _collections$2.printListItems)(
    Array.from(collection),
    config3,
    indentation,
    depth,
    refs,
    printer2
  ) + "]");
};
DOMCollection$1.serialize = serialize$4;
const plugin$4 = {
  serialize: serialize$4,
  test: test$4
};
var _default$2o = plugin$4;
DOMCollection$1.default = _default$2o;
var DOMElement = {};
var markup = {};
var escapeHTML$2 = {};
Object.defineProperty(escapeHTML$2, "__esModule", {
  value: true
});
escapeHTML$2.default = escapeHTML$1;
function escapeHTML$1(str) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
Object.defineProperty(markup, "__esModule", {
  value: true
});
markup.printText = markup.printProps = markup.printElementAsLeaf = markup.printElement = markup.printComment = markup.printChildren = void 0;
var _escapeHTML = _interopRequireDefault$c(escapeHTML$2);
function _interopRequireDefault$c(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const printProps$1 = (keys7, props, config3, indentation, depth, refs, printer2) => {
  const indentationNext = indentation + config3.indent;
  const colors = config3.colors;
  return keys7.map((key) => {
    const value = props[key];
    let printed = printer2(value, config3, indentationNext, depth, refs);
    if (typeof value !== "string") {
      if (printed.indexOf("\n") !== -1) {
        printed = config3.spacingOuter + indentationNext + printed + config3.spacingOuter + indentation;
      }
      printed = "{" + printed + "}";
    }
    return config3.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
  }).join("");
};
markup.printProps = printProps$1;
const printChildren$1 = (children, config3, indentation, depth, refs, printer2) => children.map(
  (child) => config3.spacingOuter + indentation + (typeof child === "string" ? printText$1(child, config3) : printer2(child, config3, indentation, depth, refs))
).join("");
markup.printChildren = printChildren$1;
const printText$1 = (text, config3) => {
  const contentColor = config3.colors.content;
  return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
};
markup.printText = printText$1;
const printComment$1 = (comment, config3) => {
  const commentColor = config3.colors.comment;
  return commentColor.open + "<!--" + (0, _escapeHTML.default)(comment) + "-->" + commentColor.close;
};
markup.printComment = printComment$1;
const printElement$1 = (type3, printedProps, printedChildren, config3, indentation) => {
  const tagColor = config3.colors.tag;
  return tagColor.open + "<" + type3 + (printedProps && tagColor.close + printedProps + config3.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config3.spacingOuter + indentation + tagColor.open + "</" + type3 : (printedProps && !config3.min ? "" : " ") + "/") + ">" + tagColor.close;
};
markup.printElement = printElement$1;
const printElementAsLeaf$1 = (type3, config3) => {
  const tagColor = config3.colors.tag;
  return tagColor.open + "<" + type3 + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
};
markup.printElementAsLeaf = printElementAsLeaf$1;
Object.defineProperty(DOMElement, "__esModule", {
  value: true
});
DOMElement.test = DOMElement.serialize = DOMElement.default = void 0;
var _markup$2 = markup;
const ELEMENT_NODE$2 = 1;
const TEXT_NODE$2 = 3;
const COMMENT_NODE$2 = 8;
const FRAGMENT_NODE$1 = 11;
const ELEMENT_REGEXP$1 = /^((HTML|SVG)\w*)?Element$/;
const testHasAttribute = (val) => {
  try {
    return typeof val.hasAttribute === "function" && val.hasAttribute("is");
  } catch {
    return false;
  }
};
const testNode$1 = (val) => {
  const constructorName = val.constructor.name;
  const { nodeType, tagName } = val;
  const isCustomElement2 = typeof tagName === "string" && tagName.includes("-") || testHasAttribute(val);
  return nodeType === ELEMENT_NODE$2 && (ELEMENT_REGEXP$1.test(constructorName) || isCustomElement2) || nodeType === TEXT_NODE$2 && constructorName === "Text" || nodeType === COMMENT_NODE$2 && constructorName === "Comment" || nodeType === FRAGMENT_NODE$1 && constructorName === "DocumentFragment";
};
const test$3 = (val) => {
  var _val$constructor;
  return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode$1(val);
};
DOMElement.test = test$3;
function nodeIsText$1(node) {
  return node.nodeType === TEXT_NODE$2;
}
function nodeIsComment$1(node) {
  return node.nodeType === COMMENT_NODE$2;
}
function nodeIsFragment$1(node) {
  return node.nodeType === FRAGMENT_NODE$1;
}
const serialize$3 = (node, config3, indentation, depth, refs, printer2) => {
  if (nodeIsText$1(node)) {
    return (0, _markup$2.printText)(node.data, config3);
  }
  if (nodeIsComment$1(node)) {
    return (0, _markup$2.printComment)(node.data, config3);
  }
  const type3 = nodeIsFragment$1(node) ? "DocumentFragment" : node.tagName.toLowerCase();
  if (++depth > config3.maxDepth) {
    return (0, _markup$2.printElementAsLeaf)(type3, config3);
  }
  return (0, _markup$2.printElement)(
    type3,
    (0, _markup$2.printProps)(
      nodeIsFragment$1(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),
      nodeIsFragment$1(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
        props[attribute.name] = attribute.value;
        return props;
      }, {}),
      config3,
      indentation + config3.indent,
      depth,
      refs,
      printer2
    ),
    (0, _markup$2.printChildren)(
      Array.prototype.slice.call(node.childNodes || node.children),
      config3,
      indentation + config3.indent,
      depth,
      refs,
      printer2
    ),
    config3,
    indentation
  );
};
DOMElement.serialize = serialize$3;
const plugin$3 = {
  serialize: serialize$3,
  test: test$3
};
var _default$2n = plugin$3;
DOMElement.default = _default$2n;
var Immutable = {};
Object.defineProperty(Immutable, "__esModule", {
  value: true
});
Immutable.test = Immutable.serialize = Immutable.default = void 0;
var _collections$1 = collections;
const IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
const IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
const IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
const IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
const IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
const IS_RECORD_SENTINEL = "@@__IMMUTABLE_RECORD__@@";
const IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
const IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
const IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
const getImmutableName = (name) => "Immutable." + name;
const printAsLeaf = (name) => "[" + name + "]";
const SPACE = " ";
const LAZY = "…";
const printImmutableEntries = (val, config3, indentation, depth, refs, printer2, type3) => ++depth > config3.maxDepth ? printAsLeaf(getImmutableName(type3)) : getImmutableName(type3) + SPACE + "{" + (0, _collections$1.printIteratorEntries)(
  val.entries(),
  config3,
  indentation,
  depth,
  refs,
  printer2
) + "}";
function getRecordEntries(val) {
  let i2 = 0;
  return {
    next() {
      if (i2 < val._keys.length) {
        const key = val._keys[i2++];
        return {
          done: false,
          value: [key, val.get(key)]
        };
      }
      return {
        done: true,
        value: void 0
      };
    }
  };
}
const printImmutableRecord = (val, config3, indentation, depth, refs, printer2) => {
  const name = getImmutableName(val._name || "Record");
  return ++depth > config3.maxDepth ? printAsLeaf(name) : name + SPACE + "{" + (0, _collections$1.printIteratorEntries)(
    getRecordEntries(val),
    config3,
    indentation,
    depth,
    refs,
    printer2
  ) + "}";
};
const printImmutableSeq = (val, config3, indentation, depth, refs, printer2) => {
  const name = getImmutableName("Seq");
  if (++depth > config3.maxDepth) {
    return printAsLeaf(name);
  }
  if (val[IS_KEYED_SENTINEL]) {
    return name + SPACE + "{" + // from Immutable collection of entries or from ECMAScript object
    (val._iter || val._object ? (0, _collections$1.printIteratorEntries)(
      val.entries(),
      config3,
      indentation,
      depth,
      refs,
      printer2
    ) : LAZY) + "}";
  }
  return name + SPACE + "[" + (val._iter || // from Immutable collection of values
  val._array || // from ECMAScript array
  val._collection || // from ECMAScript collection in immutable v4
  val._iterable ? (0, _collections$1.printIteratorValues)(
    val.values(),
    config3,
    indentation,
    depth,
    refs,
    printer2
  ) : LAZY) + "]";
};
const printImmutableValues = (val, config3, indentation, depth, refs, printer2, type3) => ++depth > config3.maxDepth ? printAsLeaf(getImmutableName(type3)) : getImmutableName(type3) + SPACE + "[" + (0, _collections$1.printIteratorValues)(
  val.values(),
  config3,
  indentation,
  depth,
  refs,
  printer2
) + "]";
const serialize$2 = (val, config3, indentation, depth, refs, printer2) => {
  if (val[IS_MAP_SENTINEL]) {
    return printImmutableEntries(
      val,
      config3,
      indentation,
      depth,
      refs,
      printer2,
      val[IS_ORDERED_SENTINEL] ? "OrderedMap" : "Map"
    );
  }
  if (val[IS_LIST_SENTINEL]) {
    return printImmutableValues(
      val,
      config3,
      indentation,
      depth,
      refs,
      printer2,
      "List"
    );
  }
  if (val[IS_SET_SENTINEL]) {
    return printImmutableValues(
      val,
      config3,
      indentation,
      depth,
      refs,
      printer2,
      val[IS_ORDERED_SENTINEL] ? "OrderedSet" : "Set"
    );
  }
  if (val[IS_STACK_SENTINEL]) {
    return printImmutableValues(
      val,
      config3,
      indentation,
      depth,
      refs,
      printer2,
      "Stack"
    );
  }
  if (val[IS_SEQ_SENTINEL]) {
    return printImmutableSeq(val, config3, indentation, depth, refs, printer2);
  }
  return printImmutableRecord(val, config3, indentation, depth, refs, printer2);
};
Immutable.serialize = serialize$2;
const test$2 = (val) => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
Immutable.test = test$2;
const plugin$2 = {
  serialize: serialize$2,
  test: test$2
};
var _default$2m = plugin$2;
Immutable.default = _default$2m;
var ReactElement = {};
var reactIs = { exports: {} };
var reactIs_production_min = {};
/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$1 = 60103, c$1 = 60106, d$1 = 60107, e = 60108, f$1 = 60114, g$1 = 60109, h = 60110, k$3 = 60112, l = 60113, m = 60120, n = 60115, p$1 = 60116, q$1 = 60121, r = 60122, u = 60117, v$1 = 60129, w = 60131;
if ("function" === typeof Symbol && Symbol.for) {
  var x$1 = Symbol.for;
  b$1 = x$1("react.element");
  c$1 = x$1("react.portal");
  d$1 = x$1("react.fragment");
  e = x$1("react.strict_mode");
  f$1 = x$1("react.profiler");
  g$1 = x$1("react.provider");
  h = x$1("react.context");
  k$3 = x$1("react.forward_ref");
  l = x$1("react.suspense");
  m = x$1("react.suspense_list");
  n = x$1("react.memo");
  p$1 = x$1("react.lazy");
  q$1 = x$1("react.block");
  r = x$1("react.server.block");
  u = x$1("react.fundamental");
  v$1 = x$1("react.debug_trace_mode");
  w = x$1("react.legacy_hidden");
}
function y(a) {
  if ("object" === typeof a && null !== a) {
    var t = a.$$typeof;
    switch (t) {
      case b$1:
        switch (a = a.type, a) {
          case d$1:
          case f$1:
          case e:
          case l:
          case m:
            return a;
          default:
            switch (a = a && a.$$typeof, a) {
              case h:
              case k$3:
              case p$1:
              case n:
              case g$1:
                return a;
              default:
                return t;
            }
        }
      case c$1:
        return t;
    }
  }
}
var z$1 = g$1, A$1 = b$1, B$1 = k$3, C$1 = d$1, D$1 = p$1, E$1 = n, F$1 = c$1, G$1 = f$1, H$1 = e, I$1 = l;
reactIs_production_min.ContextConsumer = h;
reactIs_production_min.ContextProvider = z$1;
reactIs_production_min.Element = A$1;
reactIs_production_min.ForwardRef = B$1;
reactIs_production_min.Fragment = C$1;
reactIs_production_min.Lazy = D$1;
reactIs_production_min.Memo = E$1;
reactIs_production_min.Portal = F$1;
reactIs_production_min.Profiler = G$1;
reactIs_production_min.StrictMode = H$1;
reactIs_production_min.Suspense = I$1;
reactIs_production_min.isAsyncMode = function() {
  return false;
};
reactIs_production_min.isConcurrentMode = function() {
  return false;
};
reactIs_production_min.isContextConsumer = function(a) {
  return y(a) === h;
};
reactIs_production_min.isContextProvider = function(a) {
  return y(a) === g$1;
};
reactIs_production_min.isElement = function(a) {
  return "object" === typeof a && null !== a && a.$$typeof === b$1;
};
reactIs_production_min.isForwardRef = function(a) {
  return y(a) === k$3;
};
reactIs_production_min.isFragment = function(a) {
  return y(a) === d$1;
};
reactIs_production_min.isLazy = function(a) {
  return y(a) === p$1;
};
reactIs_production_min.isMemo = function(a) {
  return y(a) === n;
};
reactIs_production_min.isPortal = function(a) {
  return y(a) === c$1;
};
reactIs_production_min.isProfiler = function(a) {
  return y(a) === f$1;
};
reactIs_production_min.isStrictMode = function(a) {
  return y(a) === e;
};
reactIs_production_min.isSuspense = function(a) {
  return y(a) === l;
};
reactIs_production_min.isValidElementType = function(a) {
  return "string" === typeof a || "function" === typeof a || a === d$1 || a === f$1 || a === v$1 || a === e || a === l || a === m || a === w || "object" === typeof a && null !== a && (a.$$typeof === p$1 || a.$$typeof === n || a.$$typeof === g$1 || a.$$typeof === h || a.$$typeof === k$3 || a.$$typeof === u || a.$$typeof === q$1 || a[0] === r) ? true : false;
};
reactIs_production_min.typeOf = y;
{
  reactIs.exports = reactIs_production_min;
}
var reactIsExports = reactIs.exports;
Object.defineProperty(ReactElement, "__esModule", {
  value: true
});
ReactElement.test = ReactElement.serialize = ReactElement.default = void 0;
var ReactIs = _interopRequireWildcard(reactIsExports);
var _markup$1 = markup;
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
  var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache = function(nodeInterop2) {
    return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return { default: obj };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const getChildren = (arg, children = []) => {
  if (Array.isArray(arg)) {
    arg.forEach((item) => {
      getChildren(item, children);
    });
  } else if (arg != null && arg !== false) {
    children.push(arg);
  }
  return children;
};
const getType = (element) => {
  const type3 = element.type;
  if (typeof type3 === "string") {
    return type3;
  }
  if (typeof type3 === "function") {
    return type3.displayName || type3.name || "Unknown";
  }
  if (ReactIs.isFragment(element)) {
    return "React.Fragment";
  }
  if (ReactIs.isSuspense(element)) {
    return "React.Suspense";
  }
  if (typeof type3 === "object" && type3 !== null) {
    if (ReactIs.isContextProvider(element)) {
      return "Context.Provider";
    }
    if (ReactIs.isContextConsumer(element)) {
      return "Context.Consumer";
    }
    if (ReactIs.isForwardRef(element)) {
      if (type3.displayName) {
        return type3.displayName;
      }
      const functionName = type3.render.displayName || type3.render.name || "";
      return functionName !== "" ? "ForwardRef(" + functionName + ")" : "ForwardRef";
    }
    if (ReactIs.isMemo(element)) {
      const functionName = type3.displayName || type3.type.displayName || type3.type.name || "";
      return functionName !== "" ? "Memo(" + functionName + ")" : "Memo";
    }
  }
  return "UNDEFINED";
};
const getPropKeys$1 = (element) => {
  const { props } = element;
  return Object.keys(props).filter((key) => key !== "children" && props[key] !== void 0).sort();
};
const serialize$1 = (element, config3, indentation, depth, refs, printer2) => ++depth > config3.maxDepth ? (0, _markup$1.printElementAsLeaf)(getType(element), config3) : (0, _markup$1.printElement)(
  getType(element),
  (0, _markup$1.printProps)(
    getPropKeys$1(element),
    element.props,
    config3,
    indentation + config3.indent,
    depth,
    refs,
    printer2
  ),
  (0, _markup$1.printChildren)(
    getChildren(element.props.children),
    config3,
    indentation + config3.indent,
    depth,
    refs,
    printer2
  ),
  config3,
  indentation
);
ReactElement.serialize = serialize$1;
const test$1 = (val) => val != null && ReactIs.isElement(val);
ReactElement.test = test$1;
const plugin$1 = {
  serialize: serialize$1,
  test: test$1
};
var _default$2l = plugin$1;
ReactElement.default = _default$2l;
var ReactTestComponent = {};
Object.defineProperty(ReactTestComponent, "__esModule", {
  value: true
});
ReactTestComponent.test = ReactTestComponent.serialize = ReactTestComponent.default = void 0;
var _markup = markup;
var global$1 = function() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  } else if (typeof global$1 !== "undefined") {
    return global$1;
  } else if (typeof self !== "undefined") {
    return self;
  } else if (typeof window !== "undefined") {
    return window;
  } else {
    return Function("return this")();
  }
}();
var Symbol$1 = global$1["jest-symbol-do-not-touch"] || global$1.Symbol;
const testSymbol = typeof Symbol$1 === "function" && Symbol$1.for ? Symbol$1.for("react.test.json") : 245830487;
const getPropKeys = (object) => {
  const { props } = object;
  return props ? Object.keys(props).filter((key) => props[key] !== void 0).sort() : [];
};
const serialize = (object, config3, indentation, depth, refs, printer2) => ++depth > config3.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config3) : (0, _markup.printElement)(
  object.type,
  object.props ? (0, _markup.printProps)(
    getPropKeys(object),
    object.props,
    config3,
    indentation + config3.indent,
    depth,
    refs,
    printer2
  ) : "",
  object.children ? (0, _markup.printChildren)(
    object.children,
    config3,
    indentation + config3.indent,
    depth,
    refs,
    printer2
  ) : "",
  config3,
  indentation
);
ReactTestComponent.serialize = serialize;
const test = (val) => val && val.$$typeof === testSymbol;
ReactTestComponent.test = test;
const plugin = {
  serialize,
  test
};
var _default$2k = plugin;
ReactTestComponent.default = _default$2k;
Object.defineProperty(build, "__esModule", {
  value: true
});
build.default = build.DEFAULT_OPTIONS = void 0;
var format_1 = build.format = format;
var plugins_1 = build.plugins = void 0;
var _ansiStyles = _interopRequireDefault$b(ansiStylesExports);
var _collections = collections;
var _AsymmetricMatcher = _interopRequireDefault$b(
  AsymmetricMatcher
);
var _ConvertAnsi = _interopRequireDefault$b(ConvertAnsi);
var _DOMCollection = _interopRequireDefault$b(DOMCollection$1);
var _DOMElement = _interopRequireDefault$b(DOMElement);
var _Immutable = _interopRequireDefault$b(Immutable);
var _ReactElement = _interopRequireDefault$b(ReactElement);
var _ReactTestComponent = _interopRequireDefault$b(
  ReactTestComponent
);
function _interopRequireDefault$b(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const toString = Object.prototype.toString;
const toISOString = Date.prototype.toISOString;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const getConstructorName = (val) => typeof val.constructor === "function" && val.constructor.name || "Object";
const isWindow = (val) => typeof window !== "undefined" && val === window;
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
const NEWLINE_REGEXP = /\n/gi;
class PrettyFormatPluginError extends Error {
  constructor(message, stack) {
    super(message);
    this.stack = stack;
    this.name = this.constructor.name;
  }
}
function isToStringedArrayType(toStringed) {
  return toStringed === "[object Array]" || toStringed === "[object ArrayBuffer]" || toStringed === "[object DataView]" || toStringed === "[object Float32Array]" || toStringed === "[object Float64Array]" || toStringed === "[object Int8Array]" || toStringed === "[object Int16Array]" || toStringed === "[object Int32Array]" || toStringed === "[object Uint8Array]" || toStringed === "[object Uint8ClampedArray]" || toStringed === "[object Uint16Array]" || toStringed === "[object Uint32Array]";
}
function printNumber(val) {
  return Object.is(val, -0) ? "-0" : String(val);
}
function printBigInt(val) {
  return String(`${val}n`);
}
function printFunction(val, printFunctionName) {
  if (!printFunctionName) {
    return "[Function]";
  }
  return "[Function " + (val.name || "anonymous") + "]";
}
function printSymbol(val) {
  return String(val).replace(SYMBOL_REGEXP, "Symbol($1)");
}
function printError(val) {
  return "[" + errorToString.call(val) + "]";
}
function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
  if (val === true || val === false) {
    return "" + val;
  }
  if (val === void 0) {
    return "undefined";
  }
  if (val === null) {
    return "null";
  }
  const typeOf = typeof val;
  if (typeOf === "number") {
    return printNumber(val);
  }
  if (typeOf === "bigint") {
    return printBigInt(val);
  }
  if (typeOf === "string") {
    if (escapeString) {
      return '"' + val.replace(/"|\\/g, "\\$&") + '"';
    }
    return '"' + val + '"';
  }
  if (typeOf === "function") {
    return printFunction(val, printFunctionName);
  }
  if (typeOf === "symbol") {
    return printSymbol(val);
  }
  const toStringed = toString.call(val);
  if (toStringed === "[object WeakMap]") {
    return "WeakMap {}";
  }
  if (toStringed === "[object WeakSet]") {
    return "WeakSet {}";
  }
  if (toStringed === "[object Function]" || toStringed === "[object GeneratorFunction]") {
    return printFunction(val, printFunctionName);
  }
  if (toStringed === "[object Symbol]") {
    return printSymbol(val);
  }
  if (toStringed === "[object Date]") {
    return isNaN(+val) ? "Date { NaN }" : toISOString.call(val);
  }
  if (toStringed === "[object Error]") {
    return printError(val);
  }
  if (toStringed === "[object RegExp]") {
    if (escapeRegex) {
      return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    return regExpToString.call(val);
  }
  if (val instanceof Error) {
    return printError(val);
  }
  return null;
}
function printComplexValue(val, config3, indentation, depth, refs, hasCalledToJSON) {
  if (refs.indexOf(val) !== -1) {
    return "[Circular]";
  }
  refs = refs.slice();
  refs.push(val);
  const hitMaxDepth = ++depth > config3.maxDepth;
  const min = config3.min;
  if (config3.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === "function" && !hasCalledToJSON) {
    return printer(val.toJSON(), config3, indentation, depth, refs, true);
  }
  const toStringed = toString.call(val);
  if (toStringed === "[object Arguments]") {
    return hitMaxDepth ? "[Arguments]" : (min ? "" : "Arguments ") + "[" + (0, _collections.printListItems)(
      val,
      config3,
      indentation,
      depth,
      refs,
      printer
    ) + "]";
  }
  if (isToStringedArrayType(toStringed)) {
    return hitMaxDepth ? "[" + val.constructor.name + "]" : (min ? "" : !config3.printBasicPrototype && val.constructor.name === "Array" ? "" : val.constructor.name + " ") + "[" + (0, _collections.printListItems)(
      val,
      config3,
      indentation,
      depth,
      refs,
      printer
    ) + "]";
  }
  if (toStringed === "[object Map]") {
    return hitMaxDepth ? "[Map]" : "Map {" + (0, _collections.printIteratorEntries)(
      val.entries(),
      config3,
      indentation,
      depth,
      refs,
      printer,
      " => "
    ) + "}";
  }
  if (toStringed === "[object Set]") {
    return hitMaxDepth ? "[Set]" : "Set {" + (0, _collections.printIteratorValues)(
      val.values(),
      config3,
      indentation,
      depth,
      refs,
      printer
    ) + "}";
  }
  return hitMaxDepth || isWindow(val) ? "[" + getConstructorName(val) + "]" : (min ? "" : !config3.printBasicPrototype && getConstructorName(val) === "Object" ? "" : getConstructorName(val) + " ") + "{" + (0, _collections.printObjectProperties)(
    val,
    config3,
    indentation,
    depth,
    refs,
    printer
  ) + "}";
}
function isNewPlugin(plugin2) {
  return plugin2.serialize != null;
}
function printPlugin(plugin2, val, config3, indentation, depth, refs) {
  let printed;
  try {
    printed = isNewPlugin(plugin2) ? plugin2.serialize(val, config3, indentation, depth, refs, printer) : plugin2.print(
      val,
      (valChild) => printer(valChild, config3, indentation, depth, refs),
      (str) => {
        const indentationNext = indentation + config3.indent;
        return indentationNext + str.replace(NEWLINE_REGEXP, "\n" + indentationNext);
      },
      {
        edgeSpacing: config3.spacingOuter,
        min: config3.min,
        spacing: config3.spacingInner
      },
      config3.colors
    );
  } catch (error) {
    throw new PrettyFormatPluginError(error.message, error.stack);
  }
  if (typeof printed !== "string") {
    throw new Error(
      `pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`
    );
  }
  return printed;
}
function findPlugin(plugins2, val) {
  for (let p2 = 0; p2 < plugins2.length; p2++) {
    try {
      if (plugins2[p2].test(val)) {
        return plugins2[p2];
      }
    } catch (error) {
      throw new PrettyFormatPluginError(error.message, error.stack);
    }
  }
  return null;
}
function printer(val, config3, indentation, depth, refs, hasCalledToJSON) {
  const plugin2 = findPlugin(config3.plugins, val);
  if (plugin2 !== null) {
    return printPlugin(plugin2, val, config3, indentation, depth, refs);
  }
  const basicResult = printBasicValue(
    val,
    config3.printFunctionName,
    config3.escapeRegex,
    config3.escapeString
  );
  if (basicResult !== null) {
    return basicResult;
  }
  return printComplexValue(
    val,
    config3,
    indentation,
    depth,
    refs,
    hasCalledToJSON
  );
}
const DEFAULT_THEME = {
  comment: "gray",
  content: "reset",
  prop: "yellow",
  tag: "cyan",
  value: "green"
};
const DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
const DEFAULT_OPTIONS = {
  callToJSON: true,
  compareKeys: void 0,
  escapeRegex: false,
  escapeString: true,
  highlight: false,
  indent: 2,
  maxDepth: Infinity,
  min: false,
  plugins: [],
  printBasicPrototype: true,
  printFunctionName: true,
  theme: DEFAULT_THEME
};
build.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
function validateOptions(options) {
  Object.keys(options).forEach((key) => {
    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
      throw new Error(`pretty-format: Unknown option "${key}".`);
    }
  });
  if (options.min && options.indent !== void 0 && options.indent !== 0) {
    throw new Error(
      'pretty-format: Options "min" and "indent" cannot be used together.'
    );
  }
  if (options.theme !== void 0) {
    if (options.theme === null) {
      throw new Error('pretty-format: Option "theme" must not be null.');
    }
    if (typeof options.theme !== "object") {
      throw new Error(
        `pretty-format: Option "theme" must be of type "object" but instead received "${typeof options.theme}".`
      );
    }
  }
}
const getColorsHighlight = (options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {
  const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];
  const color = value && _ansiStyles.default[value];
  if (color && typeof color.close === "string" && typeof color.open === "string") {
    colors[key] = color;
  } else {
    throw new Error(
      `pretty-format: Option "theme" has a key "${key}" whose value "${value}" is undefined in ansi-styles.`
    );
  }
  return colors;
}, /* @__PURE__ */ Object.create(null));
const getColorsEmpty = () => DEFAULT_THEME_KEYS.reduce((colors, key) => {
  colors[key] = {
    close: "",
    open: ""
  };
  return colors;
}, /* @__PURE__ */ Object.create(null));
const getPrintFunctionName = (options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
const getEscapeRegex = (options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
const getEscapeString = (options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString;
const getConfig$1 = (options) => {
  var _options$printBasicPr;
  return {
    callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
    colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
    compareKeys: options && typeof options.compareKeys === "function" ? options.compareKeys : DEFAULT_OPTIONS.compareKeys,
    escapeRegex: getEscapeRegex(options),
    escapeString: getEscapeString(options),
    indent: options && options.min ? "" : createIndent(
      options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent
    ),
    maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
    min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,
    plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,
    printBasicPrototype: (_options$printBasicPr = options === null || options === void 0 ? void 0 : options.printBasicPrototype) !== null && _options$printBasicPr !== void 0 ? _options$printBasicPr : true,
    printFunctionName: getPrintFunctionName(options),
    spacingInner: options && options.min ? " " : "\n",
    spacingOuter: options && options.min ? "" : "\n"
  };
};
function createIndent(indent) {
  return new Array(indent + 1).join(" ");
}
function format(val, options) {
  if (options) {
    validateOptions(options);
    if (options.plugins) {
      const plugin2 = findPlugin(options.plugins, val);
      if (plugin2 !== null) {
        return printPlugin(plugin2, val, getConfig$1(options), "", 0, []);
      }
    }
  }
  const basicResult = printBasicValue(
    val,
    getPrintFunctionName(options),
    getEscapeRegex(options),
    getEscapeString(options)
  );
  if (basicResult !== null) {
    return basicResult;
  }
  return printComplexValue(val, getConfig$1(options), "", 0, []);
}
const plugins = {
  AsymmetricMatcher: _AsymmetricMatcher.default,
  ConvertAnsi: _ConvertAnsi.default,
  DOMCollection: _DOMCollection.default,
  DOMElement: _DOMElement.default,
  Immutable: _Immutable.default,
  ReactElement: _ReactElement.default,
  ReactTestComponent: _ReactTestComponent.default
};
plugins_1 = build.plugins = plugins;
var _default$2j = format;
build.default = _default$2j;
var toStr = Object.prototype.toString;
function isCallable(fn3) {
  return typeof fn3 === "function" || toStr.call(fn3) === "[object Function]";
}
function toInteger(value) {
  var number = Number(value);
  if (isNaN(number)) {
    return 0;
  }
  if (number === 0 || !isFinite(number)) {
    return number;
  }
  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(value) {
  var len = toInteger(value);
  return Math.min(Math.max(len, 0), maxSafeInteger);
}
function arrayFrom(arrayLike, mapFn) {
  var C2 = Array;
  var items = Object(arrayLike);
  if (arrayLike == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }
  var len = toLength(items.length);
  var A2 = isCallable(C2) ? Object(new C2(len)) : new Array(len);
  var k2 = 0;
  var kValue;
  while (k2 < len) {
    kValue = items[k2];
    {
      A2[k2] = kValue;
    }
    k2 += 1;
  }
  A2.length = len;
  return A2;
}
function _typeof$2(obj) {
  "@babel/helpers - typeof";
  return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$2(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey$1(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _defineProperty$2(obj, key, value) {
  key = _toPropertyKey$1(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey$1(arg) {
  var key = _toPrimitive$1(arg, "string");
  return _typeof$2(key) === "symbol" ? key : String(key);
}
function _toPrimitive$1(input2, hint) {
  if (_typeof$2(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$2(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
var SetLike = /* @__PURE__ */ function() {
  function SetLike3() {
    var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classCallCheck(this, SetLike3);
    _defineProperty$2(this, "items", void 0);
    this.items = items;
  }
  _createClass(SetLike3, [{
    key: "add",
    value: function add(value) {
      if (this.has(value) === false) {
        this.items.push(value);
      }
      return this;
    }
  }, {
    key: "clear",
    value: function clear3() {
      this.items = [];
    }
  }, {
    key: "delete",
    value: function _delete(value) {
      var previousLength = this.items.length;
      this.items = this.items.filter(function(item) {
        return item !== value;
      });
      return previousLength !== this.items.length;
    }
  }, {
    key: "forEach",
    value: function forEach6(callbackfn) {
      var _this = this;
      this.items.forEach(function(item) {
        callbackfn(item, item, _this);
      });
    }
  }, {
    key: "has",
    value: function has7(value) {
      return this.items.indexOf(value) !== -1;
    }
  }, {
    key: "size",
    get: function get6() {
      return this.items.length;
    }
  }]);
  return SetLike3;
}();
const SetLike$1 = typeof Set === "undefined" ? Set : SetLike;
function getLocalName(element) {
  var _element$localName;
  return (
    // eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName
    (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : (
      // eslint-disable-next-line no-restricted-properties -- required for the fallback
      element.tagName.toLowerCase()
    )
  );
}
var localNameToRoleMappings = {
  article: "article",
  aside: "complementary",
  button: "button",
  datalist: "listbox",
  dd: "definition",
  details: "group",
  dialog: "dialog",
  dt: "term",
  fieldset: "group",
  figure: "figure",
  // WARNING: Only with an accessible name
  form: "form",
  footer: "contentinfo",
  h1: "heading",
  h2: "heading",
  h3: "heading",
  h4: "heading",
  h5: "heading",
  h6: "heading",
  header: "banner",
  hr: "separator",
  html: "document",
  legend: "legend",
  li: "listitem",
  math: "math",
  main: "main",
  menu: "list",
  nav: "navigation",
  ol: "list",
  optgroup: "group",
  // WARNING: Only in certain context
  option: "option",
  output: "status",
  progress: "progressbar",
  // WARNING: Only with an accessible name
  section: "region",
  summary: "button",
  table: "table",
  tbody: "rowgroup",
  textarea: "textbox",
  tfoot: "rowgroup",
  // WARNING: Only in certain context
  td: "cell",
  th: "columnheader",
  thead: "rowgroup",
  tr: "row",
  ul: "list"
};
var prohibitedAttributes = {
  caption: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  code: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  deletion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  emphasis: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  generic: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby", "aria-roledescription"]),
  insertion: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  paragraph: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  presentation: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  strong: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  subscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"]),
  superscript: /* @__PURE__ */ new Set(["aria-label", "aria-labelledby"])
};
function hasGlobalAriaAttributes(element, role) {
  return [
    "aria-atomic",
    "aria-busy",
    "aria-controls",
    "aria-current",
    "aria-describedby",
    "aria-details",
    // "disabled",
    "aria-dropeffect",
    // "errormessage",
    "aria-flowto",
    "aria-grabbed",
    // "haspopup",
    "aria-hidden",
    // "invalid",
    "aria-keyshortcuts",
    "aria-label",
    "aria-labelledby",
    "aria-live",
    "aria-owns",
    "aria-relevant",
    "aria-roledescription"
  ].some(function(attributeName) {
    var _prohibitedAttributes;
    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
  });
}
function ignorePresentationalRole(element, implicitRole) {
  return hasGlobalAriaAttributes(element, implicitRole);
}
function getRole(element) {
  var explicitRole = getExplicitRole(element);
  if (explicitRole === null || explicitRole === "presentation") {
    var implicitRole = getImplicitRole(element);
    if (explicitRole !== "presentation" || ignorePresentationalRole(element, implicitRole || "")) {
      return implicitRole;
    }
  }
  return explicitRole;
}
function getImplicitRole(element) {
  var mappedByTag = localNameToRoleMappings[getLocalName(element)];
  if (mappedByTag !== void 0) {
    return mappedByTag;
  }
  switch (getLocalName(element)) {
    case "a":
    case "area":
    case "link":
      if (element.hasAttribute("href")) {
        return "link";
      }
      break;
    case "img":
      if (element.getAttribute("alt") === "" && !ignorePresentationalRole(element, "img")) {
        return "presentation";
      }
      return "img";
    case "input": {
      var _ref = element, type3 = _ref.type;
      switch (type3) {
        case "button":
        case "image":
        case "reset":
        case "submit":
          return "button";
        case "checkbox":
        case "radio":
          return type3;
        case "range":
          return "slider";
        case "email":
        case "tel":
        case "text":
        case "url":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "textbox";
        case "search":
          if (element.hasAttribute("list")) {
            return "combobox";
          }
          return "searchbox";
        case "number":
          return "spinbutton";
        default:
          return null;
      }
    }
    case "select":
      if (element.hasAttribute("multiple") || element.size > 1) {
        return "listbox";
      }
      return "combobox";
  }
  return null;
}
function getExplicitRole(element) {
  var role = element.getAttribute("role");
  if (role !== null) {
    var explicitRole = role.trim().split(" ")[0];
    if (explicitRole.length > 0) {
      return explicitRole;
    }
  }
  return null;
}
function isElement(node) {
  return node !== null && node.nodeType === node.ELEMENT_NODE;
}
function isHTMLTableCaptionElement(node) {
  return isElement(node) && getLocalName(node) === "caption";
}
function isHTMLInputElement(node) {
  return isElement(node) && getLocalName(node) === "input";
}
function isHTMLOptGroupElement(node) {
  return isElement(node) && getLocalName(node) === "optgroup";
}
function isHTMLSelectElement(node) {
  return isElement(node) && getLocalName(node) === "select";
}
function isHTMLTableElement(node) {
  return isElement(node) && getLocalName(node) === "table";
}
function isHTMLTextAreaElement(node) {
  return isElement(node) && getLocalName(node) === "textarea";
}
function safeWindow(node) {
  var _ref = node.ownerDocument === null ? node : node.ownerDocument, defaultView = _ref.defaultView;
  if (defaultView === null) {
    throw new TypeError("no window available");
  }
  return defaultView;
}
function isHTMLFieldSetElement(node) {
  return isElement(node) && getLocalName(node) === "fieldset";
}
function isHTMLLegendElement(node) {
  return isElement(node) && getLocalName(node) === "legend";
}
function isHTMLSlotElement(node) {
  return isElement(node) && getLocalName(node) === "slot";
}
function isSVGElement(node) {
  return isElement(node) && node.ownerSVGElement !== void 0;
}
function isSVGSVGElement(node) {
  return isElement(node) && getLocalName(node) === "svg";
}
function isSVGTitleElement(node) {
  return isSVGElement(node) && getLocalName(node) === "title";
}
function queryIdRefs(node, attributeName) {
  if (isElement(node) && node.hasAttribute(attributeName)) {
    var ids = node.getAttribute(attributeName).split(" ");
    var root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    return ids.map(function(id) {
      return root.getElementById(id);
    }).filter(
      function(element) {
        return element !== null;
      }
      // TODO: why does this not narrow?
    );
  }
  return [];
}
function hasAnyConcreteRoles(node, roles2) {
  if (isElement(node)) {
    return roles2.indexOf(getRole(node)) !== -1;
  }
  return false;
}
function asFlatString(s2) {
  return s2.trim().replace(/\s\s+/g, " ");
}
function isHidden(node, getComputedStyleImplementation) {
  if (!isElement(node)) {
    return false;
  }
  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") {
    return true;
  }
  var style = getComputedStyleImplementation(node);
  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
}
function isControl(node) {
  return hasAnyConcreteRoles(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole(node, "range");
}
function hasAbstractRole(node, role) {
  if (!isElement(node)) {
    return false;
  }
  switch (role) {
    case "range":
      return hasAnyConcreteRoles(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
    default:
      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
  }
}
function querySelectorAllSubtree(element, selectors) {
  var elements = arrayFrom(element.querySelectorAll(selectors));
  queryIdRefs(element, "aria-owns").forEach(function(root) {
    elements.push.apply(elements, arrayFrom(root.querySelectorAll(selectors)));
  });
  return elements;
}
function querySelectedOptions(listbox) {
  if (isHTMLSelectElement(listbox)) {
    return listbox.selectedOptions || querySelectorAllSubtree(listbox, "[selected]");
  }
  return querySelectorAllSubtree(listbox, '[aria-selected="true"]');
}
function isMarkedPresentational(node) {
  return hasAnyConcreteRoles(node, ["none", "presentation"]);
}
function isNativeHostLanguageTextAlternativeElement(node) {
  return isHTMLTableCaptionElement(node);
}
function allowsNameFromContent(node) {
  return hasAnyConcreteRoles(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
}
function isDescendantOfNativeHostLanguageTextAlternativeElement(node) {
  return false;
}
function getValueOfTextbox(element) {
  if (isHTMLInputElement(element) || isHTMLTextAreaElement(element)) {
    return element.value;
  }
  return element.textContent || "";
}
function getTextualContent(declaration) {
  var content = declaration.getPropertyValue("content");
  if (/^["'].*["']$/.test(content)) {
    return content.slice(1, -1);
  }
  return "";
}
function isLabelableElement(element) {
  var localName = getLocalName(element);
  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
}
function findLabelableElement(element) {
  if (isLabelableElement(element)) {
    return element;
  }
  var labelableElement = null;
  element.childNodes.forEach(function(childNode) {
    if (labelableElement === null && isElement(childNode)) {
      var descendantLabelableElement = findLabelableElement(childNode);
      if (descendantLabelableElement !== null) {
        labelableElement = descendantLabelableElement;
      }
    }
  });
  return labelableElement;
}
function getControlOfLabel(label) {
  if (label.control !== void 0) {
    return label.control;
  }
  var htmlFor = label.getAttribute("for");
  if (htmlFor !== null) {
    return label.ownerDocument.getElementById(htmlFor);
  }
  return findLabelableElement(label);
}
function getLabels$1(element) {
  var labelsProperty = element.labels;
  if (labelsProperty === null) {
    return labelsProperty;
  }
  if (labelsProperty !== void 0) {
    return arrayFrom(labelsProperty);
  }
  if (!isLabelableElement(element)) {
    return null;
  }
  var document2 = element.ownerDocument;
  return arrayFrom(document2.querySelectorAll("label")).filter(function(label) {
    return getControlOfLabel(label) === element;
  });
}
function getSlotContents(slot) {
  var assignedNodes = slot.assignedNodes();
  if (assignedNodes.length === 0) {
    return arrayFrom(slot.childNodes);
  }
  return assignedNodes;
}
function computeTextAlternative(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var consultedNodes = new SetLike$1();
  var window2 = safeWindow(root);
  var _options$compute = options.compute, compute = _options$compute === void 0 ? "name" : _options$compute, _options$computedStyl = options.computedStyleSupportsPseudoElements, computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== void 0 : _options$computedStyl, _options$getComputedS = options.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? window2.getComputedStyle.bind(window2) : _options$getComputedS, _options$hidden = options.hidden, hidden = _options$hidden === void 0 ? false : _options$hidden;
  function computeMiscTextAlternative(node, context) {
    var accumulatedText = "";
    if (isElement(node) && computedStyleSupportsPseudoElements) {
      var pseudoBefore = getComputedStyle(node, "::before");
      var beforeContent = getTextualContent(pseudoBefore);
      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
    }
    var childNodes = isHTMLSlotElement(node) ? getSlotContents(node) : arrayFrom(node.childNodes).concat(queryIdRefs(node, "aria-owns"));
    childNodes.forEach(function(child) {
      var result = computeTextAlternative3(child, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false,
        recursion: true
      });
      var display2 = isElement(child) ? getComputedStyle(child).getPropertyValue("display") : "inline";
      var separator = display2 !== "inline" ? " " : "";
      accumulatedText += "".concat(separator).concat(result).concat(separator);
    });
    if (isElement(node) && computedStyleSupportsPseudoElements) {
      var pseudoAfter = getComputedStyle(node, "::after");
      var afterContent = getTextualContent(pseudoAfter);
      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
    }
    return accumulatedText.trim();
  }
  function useAttribute(element, attributeName) {
    var attribute = element.getAttributeNode(attributeName);
    if (attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "") {
      consultedNodes.add(attribute);
      return attribute.value;
    }
    return null;
  }
  function computeTooltipAttributeValue(node) {
    if (!isElement(node)) {
      return null;
    }
    return useAttribute(node, "title");
  }
  function computeElementTextAlternative(node) {
    if (!isElement(node)) {
      return null;
    }
    if (isHTMLFieldSetElement(node)) {
      consultedNodes.add(node);
      var children = arrayFrom(node.childNodes);
      for (var i2 = 0; i2 < children.length; i2 += 1) {
        var child = children[i2];
        if (isHTMLLegendElement(child)) {
          return computeTextAlternative3(child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isHTMLTableElement(node)) {
      consultedNodes.add(node);
      var _children = arrayFrom(node.childNodes);
      for (var _i2 = 0; _i2 < _children.length; _i2 += 1) {
        var _child = _children[_i2];
        if (isHTMLTableCaptionElement(_child)) {
          return computeTextAlternative3(_child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if (isSVGSVGElement(node)) {
      consultedNodes.add(node);
      var _children2 = arrayFrom(node.childNodes);
      for (var _i22 = 0; _i22 < _children2.length; _i22 += 1) {
        var _child2 = _children2[_i22];
        if (isSVGTitleElement(_child2)) {
          return _child2.textContent;
        }
      }
      return null;
    } else if (getLocalName(node) === "img" || getLocalName(node) === "area") {
      var nameFromAlt = useAttribute(node, "alt");
      if (nameFromAlt !== null) {
        return nameFromAlt;
      }
    } else if (isHTMLOptGroupElement(node)) {
      var nameFromLabel = useAttribute(node, "label");
      if (nameFromLabel !== null) {
        return nameFromLabel;
      }
    }
    if (isHTMLInputElement(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
      var nameFromValue = useAttribute(node, "value");
      if (nameFromValue !== null) {
        return nameFromValue;
      }
      if (node.type === "submit") {
        return "Submit";
      }
      if (node.type === "reset") {
        return "Reset";
      }
    }
    var labels = getLabels$1(node);
    if (labels !== null && labels.length !== 0) {
      consultedNodes.add(node);
      return arrayFrom(labels).map(function(element) {
        return computeTextAlternative3(element, {
          isEmbeddedInLabel: true,
          isReferenced: false,
          recursion: true
        });
      }).filter(function(label) {
        return label.length > 0;
      }).join(" ");
    }
    if (isHTMLInputElement(node) && node.type === "image") {
      var _nameFromAlt = useAttribute(node, "alt");
      if (_nameFromAlt !== null) {
        return _nameFromAlt;
      }
      var nameFromTitle = useAttribute(node, "title");
      if (nameFromTitle !== null) {
        return nameFromTitle;
      }
      return "Submit Query";
    }
    if (hasAnyConcreteRoles(node, ["button"])) {
      var nameFromSubTree = computeMiscTextAlternative(node, {
        isEmbeddedInLabel: false,
        isReferenced: false
      });
      if (nameFromSubTree !== "") {
        return nameFromSubTree;
      }
    }
    return null;
  }
  function computeTextAlternative3(current, context) {
    if (consultedNodes.has(current)) {
      return "";
    }
    if (!hidden && isHidden(current, getComputedStyle) && !context.isReferenced) {
      consultedNodes.add(current);
      return "";
    }
    var labelAttributeNode = isElement(current) ? current.getAttributeNode("aria-labelledby") : null;
    var labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? queryIdRefs(current, "aria-labelledby") : [];
    if (compute === "name" && !context.isReferenced && labelElements.length > 0) {
      consultedNodes.add(labelAttributeNode);
      return labelElements.map(function(element) {
        return computeTextAlternative3(element, {
          isEmbeddedInLabel: context.isEmbeddedInLabel,
          isReferenced: true,
          // this isn't recursion as specified, otherwise we would skip
          // `aria-label` in
          // <input id="myself" aria-label="foo" aria-labelledby="myself"
          recursion: false
        });
      }).join(" ");
    }
    var skipToStep2E = context.recursion && isControl(current) && compute === "name";
    if (!skipToStep2E) {
      var ariaLabel = (isElement(current) && current.getAttribute("aria-label") || "").trim();
      if (ariaLabel !== "" && compute === "name") {
        consultedNodes.add(current);
        return ariaLabel;
      }
      if (!isMarkedPresentational(current)) {
        var elementTextAlternative = computeElementTextAlternative(current);
        if (elementTextAlternative !== null) {
          consultedNodes.add(current);
          return elementTextAlternative;
        }
      }
    }
    if (hasAnyConcreteRoles(current, ["menu"])) {
      consultedNodes.add(current);
      return "";
    }
    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
      if (hasAnyConcreteRoles(current, ["combobox", "listbox"])) {
        consultedNodes.add(current);
        var selectedOptions = querySelectedOptions(current);
        if (selectedOptions.length === 0) {
          return isHTMLInputElement(current) ? current.value : "";
        }
        return arrayFrom(selectedOptions).map(function(selectedOption) {
          return computeTextAlternative3(selectedOption, {
            isEmbeddedInLabel: context.isEmbeddedInLabel,
            isReferenced: false,
            recursion: true
          });
        }).join(" ");
      }
      if (hasAbstractRole(current, "range")) {
        consultedNodes.add(current);
        if (current.hasAttribute("aria-valuetext")) {
          return current.getAttribute("aria-valuetext");
        }
        if (current.hasAttribute("aria-valuenow")) {
          return current.getAttribute("aria-valuenow");
        }
        return current.getAttribute("value") || "";
      }
      if (hasAnyConcreteRoles(current, ["textbox"])) {
        consultedNodes.add(current);
        return getValueOfTextbox(current);
      }
    }
    if (allowsNameFromContent(current) || isElement(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement()) {
      var accumulatedText2F = computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false
      });
      if (accumulatedText2F !== "") {
        consultedNodes.add(current);
        return accumulatedText2F;
      }
    }
    if (current.nodeType === current.TEXT_NODE) {
      consultedNodes.add(current);
      return current.textContent || "";
    }
    if (context.recursion) {
      consultedNodes.add(current);
      return computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false
      });
    }
    var tooltipAttributeValue = computeTooltipAttributeValue(current);
    if (tooltipAttributeValue !== null) {
      consultedNodes.add(current);
      return tooltipAttributeValue;
    }
    consultedNodes.add(current);
    return "";
  }
  return asFlatString(computeTextAlternative3(root, {
    isEmbeddedInLabel: false,
    // by spec computeAccessibleDescription starts with the referenced elements as roots
    isReferenced: compute === "description",
    recursion: false
  }));
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$1(obj);
}
function ownKeys(object, enumerableOnly) {
  var keys7 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys7.push.apply(keys7, symbols);
  }
  return keys7;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$1(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof$1(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input2, hint) {
  if (_typeof$1(input2) !== "object" || input2 === null) return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (_typeof$1(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function computeAccessibleDescription(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var description = queryIdRefs(root, "aria-describedby").map(function(element) {
    return computeTextAlternative(element, _objectSpread(_objectSpread({}, options), {}, {
      compute: "description"
    }));
  }).join(" ");
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
function prohibitsNaming(node) {
  return hasAnyConcreteRoles(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]);
}
function computeAccessibleName(root) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (prohibitsNaming(root)) {
    return "";
  }
  return computeTextAlternative(root, options);
}
var lib = {};
var ariaPropsMap$1 = {};
var iterationDecorator$1 = {};
var iteratorProxy$1 = {};
Object.defineProperty(iteratorProxy$1, "__esModule", {
  value: true
});
iteratorProxy$1.default = void 0;
function iteratorProxy() {
  var values6 = this;
  var index = 0;
  var iter = {
    "@@iterator": function iterator() {
      return iter;
    },
    next: function next() {
      if (index < values6.length) {
        var value = values6[index];
        index = index + 1;
        return {
          done: false,
          value
        };
      } else {
        return {
          done: true
        };
      }
    }
  };
  return iter;
}
var _default$2i = iteratorProxy;
iteratorProxy$1.default = _default$2i;
Object.defineProperty(iterationDecorator$1, "__esModule", {
  value: true
});
iterationDecorator$1.default = iterationDecorator;
var _iteratorProxy = _interopRequireDefault$a(iteratorProxy$1);
function _interopRequireDefault$a(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function iterationDecorator(collection, entries6) {
  if (typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol") {
    Object.defineProperty(collection, Symbol.iterator, {
      value: _iteratorProxy.default.bind(entries6)
    });
  }
  return collection;
}
Object.defineProperty(ariaPropsMap$1, "__esModule", {
  value: true
});
ariaPropsMap$1.default = void 0;
var _iterationDecorator$4 = _interopRequireDefault$9(iterationDecorator$1);
function _interopRequireDefault$9(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _slicedToArray$4(arr, i2) {
  return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i2) || _unsupportedIterableToArray$4(arr, i2) || _nonIterableRest$4();
}
function _nonIterableRest$4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit$4(arr, i2) {
  var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i2 == null) return;
  var _arr = [];
  var _n2 = true;
  var _d2 = false;
  var _s2, _e2;
  try {
    for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
      _arr.push(_s2.value);
      if (i2 && _arr.length === i2) break;
    }
  } catch (err) {
    _d2 = true;
    _e2 = err;
  } finally {
    try {
      if (!_n2 && _i2["return"] != null) _i2["return"]();
    } finally {
      if (_d2) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles$4(arr) {
  if (Array.isArray(arr)) return arr;
}
function _createForOfIteratorHelper$4(o, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it2) {
    if (Array.isArray(o) || (it2 = _unsupportedIterableToArray$4(o)) || allowArrayLike) {
      if (it2) o = it2;
      var i2 = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i2 >= o.length) return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e2) {
        throw _e2;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e3) {
    didErr = true;
    err = _e3;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$4(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$4(o, minLen);
}
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var properties = [["aria-activedescendant", {
  "type": "id"
}], ["aria-atomic", {
  "type": "boolean"
}], ["aria-autocomplete", {
  "type": "token",
  "values": ["inline", "list", "both", "none"]
}], ["aria-braillelabel", {
  "type": "string"
}], ["aria-brailleroledescription", {
  "type": "string"
}], ["aria-busy", {
  "type": "boolean"
}], ["aria-checked", {
  "type": "tristate"
}], ["aria-colcount", {
  type: "integer"
}], ["aria-colindex", {
  type: "integer"
}], ["aria-colspan", {
  type: "integer"
}], ["aria-controls", {
  "type": "idlist"
}], ["aria-current", {
  type: "token",
  values: ["page", "step", "location", "date", "time", true, false]
}], ["aria-describedby", {
  "type": "idlist"
}], ["aria-description", {
  "type": "string"
}], ["aria-details", {
  "type": "id"
}], ["aria-disabled", {
  "type": "boolean"
}], ["aria-dropeffect", {
  "type": "tokenlist",
  "values": ["copy", "execute", "link", "move", "none", "popup"]
}], ["aria-errormessage", {
  "type": "id"
}], ["aria-expanded", {
  "type": "boolean",
  "allowundefined": true
}], ["aria-flowto", {
  "type": "idlist"
}], ["aria-grabbed", {
  "type": "boolean",
  "allowundefined": true
}], ["aria-haspopup", {
  "type": "token",
  "values": [false, true, "menu", "listbox", "tree", "grid", "dialog"]
}], ["aria-hidden", {
  "type": "boolean",
  "allowundefined": true
}], ["aria-invalid", {
  "type": "token",
  "values": ["grammar", false, "spelling", true]
}], ["aria-keyshortcuts", {
  type: "string"
}], ["aria-label", {
  "type": "string"
}], ["aria-labelledby", {
  "type": "idlist"
}], ["aria-level", {
  "type": "integer"
}], ["aria-live", {
  "type": "token",
  "values": ["assertive", "off", "polite"]
}], ["aria-modal", {
  type: "boolean"
}], ["aria-multiline", {
  "type": "boolean"
}], ["aria-multiselectable", {
  "type": "boolean"
}], ["aria-orientation", {
  "type": "token",
  "values": ["vertical", "undefined", "horizontal"]
}], ["aria-owns", {
  "type": "idlist"
}], ["aria-placeholder", {
  type: "string"
}], ["aria-posinset", {
  "type": "integer"
}], ["aria-pressed", {
  "type": "tristate"
}], ["aria-readonly", {
  "type": "boolean"
}], ["aria-relevant", {
  "type": "tokenlist",
  "values": ["additions", "all", "removals", "text"]
}], ["aria-required", {
  "type": "boolean"
}], ["aria-roledescription", {
  type: "string"
}], ["aria-rowcount", {
  type: "integer"
}], ["aria-rowindex", {
  type: "integer"
}], ["aria-rowspan", {
  type: "integer"
}], ["aria-selected", {
  "type": "boolean",
  "allowundefined": true
}], ["aria-setsize", {
  "type": "integer"
}], ["aria-sort", {
  "type": "token",
  "values": ["ascending", "descending", "none", "other"]
}], ["aria-valuemax", {
  "type": "number"
}], ["aria-valuemin", {
  "type": "number"
}], ["aria-valuenow", {
  "type": "number"
}], ["aria-valuetext", {
  "type": "string"
}]];
var ariaPropsMap = {
  entries: function entries() {
    return properties;
  },
  forEach: function forEach(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var _iterator = _createForOfIteratorHelper$4(properties), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray$4(_step.value, 2), key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, key, properties);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  },
  get: function get(key) {
    var item = properties.find(function(tuple) {
      return tuple[0] === key ? true : false;
    });
    return item && item[1];
  },
  has: function has(key) {
    return !!ariaPropsMap.get(key);
  },
  keys: function keys() {
    return properties.map(function(_ref) {
      var _ref2 = _slicedToArray$4(_ref, 1), key = _ref2[0];
      return key;
    });
  },
  values: function values() {
    return properties.map(function(_ref3) {
      var _ref4 = _slicedToArray$4(_ref3, 2), values6 = _ref4[1];
      return values6;
    });
  }
};
var _default$2h = (0, _iterationDecorator$4.default)(ariaPropsMap, ariaPropsMap.entries());
ariaPropsMap$1.default = _default$2h;
var domMap$1 = {};
Object.defineProperty(domMap$1, "__esModule", {
  value: true
});
domMap$1.default = void 0;
var _iterationDecorator$3 = _interopRequireDefault$8(iterationDecorator$1);
function _interopRequireDefault$8(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _slicedToArray$3(arr, i2) {
  return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i2) || _unsupportedIterableToArray$3(arr, i2) || _nonIterableRest$3();
}
function _nonIterableRest$3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit$3(arr, i2) {
  var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i2 == null) return;
  var _arr = [];
  var _n2 = true;
  var _d2 = false;
  var _s2, _e2;
  try {
    for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
      _arr.push(_s2.value);
      if (i2 && _arr.length === i2) break;
    }
  } catch (err) {
    _d2 = true;
    _e2 = err;
  } finally {
    try {
      if (!_n2 && _i2["return"] != null) _i2["return"]();
    } finally {
      if (_d2) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles$3(arr) {
  if (Array.isArray(arr)) return arr;
}
function _createForOfIteratorHelper$3(o, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it2) {
    if (Array.isArray(o) || (it2 = _unsupportedIterableToArray$3(o)) || allowArrayLike) {
      if (it2) o = it2;
      var i2 = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i2 >= o.length) return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e2) {
        throw _e2;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e3) {
    didErr = true;
    err = _e3;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$3(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$3(o, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var dom$1 = [["a", {
  reserved: false
}], ["abbr", {
  reserved: false
}], ["acronym", {
  reserved: false
}], ["address", {
  reserved: false
}], ["applet", {
  reserved: false
}], ["area", {
  reserved: false
}], ["article", {
  reserved: false
}], ["aside", {
  reserved: false
}], ["audio", {
  reserved: false
}], ["b", {
  reserved: false
}], ["base", {
  reserved: true
}], ["bdi", {
  reserved: false
}], ["bdo", {
  reserved: false
}], ["big", {
  reserved: false
}], ["blink", {
  reserved: false
}], ["blockquote", {
  reserved: false
}], ["body", {
  reserved: false
}], ["br", {
  reserved: false
}], ["button", {
  reserved: false
}], ["canvas", {
  reserved: false
}], ["caption", {
  reserved: false
}], ["center", {
  reserved: false
}], ["cite", {
  reserved: false
}], ["code", {
  reserved: false
}], ["col", {
  reserved: true
}], ["colgroup", {
  reserved: true
}], ["content", {
  reserved: false
}], ["data", {
  reserved: false
}], ["datalist", {
  reserved: false
}], ["dd", {
  reserved: false
}], ["del", {
  reserved: false
}], ["details", {
  reserved: false
}], ["dfn", {
  reserved: false
}], ["dialog", {
  reserved: false
}], ["dir", {
  reserved: false
}], ["div", {
  reserved: false
}], ["dl", {
  reserved: false
}], ["dt", {
  reserved: false
}], ["em", {
  reserved: false
}], ["embed", {
  reserved: false
}], ["fieldset", {
  reserved: false
}], ["figcaption", {
  reserved: false
}], ["figure", {
  reserved: false
}], ["font", {
  reserved: false
}], ["footer", {
  reserved: false
}], ["form", {
  reserved: false
}], ["frame", {
  reserved: false
}], ["frameset", {
  reserved: false
}], ["h1", {
  reserved: false
}], ["h2", {
  reserved: false
}], ["h3", {
  reserved: false
}], ["h4", {
  reserved: false
}], ["h5", {
  reserved: false
}], ["h6", {
  reserved: false
}], ["head", {
  reserved: true
}], ["header", {
  reserved: false
}], ["hgroup", {
  reserved: false
}], ["hr", {
  reserved: false
}], ["html", {
  reserved: true
}], ["i", {
  reserved: false
}], ["iframe", {
  reserved: false
}], ["img", {
  reserved: false
}], ["input", {
  reserved: false
}], ["ins", {
  reserved: false
}], ["kbd", {
  reserved: false
}], ["keygen", {
  reserved: false
}], ["label", {
  reserved: false
}], ["legend", {
  reserved: false
}], ["li", {
  reserved: false
}], ["link", {
  reserved: true
}], ["main", {
  reserved: false
}], ["map", {
  reserved: false
}], ["mark", {
  reserved: false
}], ["marquee", {
  reserved: false
}], ["menu", {
  reserved: false
}], ["menuitem", {
  reserved: false
}], ["meta", {
  reserved: true
}], ["meter", {
  reserved: false
}], ["nav", {
  reserved: false
}], ["noembed", {
  reserved: true
}], ["noscript", {
  reserved: true
}], ["object", {
  reserved: false
}], ["ol", {
  reserved: false
}], ["optgroup", {
  reserved: false
}], ["option", {
  reserved: false
}], ["output", {
  reserved: false
}], ["p", {
  reserved: false
}], ["param", {
  reserved: true
}], ["picture", {
  reserved: true
}], ["pre", {
  reserved: false
}], ["progress", {
  reserved: false
}], ["q", {
  reserved: false
}], ["rp", {
  reserved: false
}], ["rt", {
  reserved: false
}], ["rtc", {
  reserved: false
}], ["ruby", {
  reserved: false
}], ["s", {
  reserved: false
}], ["samp", {
  reserved: false
}], ["script", {
  reserved: true
}], ["section", {
  reserved: false
}], ["select", {
  reserved: false
}], ["small", {
  reserved: false
}], ["source", {
  reserved: true
}], ["spacer", {
  reserved: false
}], ["span", {
  reserved: false
}], ["strike", {
  reserved: false
}], ["strong", {
  reserved: false
}], ["style", {
  reserved: true
}], ["sub", {
  reserved: false
}], ["summary", {
  reserved: false
}], ["sup", {
  reserved: false
}], ["table", {
  reserved: false
}], ["tbody", {
  reserved: false
}], ["td", {
  reserved: false
}], ["textarea", {
  reserved: false
}], ["tfoot", {
  reserved: false
}], ["th", {
  reserved: false
}], ["thead", {
  reserved: false
}], ["time", {
  reserved: false
}], ["title", {
  reserved: true
}], ["tr", {
  reserved: false
}], ["track", {
  reserved: true
}], ["tt", {
  reserved: false
}], ["u", {
  reserved: false
}], ["ul", {
  reserved: false
}], ["var", {
  reserved: false
}], ["video", {
  reserved: false
}], ["wbr", {
  reserved: false
}], ["xmp", {
  reserved: false
}]];
var domMap = {
  entries: function entries2() {
    return dom$1;
  },
  forEach: function forEach2(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var _iterator = _createForOfIteratorHelper$3(dom$1), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray$3(_step.value, 2), key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, key, dom$1);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  },
  get: function get2(key) {
    var item = dom$1.find(function(tuple) {
      return tuple[0] === key ? true : false;
    });
    return item && item[1];
  },
  has: function has2(key) {
    return !!domMap.get(key);
  },
  keys: function keys2() {
    return dom$1.map(function(_ref) {
      var _ref2 = _slicedToArray$3(_ref, 1), key = _ref2[0];
      return key;
    });
  },
  values: function values2() {
    return dom$1.map(function(_ref3) {
      var _ref4 = _slicedToArray$3(_ref3, 2), values6 = _ref4[1];
      return values6;
    });
  }
};
var _default$2g = (0, _iterationDecorator$3.default)(domMap, domMap.entries());
domMap$1.default = _default$2g;
var rolesMap$1 = {};
var ariaAbstractRoles$1 = {};
var commandRole$1 = {};
Object.defineProperty(commandRole$1, "__esModule", {
  value: true
});
commandRole$1.default = void 0;
var commandRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget"]]
};
var _default$2f = commandRole;
commandRole$1.default = _default$2f;
var compositeRole$1 = {};
Object.defineProperty(compositeRole$1, "__esModule", {
  value: true
});
compositeRole$1.default = void 0;
var compositeRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-activedescendant": null,
    "aria-disabled": null
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget"]]
};
var _default$2e = compositeRole;
compositeRole$1.default = _default$2e;
var inputRole$1 = {};
Object.defineProperty(inputRole$1, "__esModule", {
  value: true
});
inputRole$1.default = void 0;
var inputRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null
  },
  relatedConcepts: [{
    concept: {
      name: "input"
    },
    module: "XForms"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget"]]
};
var _default$2d = inputRole;
inputRole$1.default = _default$2d;
var landmarkRole$1 = {};
Object.defineProperty(landmarkRole$1, "__esModule", {
  value: true
});
landmarkRole$1.default = void 0;
var landmarkRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$2c = landmarkRole;
landmarkRole$1.default = _default$2c;
var rangeRole$1 = {};
Object.defineProperty(rangeRole$1, "__esModule", {
  value: true
});
rangeRole$1.default = void 0;
var rangeRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-valuemax": null,
    "aria-valuemin": null,
    "aria-valuenow": null
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$2b = rangeRole;
rangeRole$1.default = _default$2b;
var roletypeRole$1 = {};
Object.defineProperty(roletypeRole$1, "__esModule", {
  value: true
});
roletypeRole$1.default = void 0;
var roletypeRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: [],
  prohibitedProps: [],
  props: {
    "aria-atomic": null,
    "aria-busy": null,
    "aria-controls": null,
    "aria-current": null,
    "aria-describedby": null,
    "aria-details": null,
    "aria-dropeffect": null,
    "aria-flowto": null,
    "aria-grabbed": null,
    "aria-hidden": null,
    "aria-keyshortcuts": null,
    "aria-label": null,
    "aria-labelledby": null,
    "aria-live": null,
    "aria-owns": null,
    "aria-relevant": null,
    "aria-roledescription": null
  },
  relatedConcepts: [{
    concept: {
      name: "role"
    },
    module: "XHTML"
  }, {
    concept: {
      name: "type"
    },
    module: "Dublin Core"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: []
};
var _default$2a = roletypeRole;
roletypeRole$1.default = _default$2a;
var sectionRole$1 = {};
Object.defineProperty(sectionRole$1, "__esModule", {
  value: true
});
sectionRole$1.default = void 0;
var sectionRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: [],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "frontmatter"
    },
    module: "DTB"
  }, {
    concept: {
      name: "level"
    },
    module: "DTB"
  }, {
    concept: {
      name: "level"
    },
    module: "SMIL"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$29 = sectionRole;
sectionRole$1.default = _default$29;
var sectionheadRole$1 = {};
Object.defineProperty(sectionheadRole$1, "__esModule", {
  value: true
});
sectionheadRole$1.default = void 0;
var sectionheadRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$28 = sectionheadRole;
sectionheadRole$1.default = _default$28;
var selectRole$1 = {};
Object.defineProperty(selectRole$1, "__esModule", {
  value: true
});
selectRole$1.default = void 0;
var selectRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-orientation": null
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]]
};
var _default$27 = selectRole;
selectRole$1.default = _default$27;
var structureRole$1 = {};
Object.defineProperty(structureRole$1, "__esModule", {
  value: true
});
structureRole$1.default = void 0;
var structureRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: [],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype"]]
};
var _default$26 = structureRole;
structureRole$1.default = _default$26;
var widgetRole$1 = {};
Object.defineProperty(widgetRole$1, "__esModule", {
  value: true
});
widgetRole$1.default = void 0;
var widgetRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: [],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype"]]
};
var _default$25 = widgetRole;
widgetRole$1.default = _default$25;
var windowRole$1 = {};
Object.defineProperty(windowRole$1, "__esModule", {
  value: true
});
windowRole$1.default = void 0;
var windowRole = {
  abstract: true,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-modal": null
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype"]]
};
var _default$24 = windowRole;
windowRole$1.default = _default$24;
Object.defineProperty(ariaAbstractRoles$1, "__esModule", {
  value: true
});
ariaAbstractRoles$1.default = void 0;
var _commandRole = _interopRequireDefault$7(commandRole$1);
var _compositeRole = _interopRequireDefault$7(compositeRole$1);
var _inputRole = _interopRequireDefault$7(inputRole$1);
var _landmarkRole = _interopRequireDefault$7(landmarkRole$1);
var _rangeRole = _interopRequireDefault$7(rangeRole$1);
var _roletypeRole = _interopRequireDefault$7(roletypeRole$1);
var _sectionRole = _interopRequireDefault$7(sectionRole$1);
var _sectionheadRole = _interopRequireDefault$7(sectionheadRole$1);
var _selectRole = _interopRequireDefault$7(selectRole$1);
var _structureRole = _interopRequireDefault$7(structureRole$1);
var _widgetRole = _interopRequireDefault$7(widgetRole$1);
var _windowRole = _interopRequireDefault$7(windowRole$1);
function _interopRequireDefault$7(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var ariaAbstractRoles = [["command", _commandRole.default], ["composite", _compositeRole.default], ["input", _inputRole.default], ["landmark", _landmarkRole.default], ["range", _rangeRole.default], ["roletype", _roletypeRole.default], ["section", _sectionRole.default], ["sectionhead", _sectionheadRole.default], ["select", _selectRole.default], ["structure", _structureRole.default], ["widget", _widgetRole.default], ["window", _windowRole.default]];
var _default$23 = ariaAbstractRoles;
ariaAbstractRoles$1.default = _default$23;
var ariaLiteralRoles$1 = {};
var alertRole$1 = {};
Object.defineProperty(alertRole$1, "__esModule", {
  value: true
});
alertRole$1.default = void 0;
var alertRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-atomic": "true",
    "aria-live": "assertive"
  },
  relatedConcepts: [{
    concept: {
      name: "alert"
    },
    module: "XForms"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$22 = alertRole;
alertRole$1.default = _default$22;
var alertdialogRole$1 = {};
Object.defineProperty(alertdialogRole$1, "__esModule", {
  value: true
});
alertdialogRole$1.default = void 0;
var alertdialogRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "alert"
    },
    module: "XForms"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]]
};
var _default$21 = alertdialogRole;
alertdialogRole$1.default = _default$21;
var applicationRole$1 = {};
Object.defineProperty(applicationRole$1, "__esModule", {
  value: true
});
applicationRole$1.default = void 0;
var applicationRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-activedescendant": null,
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "Device Independence Delivery Unit"
    }
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$20 = applicationRole;
applicationRole$1.default = _default$20;
var articleRole$1 = {};
Object.defineProperty(articleRole$1, "__esModule", {
  value: true
});
articleRole$1.default = void 0;
var articleRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-posinset": null,
    "aria-setsize": null
  },
  relatedConcepts: [{
    concept: {
      name: "article"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "document"]]
};
var _default$1$ = articleRole;
articleRole$1.default = _default$1$;
var bannerRole$1 = {};
Object.defineProperty(bannerRole$1, "__esModule", {
  value: true
});
bannerRole$1.default = void 0;
var bannerRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      constraints: ["scoped to the body element"],
      name: "header"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$1_ = bannerRole;
bannerRole$1.default = _default$1_;
var blockquoteRole$1 = {};
Object.defineProperty(blockquoteRole$1, "__esModule", {
  value: true
});
blockquoteRole$1.default = void 0;
var blockquoteRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "blockquote"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1Z = blockquoteRole;
blockquoteRole$1.default = _default$1Z;
var buttonRole$1 = {};
Object.defineProperty(buttonRole$1, "__esModule", {
  value: true
});
buttonRole$1.default = void 0;
var buttonRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-pressed": null
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        name: "type",
        value: "button"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        name: "type",
        value: "image"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        name: "type",
        value: "reset"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        name: "type",
        value: "submit"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      name: "button"
    },
    module: "HTML"
  }, {
    concept: {
      name: "trigger"
    },
    module: "XForms"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "command"]]
};
var _default$1Y = buttonRole;
buttonRole$1.default = _default$1Y;
var captionRole$1 = {};
Object.defineProperty(captionRole$1, "__esModule", {
  value: true
});
captionRole$1.default = void 0;
var captionRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "caption"
    },
    module: "HTML"
  }],
  requireContextRole: ["figure", "grid", "table"],
  requiredContextRole: ["figure", "grid", "table"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1X = captionRole;
captionRole$1.default = _default$1X;
var cellRole$1 = {};
Object.defineProperty(cellRole$1, "__esModule", {
  value: true
});
cellRole$1.default = void 0;
var cellRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-colindex": null,
    "aria-colspan": null,
    "aria-rowindex": null,
    "aria-rowspan": null
  },
  relatedConcepts: [{
    concept: {
      constraints: ["ancestor table element has table role"],
      name: "td"
    },
    module: "HTML"
  }],
  requireContextRole: ["row"],
  requiredContextRole: ["row"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1W = cellRole;
cellRole$1.default = _default$1W;
var checkboxRole$1 = {};
Object.defineProperty(checkboxRole$1, "__esModule", {
  value: true
});
checkboxRole$1.default = void 0;
var checkboxRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-checked": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-invalid": null,
    "aria-readonly": null,
    "aria-required": null
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        name: "type",
        value: "checkbox"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      name: "option"
    },
    module: "ARIA"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-checked": null
  },
  superClass: [["roletype", "widget", "input"]]
};
var _default$1V = checkboxRole;
checkboxRole$1.default = _default$1V;
var codeRole$1 = {};
Object.defineProperty(codeRole$1, "__esModule", {
  value: true
});
codeRole$1.default = void 0;
var codeRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "code"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1U = codeRole;
codeRole$1.default = _default$1U;
var columnheaderRole$1 = {};
Object.defineProperty(columnheaderRole$1, "__esModule", {
  value: true
});
columnheaderRole$1.default = void 0;
var columnheaderRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-sort": null
  },
  relatedConcepts: [{
    concept: {
      name: "th"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        name: "scope",
        value: "col"
      }],
      name: "th"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        name: "scope",
        value: "colgroup"
      }],
      name: "th"
    },
    module: "HTML"
  }],
  requireContextRole: ["row"],
  requiredContextRole: ["row"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
};
var _default$1T = columnheaderRole;
columnheaderRole$1.default = _default$1T;
var comboboxRole$1 = {};
Object.defineProperty(comboboxRole$1, "__esModule", {
  value: true
});
comboboxRole$1.default = void 0;
var comboboxRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-activedescendant": null,
    "aria-autocomplete": null,
    "aria-errormessage": null,
    "aria-invalid": null,
    "aria-readonly": null,
    "aria-required": null,
    "aria-expanded": "false",
    "aria-haspopup": "listbox"
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "list"
      }, {
        name: "type",
        value: "email"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "list"
      }, {
        name: "type",
        value: "search"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "list"
      }, {
        name: "type",
        value: "tel"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "list"
      }, {
        name: "type",
        value: "text"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "list"
      }, {
        name: "type",
        value: "url"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "list"
      }, {
        name: "type",
        value: "url"
      }],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "multiple"
      }, {
        constraints: ["undefined"],
        name: "size"
      }],
      constraints: ["the multiple attribute is not set and the size attribute does not have a value greater than 1"],
      name: "select"
    },
    module: "HTML"
  }, {
    concept: {
      name: "select"
    },
    module: "XForms"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-controls": null,
    "aria-expanded": "false"
  },
  superClass: [["roletype", "widget", "input"]]
};
var _default$1S = comboboxRole;
comboboxRole$1.default = _default$1S;
var complementaryRole$1 = {};
Object.defineProperty(complementaryRole$1, "__esModule", {
  value: true
});
complementaryRole$1.default = void 0;
var complementaryRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "aside"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "aria-label"
      }],
      constraints: ["scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
      name: "aside"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "aria-labelledby"
      }],
      constraints: ["scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
      name: "aside"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$1R = complementaryRole;
complementaryRole$1.default = _default$1R;
var contentinfoRole$1 = {};
Object.defineProperty(contentinfoRole$1, "__esModule", {
  value: true
});
contentinfoRole$1.default = void 0;
var contentinfoRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      constraints: ["scoped to the body element"],
      name: "footer"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$1Q = contentinfoRole;
contentinfoRole$1.default = _default$1Q;
var definitionRole$1 = {};
Object.defineProperty(definitionRole$1, "__esModule", {
  value: true
});
definitionRole$1.default = void 0;
var definitionRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "dd"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1P = definitionRole;
definitionRole$1.default = _default$1P;
var deletionRole$1 = {};
Object.defineProperty(deletionRole$1, "__esModule", {
  value: true
});
deletionRole$1.default = void 0;
var deletionRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "del"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1O = deletionRole;
deletionRole$1.default = _default$1O;
var dialogRole$1 = {};
Object.defineProperty(dialogRole$1, "__esModule", {
  value: true
});
dialogRole$1.default = void 0;
var dialogRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "dialog"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "window"]]
};
var _default$1N = dialogRole;
dialogRole$1.default = _default$1N;
var directoryRole$1 = {};
Object.defineProperty(directoryRole$1, "__esModule", {
  value: true
});
directoryRole$1.default = void 0;
var directoryRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    module: "DAISY Guide"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "list"]]
};
var _default$1M = directoryRole;
directoryRole$1.default = _default$1M;
var documentRole$1 = {};
Object.defineProperty(documentRole$1, "__esModule", {
  value: true
});
documentRole$1.default = void 0;
var documentRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "Device Independence Delivery Unit"
    }
  }, {
    concept: {
      name: "html"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$1L = documentRole;
documentRole$1.default = _default$1L;
var emphasisRole$1 = {};
Object.defineProperty(emphasisRole$1, "__esModule", {
  value: true
});
emphasisRole$1.default = void 0;
var emphasisRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "em"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1K = emphasisRole;
emphasisRole$1.default = _default$1K;
var feedRole$1 = {};
Object.defineProperty(feedRole$1, "__esModule", {
  value: true
});
feedRole$1.default = void 0;
var feedRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["article"]],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "list"]]
};
var _default$1J = feedRole;
feedRole$1.default = _default$1J;
var figureRole$1 = {};
Object.defineProperty(figureRole$1, "__esModule", {
  value: true
});
figureRole$1.default = void 0;
var figureRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "figure"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1I = figureRole;
figureRole$1.default = _default$1I;
var formRole$1 = {};
Object.defineProperty(formRole$1, "__esModule", {
  value: true
});
formRole$1.default = void 0;
var formRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "aria-label"
      }],
      name: "form"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "aria-labelledby"
      }],
      name: "form"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "name"
      }],
      name: "form"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$1H = formRole;
formRole$1.default = _default$1H;
var genericRole$1 = {};
Object.defineProperty(genericRole$1, "__esModule", {
  value: true
});
genericRole$1.default = void 0;
var genericRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "a"
    },
    module: "HTML"
  }, {
    concept: {
      name: "area"
    },
    module: "HTML"
  }, {
    concept: {
      name: "aside"
    },
    module: "HTML"
  }, {
    concept: {
      name: "b"
    },
    module: "HTML"
  }, {
    concept: {
      name: "bdo"
    },
    module: "HTML"
  }, {
    concept: {
      name: "body"
    },
    module: "HTML"
  }, {
    concept: {
      name: "data"
    },
    module: "HTML"
  }, {
    concept: {
      name: "div"
    },
    module: "HTML"
  }, {
    concept: {
      constraints: ["scoped to the main element", "scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
      name: "footer"
    },
    module: "HTML"
  }, {
    concept: {
      constraints: ["scoped to the main element", "scoped to a sectioning content element", "scoped to a sectioning root element other than body"],
      name: "header"
    },
    module: "HTML"
  }, {
    concept: {
      name: "hgroup"
    },
    module: "HTML"
  }, {
    concept: {
      name: "i"
    },
    module: "HTML"
  }, {
    concept: {
      name: "pre"
    },
    module: "HTML"
  }, {
    concept: {
      name: "q"
    },
    module: "HTML"
  }, {
    concept: {
      name: "samp"
    },
    module: "HTML"
  }, {
    concept: {
      name: "section"
    },
    module: "HTML"
  }, {
    concept: {
      name: "small"
    },
    module: "HTML"
  }, {
    concept: {
      name: "span"
    },
    module: "HTML"
  }, {
    concept: {
      name: "u"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$1G = genericRole;
genericRole$1.default = _default$1G;
var gridRole$1 = {};
Object.defineProperty(gridRole$1, "__esModule", {
  value: true
});
gridRole$1.default = void 0;
var gridRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-multiselectable": null,
    "aria-readonly": null
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["row"], ["row", "rowgroup"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]]
};
var _default$1F = gridRole;
gridRole$1.default = _default$1F;
var gridcellRole$1 = {};
Object.defineProperty(gridcellRole$1, "__esModule", {
  value: true
});
gridcellRole$1.default = void 0;
var gridcellRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null,
    "aria-readonly": null,
    "aria-required": null,
    "aria-selected": null
  },
  relatedConcepts: [{
    concept: {
      constraints: ["ancestor table element has grid role", "ancestor table element has treegrid role"],
      name: "td"
    },
    module: "HTML"
  }],
  requireContextRole: ["row"],
  requiredContextRole: ["row"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]]
};
var _default$1E = gridcellRole;
gridcellRole$1.default = _default$1E;
var groupRole$1 = {};
Object.defineProperty(groupRole$1, "__esModule", {
  value: true
});
groupRole$1.default = void 0;
var groupRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-activedescendant": null,
    "aria-disabled": null
  },
  relatedConcepts: [{
    concept: {
      name: "details"
    },
    module: "HTML"
  }, {
    concept: {
      name: "fieldset"
    },
    module: "HTML"
  }, {
    concept: {
      name: "optgroup"
    },
    module: "HTML"
  }, {
    concept: {
      name: "address"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1D = groupRole;
groupRole$1.default = _default$1D;
var headingRole$1 = {};
Object.defineProperty(headingRole$1, "__esModule", {
  value: true
});
headingRole$1.default = void 0;
var headingRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-level": "2"
  },
  relatedConcepts: [{
    concept: {
      name: "h1"
    },
    module: "HTML"
  }, {
    concept: {
      name: "h2"
    },
    module: "HTML"
  }, {
    concept: {
      name: "h3"
    },
    module: "HTML"
  }, {
    concept: {
      name: "h4"
    },
    module: "HTML"
  }, {
    concept: {
      name: "h5"
    },
    module: "HTML"
  }, {
    concept: {
      name: "h6"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-level": "2"
  },
  superClass: [["roletype", "structure", "sectionhead"]]
};
var _default$1C = headingRole;
headingRole$1.default = _default$1C;
var imgRole$1 = {};
Object.defineProperty(imgRole$1, "__esModule", {
  value: true
});
imgRole$1.default = void 0;
var imgRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "alt"
      }],
      name: "img"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "alt"
      }],
      name: "img"
    },
    module: "HTML"
  }, {
    concept: {
      name: "imggroup"
    },
    module: "DTB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1B = imgRole;
imgRole$1.default = _default$1B;
var insertionRole$1 = {};
Object.defineProperty(insertionRole$1, "__esModule", {
  value: true
});
insertionRole$1.default = void 0;
var insertionRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "ins"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1A = insertionRole;
insertionRole$1.default = _default$1A;
var linkRole$1 = {};
Object.defineProperty(linkRole$1, "__esModule", {
  value: true
});
linkRole$1.default = void 0;
var linkRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-expanded": null,
    "aria-haspopup": null
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "href"
      }],
      name: "a"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "href"
      }],
      name: "area"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "command"]]
};
var _default$1z = linkRole;
linkRole$1.default = _default$1z;
var listRole$1 = {};
Object.defineProperty(listRole$1, "__esModule", {
  value: true
});
listRole$1.default = void 0;
var listRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "menu"
    },
    module: "HTML"
  }, {
    concept: {
      name: "ol"
    },
    module: "HTML"
  }, {
    concept: {
      name: "ul"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["listitem"]],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1y = listRole;
listRole$1.default = _default$1y;
var listboxRole$1 = {};
Object.defineProperty(listboxRole$1, "__esModule", {
  value: true
});
listboxRole$1.default = void 0;
var listboxRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-invalid": null,
    "aria-multiselectable": null,
    "aria-readonly": null,
    "aria-required": null,
    "aria-orientation": "vertical"
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: [">1"],
        name: "size"
      }],
      constraints: ["the size attribute value is greater than 1"],
      name: "select"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        name: "multiple"
      }],
      name: "select"
    },
    module: "HTML"
  }, {
    concept: {
      name: "datalist"
    },
    module: "HTML"
  }, {
    concept: {
      name: "list"
    },
    module: "ARIA"
  }, {
    concept: {
      name: "select"
    },
    module: "XForms"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["option", "group"], ["option"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
};
var _default$1x = listboxRole;
listboxRole$1.default = _default$1x;
var listitemRole$1 = {};
Object.defineProperty(listitemRole$1, "__esModule", {
  value: true
});
listitemRole$1.default = void 0;
var listitemRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-level": null,
    "aria-posinset": null,
    "aria-setsize": null
  },
  relatedConcepts: [{
    concept: {
      constraints: ["direct descendant of ol", "direct descendant of ul", "direct descendant of menu"],
      name: "li"
    },
    module: "HTML"
  }, {
    concept: {
      name: "item"
    },
    module: "XForms"
  }],
  requireContextRole: ["directory", "list"],
  requiredContextRole: ["directory", "list"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1w = listitemRole;
listitemRole$1.default = _default$1w;
var logRole$1 = {};
Object.defineProperty(logRole$1, "__esModule", {
  value: true
});
logRole$1.default = void 0;
var logRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-live": "polite"
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1v = logRole;
logRole$1.default = _default$1v;
var mainRole$1 = {};
Object.defineProperty(mainRole$1, "__esModule", {
  value: true
});
mainRole$1.default = void 0;
var mainRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "main"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$1u = mainRole;
mainRole$1.default = _default$1u;
var markRole$1 = {};
Object.defineProperty(markRole$1, "__esModule", {
  value: true
});
markRole$1.default = void 0;
var markRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: [],
  props: {
    "aria-braillelabel": null,
    "aria-brailleroledescription": null,
    "aria-description": null
  },
  relatedConcepts: [{
    concept: {
      name: "mark"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1t = markRole;
markRole$1.default = _default$1t;
var marqueeRole$1 = {};
Object.defineProperty(marqueeRole$1, "__esModule", {
  value: true
});
marqueeRole$1.default = void 0;
var marqueeRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1s = marqueeRole;
marqueeRole$1.default = _default$1s;
var mathRole$1 = {};
Object.defineProperty(mathRole$1, "__esModule", {
  value: true
});
mathRole$1.default = void 0;
var mathRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "math"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1r = mathRole;
mathRole$1.default = _default$1r;
var menuRole$1 = {};
Object.defineProperty(menuRole$1, "__esModule", {
  value: true
});
menuRole$1.default = void 0;
var menuRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-orientation": "vertical"
  },
  relatedConcepts: [{
    concept: {
      name: "MENU"
    },
    module: "JAPI"
  }, {
    concept: {
      name: "list"
    },
    module: "ARIA"
  }, {
    concept: {
      name: "select"
    },
    module: "XForms"
  }, {
    concept: {
      name: "sidebar"
    },
    module: "DTB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
};
var _default$1q = menuRole;
menuRole$1.default = _default$1q;
var menubarRole$1 = {};
Object.defineProperty(menubarRole$1, "__esModule", {
  value: true
});
menubarRole$1.default = void 0;
var menubarRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-orientation": "horizontal"
  },
  relatedConcepts: [{
    concept: {
      name: "toolbar"
    },
    module: "ARIA"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]]
};
var _default$1p = menubarRole;
menubarRole$1.default = _default$1p;
var menuitemRole$1 = {};
Object.defineProperty(menuitemRole$1, "__esModule", {
  value: true
});
menuitemRole$1.default = void 0;
var menuitemRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-posinset": null,
    "aria-setsize": null
  },
  relatedConcepts: [{
    concept: {
      name: "MENU_ITEM"
    },
    module: "JAPI"
  }, {
    concept: {
      name: "listitem"
    },
    module: "ARIA"
  }, {
    concept: {
      name: "option"
    },
    module: "ARIA"
  }],
  requireContextRole: ["group", "menu", "menubar"],
  requiredContextRole: ["group", "menu", "menubar"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "command"]]
};
var _default$1o = menuitemRole;
menuitemRole$1.default = _default$1o;
var menuitemcheckboxRole$1 = {};
Object.defineProperty(menuitemcheckboxRole$1, "__esModule", {
  value: true
});
menuitemcheckboxRole$1.default = void 0;
var menuitemcheckboxRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "menuitem"
    },
    module: "ARIA"
  }],
  requireContextRole: ["group", "menu", "menubar"],
  requiredContextRole: ["group", "menu", "menubar"],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-checked": null
  },
  superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]]
};
var _default$1n = menuitemcheckboxRole;
menuitemcheckboxRole$1.default = _default$1n;
var menuitemradioRole$1 = {};
Object.defineProperty(menuitemradioRole$1, "__esModule", {
  value: true
});
menuitemradioRole$1.default = void 0;
var menuitemradioRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "menuitem"
    },
    module: "ARIA"
  }],
  requireContextRole: ["group", "menu", "menubar"],
  requiredContextRole: ["group", "menu", "menubar"],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-checked": null
  },
  superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]]
};
var _default$1m = menuitemradioRole;
menuitemradioRole$1.default = _default$1m;
var meterRole$1 = {};
Object.defineProperty(meterRole$1, "__esModule", {
  value: true
});
meterRole$1.default = void 0;
var meterRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-valuetext": null,
    "aria-valuemax": "100",
    "aria-valuemin": "0"
  },
  relatedConcepts: [{
    concept: {
      name: "meter"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-valuenow": null
  },
  superClass: [["roletype", "structure", "range"]]
};
var _default$1l = meterRole;
meterRole$1.default = _default$1l;
var navigationRole$1 = {};
Object.defineProperty(navigationRole$1, "__esModule", {
  value: true
});
navigationRole$1.default = void 0;
var navigationRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "nav"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$1k = navigationRole;
navigationRole$1.default = _default$1k;
var noneRole$1 = {};
Object.defineProperty(noneRole$1, "__esModule", {
  value: true
});
noneRole$1.default = void 0;
var noneRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: [],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: []
};
var _default$1j = noneRole;
noneRole$1.default = _default$1j;
var noteRole$1 = {};
Object.defineProperty(noteRole$1, "__esModule", {
  value: true
});
noteRole$1.default = void 0;
var noteRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1i = noteRole;
noteRole$1.default = _default$1i;
var optionRole$1 = {};
Object.defineProperty(optionRole$1, "__esModule", {
  value: true
});
optionRole$1.default = void 0;
var optionRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-checked": null,
    "aria-posinset": null,
    "aria-setsize": null,
    "aria-selected": "false"
  },
  relatedConcepts: [{
    concept: {
      name: "item"
    },
    module: "XForms"
  }, {
    concept: {
      name: "listitem"
    },
    module: "ARIA"
  }, {
    concept: {
      name: "option"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-selected": "false"
  },
  superClass: [["roletype", "widget", "input"]]
};
var _default$1h = optionRole;
optionRole$1.default = _default$1h;
var paragraphRole$1 = {};
Object.defineProperty(paragraphRole$1, "__esModule", {
  value: true
});
paragraphRole$1.default = void 0;
var paragraphRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "p"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$1g = paragraphRole;
paragraphRole$1.default = _default$1g;
var presentationRole$1 = {};
Object.defineProperty(presentationRole$1, "__esModule", {
  value: true
});
presentationRole$1.default = void 0;
var presentationRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      attributes: [{
        name: "alt",
        value: ""
      }],
      name: "img"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$1f = presentationRole;
presentationRole$1.default = _default$1f;
var progressbarRole$1 = {};
Object.defineProperty(progressbarRole$1, "__esModule", {
  value: true
});
progressbarRole$1.default = void 0;
var progressbarRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-valuetext": null
  },
  relatedConcepts: [{
    concept: {
      name: "progress"
    },
    module: "HTML"
  }, {
    concept: {
      name: "status"
    },
    module: "ARIA"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
};
var _default$1e = progressbarRole;
progressbarRole$1.default = _default$1e;
var radioRole$1 = {};
Object.defineProperty(radioRole$1, "__esModule", {
  value: true
});
radioRole$1.default = void 0;
var radioRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-checked": null,
    "aria-posinset": null,
    "aria-setsize": null
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        name: "type",
        value: "radio"
      }],
      name: "input"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-checked": null
  },
  superClass: [["roletype", "widget", "input"]]
};
var _default$1d = radioRole;
radioRole$1.default = _default$1d;
var radiogroupRole$1 = {};
Object.defineProperty(radiogroupRole$1, "__esModule", {
  value: true
});
radiogroupRole$1.default = void 0;
var radiogroupRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-invalid": null,
    "aria-readonly": null,
    "aria-required": null
  },
  relatedConcepts: [{
    concept: {
      name: "list"
    },
    module: "ARIA"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["radio"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
};
var _default$1c = radiogroupRole;
radiogroupRole$1.default = _default$1c;
var regionRole$1 = {};
Object.defineProperty(regionRole$1, "__esModule", {
  value: true
});
regionRole$1.default = void 0;
var regionRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "aria-label"
      }],
      name: "section"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["set"],
        name: "aria-labelledby"
      }],
      name: "section"
    },
    module: "HTML"
  }, {
    concept: {
      name: "Device Independence Glossart perceivable unit"
    }
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$1b = regionRole;
regionRole$1.default = _default$1b;
var rowRole$1 = {};
Object.defineProperty(rowRole$1, "__esModule", {
  value: true
});
rowRole$1.default = void 0;
var rowRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-colindex": null,
    "aria-expanded": null,
    "aria-level": null,
    "aria-posinset": null,
    "aria-rowindex": null,
    "aria-selected": null,
    "aria-setsize": null
  },
  relatedConcepts: [{
    concept: {
      name: "tr"
    },
    module: "HTML"
  }],
  requireContextRole: ["grid", "rowgroup", "table", "treegrid"],
  requiredContextRole: ["grid", "rowgroup", "table", "treegrid"],
  requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]]
};
var _default$1a = rowRole;
rowRole$1.default = _default$1a;
var rowgroupRole$1 = {};
Object.defineProperty(rowgroupRole$1, "__esModule", {
  value: true
});
rowgroupRole$1.default = void 0;
var rowgroupRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "tbody"
    },
    module: "HTML"
  }, {
    concept: {
      name: "tfoot"
    },
    module: "HTML"
  }, {
    concept: {
      name: "thead"
    },
    module: "HTML"
  }],
  requireContextRole: ["grid", "table", "treegrid"],
  requiredContextRole: ["grid", "table", "treegrid"],
  requiredOwnedElements: [["row"]],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$19 = rowgroupRole;
rowgroupRole$1.default = _default$19;
var rowheaderRole$1 = {};
Object.defineProperty(rowheaderRole$1, "__esModule", {
  value: true
});
rowheaderRole$1.default = void 0;
var rowheaderRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-sort": null
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        name: "scope",
        value: "row"
      }],
      name: "th"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        name: "scope",
        value: "rowgroup"
      }],
      name: "th"
    },
    module: "HTML"
  }],
  requireContextRole: ["row", "rowgroup"],
  requiredContextRole: ["row", "rowgroup"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
};
var _default$18 = rowheaderRole;
rowheaderRole$1.default = _default$18;
var scrollbarRole$1 = {};
Object.defineProperty(scrollbarRole$1, "__esModule", {
  value: true
});
scrollbarRole$1.default = void 0;
var scrollbarRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-valuetext": null,
    "aria-orientation": "vertical",
    "aria-valuemax": "100",
    "aria-valuemin": "0"
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-controls": null,
    "aria-valuenow": null
  },
  superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
};
var _default$17 = scrollbarRole;
scrollbarRole$1.default = _default$17;
var searchRole$1 = {};
Object.defineProperty(searchRole$1, "__esModule", {
  value: true
});
searchRole$1.default = void 0;
var searchRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$16 = searchRole;
searchRole$1.default = _default$16;
var searchboxRole$1 = {};
Object.defineProperty(searchboxRole$1, "__esModule", {
  value: true
});
searchboxRole$1.default = void 0;
var searchboxRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "list"
      }, {
        name: "type",
        value: "search"
      }],
      constraints: ["the list attribute is not set"],
      name: "input"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "input", "textbox"]]
};
var _default$15 = searchboxRole;
searchboxRole$1.default = _default$15;
var separatorRole$1 = {};
Object.defineProperty(separatorRole$1, "__esModule", {
  value: true
});
separatorRole$1.default = void 0;
var separatorRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-orientation": "horizontal",
    "aria-valuemax": "100",
    "aria-valuemin": "0",
    "aria-valuenow": null,
    "aria-valuetext": null
  },
  relatedConcepts: [{
    concept: {
      name: "hr"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure"]]
};
var _default$14 = separatorRole;
separatorRole$1.default = _default$14;
var sliderRole$1 = {};
Object.defineProperty(sliderRole$1, "__esModule", {
  value: true
});
sliderRole$1.default = void 0;
var sliderRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-haspopup": null,
    "aria-invalid": null,
    "aria-readonly": null,
    "aria-valuetext": null,
    "aria-orientation": "horizontal",
    "aria-valuemax": "100",
    "aria-valuemin": "0"
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        name: "type",
        value: "range"
      }],
      name: "input"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-valuenow": null
  },
  superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]]
};
var _default$13 = sliderRole;
sliderRole$1.default = _default$13;
var spinbuttonRole$1 = {};
Object.defineProperty(spinbuttonRole$1, "__esModule", {
  value: true
});
spinbuttonRole$1.default = void 0;
var spinbuttonRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-invalid": null,
    "aria-readonly": null,
    "aria-required": null,
    "aria-valuetext": null,
    "aria-valuenow": "0"
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        name: "type",
        value: "number"
      }],
      name: "input"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]]
};
var _default$12 = spinbuttonRole;
spinbuttonRole$1.default = _default$12;
var statusRole$1 = {};
Object.defineProperty(statusRole$1, "__esModule", {
  value: true
});
statusRole$1.default = void 0;
var statusRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-atomic": "true",
    "aria-live": "polite"
  },
  relatedConcepts: [{
    concept: {
      name: "output"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$11 = statusRole;
statusRole$1.default = _default$11;
var strongRole$1 = {};
Object.defineProperty(strongRole$1, "__esModule", {
  value: true
});
strongRole$1.default = void 0;
var strongRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "strong"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$10 = strongRole;
strongRole$1.default = _default$10;
var subscriptRole$1 = {};
Object.defineProperty(subscriptRole$1, "__esModule", {
  value: true
});
subscriptRole$1.default = void 0;
var subscriptRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "sub"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$$ = subscriptRole;
subscriptRole$1.default = _default$$;
var superscriptRole$1 = {};
Object.defineProperty(superscriptRole$1, "__esModule", {
  value: true
});
superscriptRole$1.default = void 0;
var superscriptRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["prohibited"],
  prohibitedProps: ["aria-label", "aria-labelledby"],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "sup"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$_ = superscriptRole;
superscriptRole$1.default = _default$_;
var switchRole$1 = {};
Object.defineProperty(switchRole$1, "__esModule", {
  value: true
});
switchRole$1.default = void 0;
var switchRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "button"
    },
    module: "ARIA"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-checked": null
  },
  superClass: [["roletype", "widget", "input", "checkbox"]]
};
var _default$Z = switchRole;
switchRole$1.default = _default$Z;
var tabRole$1 = {};
Object.defineProperty(tabRole$1, "__esModule", {
  value: true
});
tabRole$1.default = void 0;
var tabRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-posinset": null,
    "aria-setsize": null,
    "aria-selected": "false"
  },
  relatedConcepts: [],
  requireContextRole: ["tablist"],
  requiredContextRole: ["tablist"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]]
};
var _default$Y = tabRole;
tabRole$1.default = _default$Y;
var tableRole$1 = {};
Object.defineProperty(tableRole$1, "__esModule", {
  value: true
});
tableRole$1.default = void 0;
var tableRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-colcount": null,
    "aria-rowcount": null
  },
  relatedConcepts: [{
    concept: {
      name: "table"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["row"], ["row", "rowgroup"]],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$X = tableRole;
tableRole$1.default = _default$X;
var tablistRole$1 = {};
Object.defineProperty(tablistRole$1, "__esModule", {
  value: true
});
tablistRole$1.default = void 0;
var tablistRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-level": null,
    "aria-multiselectable": null,
    "aria-orientation": "horizontal"
  },
  relatedConcepts: [{
    module: "DAISY",
    concept: {
      name: "guide"
    }
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["tab"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite"]]
};
var _default$W = tablistRole;
tablistRole$1.default = _default$W;
var tabpanelRole$1 = {};
Object.defineProperty(tabpanelRole$1, "__esModule", {
  value: true
});
tabpanelRole$1.default = void 0;
var tabpanelRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$V = tabpanelRole;
tabpanelRole$1.default = _default$V;
var termRole$1 = {};
Object.defineProperty(termRole$1, "__esModule", {
  value: true
});
termRole$1.default = void 0;
var termRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "dfn"
    },
    module: "HTML"
  }, {
    concept: {
      name: "dt"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$U = termRole;
termRole$1.default = _default$U;
var textboxRole$1 = {};
Object.defineProperty(textboxRole$1, "__esModule", {
  value: true
});
textboxRole$1.default = void 0;
var textboxRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-activedescendant": null,
    "aria-autocomplete": null,
    "aria-errormessage": null,
    "aria-haspopup": null,
    "aria-invalid": null,
    "aria-multiline": null,
    "aria-placeholder": null,
    "aria-readonly": null,
    "aria-required": null
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "type"
      }, {
        constraints: ["undefined"],
        name: "list"
      }],
      constraints: ["the list attribute is not set"],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "list"
      }, {
        name: "type",
        value: "email"
      }],
      constraints: ["the list attribute is not set"],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "list"
      }, {
        name: "type",
        value: "tel"
      }],
      constraints: ["the list attribute is not set"],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "list"
      }, {
        name: "type",
        value: "text"
      }],
      constraints: ["the list attribute is not set"],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      attributes: [{
        constraints: ["undefined"],
        name: "list"
      }, {
        name: "type",
        value: "url"
      }],
      constraints: ["the list attribute is not set"],
      name: "input"
    },
    module: "HTML"
  }, {
    concept: {
      name: "input"
    },
    module: "XForms"
  }, {
    concept: {
      name: "textarea"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "input"]]
};
var _default$T = textboxRole;
textboxRole$1.default = _default$T;
var timeRole$1 = {};
Object.defineProperty(timeRole$1, "__esModule", {
  value: true
});
timeRole$1.default = void 0;
var timeRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "time"
    },
    module: "HTML"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$S = timeRole;
timeRole$1.default = _default$S;
var timerRole$1 = {};
Object.defineProperty(timerRole$1, "__esModule", {
  value: true
});
timerRole$1.default = void 0;
var timerRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "status"]]
};
var _default$R = timerRole;
timerRole$1.default = _default$R;
var toolbarRole$1 = {};
Object.defineProperty(toolbarRole$1, "__esModule", {
  value: true
});
toolbarRole$1.default = void 0;
var toolbarRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-orientation": "horizontal"
  },
  relatedConcepts: [{
    concept: {
      name: "menubar"
    },
    module: "ARIA"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "group"]]
};
var _default$Q = toolbarRole;
toolbarRole$1.default = _default$Q;
var tooltipRole$1 = {};
Object.defineProperty(tooltipRole$1, "__esModule", {
  value: true
});
tooltipRole$1.default = void 0;
var tooltipRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$P = tooltipRole;
tooltipRole$1.default = _default$P;
var treeRole$1 = {};
Object.defineProperty(treeRole$1, "__esModule", {
  value: true
});
treeRole$1.default = void 0;
var treeRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-invalid": null,
    "aria-multiselectable": null,
    "aria-required": null,
    "aria-orientation": "vertical"
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["treeitem", "group"], ["treeitem"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
};
var _default$O = treeRole;
treeRole$1.default = _default$O;
var treegridRole$1 = {};
Object.defineProperty(treegridRole$1, "__esModule", {
  value: true
});
treegridRole$1.default = void 0;
var treegridRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["row"], ["row", "rowgroup"]],
  requiredProps: {},
  superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]]
};
var _default$N = treegridRole;
treegridRole$1.default = _default$N;
var treeitemRole$1 = {};
Object.defineProperty(treeitemRole$1, "__esModule", {
  value: true
});
treeitemRole$1.default = void 0;
var treeitemRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-expanded": null,
    "aria-haspopup": null
  },
  relatedConcepts: [],
  requireContextRole: ["group", "tree"],
  requiredContextRole: ["group", "tree"],
  requiredOwnedElements: [],
  requiredProps: {
    "aria-selected": null
  },
  superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]]
};
var _default$M = treeitemRole;
treeitemRole$1.default = _default$M;
Object.defineProperty(ariaLiteralRoles$1, "__esModule", {
  value: true
});
ariaLiteralRoles$1.default = void 0;
var _alertRole = _interopRequireDefault$6(alertRole$1);
var _alertdialogRole = _interopRequireDefault$6(alertdialogRole$1);
var _applicationRole = _interopRequireDefault$6(applicationRole$1);
var _articleRole = _interopRequireDefault$6(articleRole$1);
var _bannerRole = _interopRequireDefault$6(bannerRole$1);
var _blockquoteRole = _interopRequireDefault$6(blockquoteRole$1);
var _buttonRole = _interopRequireDefault$6(buttonRole$1);
var _captionRole = _interopRequireDefault$6(captionRole$1);
var _cellRole = _interopRequireDefault$6(cellRole$1);
var _checkboxRole = _interopRequireDefault$6(checkboxRole$1);
var _codeRole = _interopRequireDefault$6(codeRole$1);
var _columnheaderRole = _interopRequireDefault$6(columnheaderRole$1);
var _comboboxRole = _interopRequireDefault$6(comboboxRole$1);
var _complementaryRole = _interopRequireDefault$6(complementaryRole$1);
var _contentinfoRole = _interopRequireDefault$6(contentinfoRole$1);
var _definitionRole = _interopRequireDefault$6(definitionRole$1);
var _deletionRole = _interopRequireDefault$6(deletionRole$1);
var _dialogRole = _interopRequireDefault$6(dialogRole$1);
var _directoryRole = _interopRequireDefault$6(directoryRole$1);
var _documentRole = _interopRequireDefault$6(documentRole$1);
var _emphasisRole = _interopRequireDefault$6(emphasisRole$1);
var _feedRole = _interopRequireDefault$6(feedRole$1);
var _figureRole = _interopRequireDefault$6(figureRole$1);
var _formRole = _interopRequireDefault$6(formRole$1);
var _genericRole = _interopRequireDefault$6(genericRole$1);
var _gridRole = _interopRequireDefault$6(gridRole$1);
var _gridcellRole = _interopRequireDefault$6(gridcellRole$1);
var _groupRole = _interopRequireDefault$6(groupRole$1);
var _headingRole = _interopRequireDefault$6(headingRole$1);
var _imgRole = _interopRequireDefault$6(imgRole$1);
var _insertionRole = _interopRequireDefault$6(insertionRole$1);
var _linkRole = _interopRequireDefault$6(linkRole$1);
var _listRole = _interopRequireDefault$6(listRole$1);
var _listboxRole = _interopRequireDefault$6(listboxRole$1);
var _listitemRole = _interopRequireDefault$6(listitemRole$1);
var _logRole = _interopRequireDefault$6(logRole$1);
var _mainRole = _interopRequireDefault$6(mainRole$1);
var _markRole = _interopRequireDefault$6(markRole$1);
var _marqueeRole = _interopRequireDefault$6(marqueeRole$1);
var _mathRole = _interopRequireDefault$6(mathRole$1);
var _menuRole = _interopRequireDefault$6(menuRole$1);
var _menubarRole = _interopRequireDefault$6(menubarRole$1);
var _menuitemRole = _interopRequireDefault$6(menuitemRole$1);
var _menuitemcheckboxRole = _interopRequireDefault$6(menuitemcheckboxRole$1);
var _menuitemradioRole = _interopRequireDefault$6(menuitemradioRole$1);
var _meterRole = _interopRequireDefault$6(meterRole$1);
var _navigationRole = _interopRequireDefault$6(navigationRole$1);
var _noneRole = _interopRequireDefault$6(noneRole$1);
var _noteRole = _interopRequireDefault$6(noteRole$1);
var _optionRole = _interopRequireDefault$6(optionRole$1);
var _paragraphRole = _interopRequireDefault$6(paragraphRole$1);
var _presentationRole = _interopRequireDefault$6(presentationRole$1);
var _progressbarRole = _interopRequireDefault$6(progressbarRole$1);
var _radioRole = _interopRequireDefault$6(radioRole$1);
var _radiogroupRole = _interopRequireDefault$6(radiogroupRole$1);
var _regionRole = _interopRequireDefault$6(regionRole$1);
var _rowRole = _interopRequireDefault$6(rowRole$1);
var _rowgroupRole = _interopRequireDefault$6(rowgroupRole$1);
var _rowheaderRole = _interopRequireDefault$6(rowheaderRole$1);
var _scrollbarRole = _interopRequireDefault$6(scrollbarRole$1);
var _searchRole = _interopRequireDefault$6(searchRole$1);
var _searchboxRole = _interopRequireDefault$6(searchboxRole$1);
var _separatorRole = _interopRequireDefault$6(separatorRole$1);
var _sliderRole = _interopRequireDefault$6(sliderRole$1);
var _spinbuttonRole = _interopRequireDefault$6(spinbuttonRole$1);
var _statusRole = _interopRequireDefault$6(statusRole$1);
var _strongRole = _interopRequireDefault$6(strongRole$1);
var _subscriptRole = _interopRequireDefault$6(subscriptRole$1);
var _superscriptRole = _interopRequireDefault$6(superscriptRole$1);
var _switchRole = _interopRequireDefault$6(switchRole$1);
var _tabRole = _interopRequireDefault$6(tabRole$1);
var _tableRole = _interopRequireDefault$6(tableRole$1);
var _tablistRole = _interopRequireDefault$6(tablistRole$1);
var _tabpanelRole = _interopRequireDefault$6(tabpanelRole$1);
var _termRole = _interopRequireDefault$6(termRole$1);
var _textboxRole = _interopRequireDefault$6(textboxRole$1);
var _timeRole = _interopRequireDefault$6(timeRole$1);
var _timerRole = _interopRequireDefault$6(timerRole$1);
var _toolbarRole = _interopRequireDefault$6(toolbarRole$1);
var _tooltipRole = _interopRequireDefault$6(tooltipRole$1);
var _treeRole = _interopRequireDefault$6(treeRole$1);
var _treegridRole = _interopRequireDefault$6(treegridRole$1);
var _treeitemRole = _interopRequireDefault$6(treeitemRole$1);
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var ariaLiteralRoles = [["alert", _alertRole.default], ["alertdialog", _alertdialogRole.default], ["application", _applicationRole.default], ["article", _articleRole.default], ["banner", _bannerRole.default], ["blockquote", _blockquoteRole.default], ["button", _buttonRole.default], ["caption", _captionRole.default], ["cell", _cellRole.default], ["checkbox", _checkboxRole.default], ["code", _codeRole.default], ["columnheader", _columnheaderRole.default], ["combobox", _comboboxRole.default], ["complementary", _complementaryRole.default], ["contentinfo", _contentinfoRole.default], ["definition", _definitionRole.default], ["deletion", _deletionRole.default], ["dialog", _dialogRole.default], ["directory", _directoryRole.default], ["document", _documentRole.default], ["emphasis", _emphasisRole.default], ["feed", _feedRole.default], ["figure", _figureRole.default], ["form", _formRole.default], ["generic", _genericRole.default], ["grid", _gridRole.default], ["gridcell", _gridcellRole.default], ["group", _groupRole.default], ["heading", _headingRole.default], ["img", _imgRole.default], ["insertion", _insertionRole.default], ["link", _linkRole.default], ["list", _listRole.default], ["listbox", _listboxRole.default], ["listitem", _listitemRole.default], ["log", _logRole.default], ["main", _mainRole.default], ["mark", _markRole.default], ["marquee", _marqueeRole.default], ["math", _mathRole.default], ["menu", _menuRole.default], ["menubar", _menubarRole.default], ["menuitem", _menuitemRole.default], ["menuitemcheckbox", _menuitemcheckboxRole.default], ["menuitemradio", _menuitemradioRole.default], ["meter", _meterRole.default], ["navigation", _navigationRole.default], ["none", _noneRole.default], ["note", _noteRole.default], ["option", _optionRole.default], ["paragraph", _paragraphRole.default], ["presentation", _presentationRole.default], ["progressbar", _progressbarRole.default], ["radio", _radioRole.default], ["radiogroup", _radiogroupRole.default], ["region", _regionRole.default], ["row", _rowRole.default], ["rowgroup", _rowgroupRole.default], ["rowheader", _rowheaderRole.default], ["scrollbar", _scrollbarRole.default], ["search", _searchRole.default], ["searchbox", _searchboxRole.default], ["separator", _separatorRole.default], ["slider", _sliderRole.default], ["spinbutton", _spinbuttonRole.default], ["status", _statusRole.default], ["strong", _strongRole.default], ["subscript", _subscriptRole.default], ["superscript", _superscriptRole.default], ["switch", _switchRole.default], ["tab", _tabRole.default], ["table", _tableRole.default], ["tablist", _tablistRole.default], ["tabpanel", _tabpanelRole.default], ["term", _termRole.default], ["textbox", _textboxRole.default], ["time", _timeRole.default], ["timer", _timerRole.default], ["toolbar", _toolbarRole.default], ["tooltip", _tooltipRole.default], ["tree", _treeRole.default], ["treegrid", _treegridRole.default], ["treeitem", _treeitemRole.default]];
var _default$L = ariaLiteralRoles;
ariaLiteralRoles$1.default = _default$L;
var ariaDpubRoles$1 = {};
var docAbstractRole$1 = {};
Object.defineProperty(docAbstractRole$1, "__esModule", {
  value: true
});
docAbstractRole$1.default = void 0;
var docAbstractRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "abstract [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$K = docAbstractRole;
docAbstractRole$1.default = _default$K;
var docAcknowledgmentsRole$1 = {};
Object.defineProperty(docAcknowledgmentsRole$1, "__esModule", {
  value: true
});
docAcknowledgmentsRole$1.default = void 0;
var docAcknowledgmentsRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "acknowledgments [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$J = docAcknowledgmentsRole;
docAcknowledgmentsRole$1.default = _default$J;
var docAfterwordRole$1 = {};
Object.defineProperty(docAfterwordRole$1, "__esModule", {
  value: true
});
docAfterwordRole$1.default = void 0;
var docAfterwordRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "afterword [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$I = docAfterwordRole;
docAfterwordRole$1.default = _default$I;
var docAppendixRole$1 = {};
Object.defineProperty(docAppendixRole$1, "__esModule", {
  value: true
});
docAppendixRole$1.default = void 0;
var docAppendixRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "appendix [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$H = docAppendixRole;
docAppendixRole$1.default = _default$H;
var docBacklinkRole$1 = {};
Object.defineProperty(docBacklinkRole$1, "__esModule", {
  value: true
});
docBacklinkRole$1.default = void 0;
var docBacklinkRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "referrer [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "command", "link"]]
};
var _default$G = docBacklinkRole;
docBacklinkRole$1.default = _default$G;
var docBiblioentryRole$1 = {};
Object.defineProperty(docBiblioentryRole$1, "__esModule", {
  value: true
});
docBiblioentryRole$1.default = void 0;
var docBiblioentryRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "EPUB biblioentry [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: ["doc-bibliography"],
  requiredContextRole: ["doc-bibliography"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "listitem"]]
};
var _default$F = docBiblioentryRole;
docBiblioentryRole$1.default = _default$F;
var docBibliographyRole$1 = {};
Object.defineProperty(docBibliographyRole$1, "__esModule", {
  value: true
});
docBibliographyRole$1.default = void 0;
var docBibliographyRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "bibliography [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["doc-biblioentry"]],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$E = docBibliographyRole;
docBibliographyRole$1.default = _default$E;
var docBibliorefRole$1 = {};
Object.defineProperty(docBibliorefRole$1, "__esModule", {
  value: true
});
docBibliorefRole$1.default = void 0;
var docBibliorefRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "biblioref [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "command", "link"]]
};
var _default$D = docBibliorefRole;
docBibliorefRole$1.default = _default$D;
var docChapterRole$1 = {};
Object.defineProperty(docChapterRole$1, "__esModule", {
  value: true
});
docChapterRole$1.default = void 0;
var docChapterRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "chapter [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$C = docChapterRole;
docChapterRole$1.default = _default$C;
var docColophonRole$1 = {};
Object.defineProperty(docColophonRole$1, "__esModule", {
  value: true
});
docColophonRole$1.default = void 0;
var docColophonRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "colophon [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$B = docColophonRole;
docColophonRole$1.default = _default$B;
var docConclusionRole$1 = {};
Object.defineProperty(docConclusionRole$1, "__esModule", {
  value: true
});
docConclusionRole$1.default = void 0;
var docConclusionRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "conclusion [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$A = docConclusionRole;
docConclusionRole$1.default = _default$A;
var docCoverRole$1 = {};
Object.defineProperty(docCoverRole$1, "__esModule", {
  value: true
});
docCoverRole$1.default = void 0;
var docCoverRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "cover [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "img"]]
};
var _default$z = docCoverRole;
docCoverRole$1.default = _default$z;
var docCreditRole$1 = {};
Object.defineProperty(docCreditRole$1, "__esModule", {
  value: true
});
docCreditRole$1.default = void 0;
var docCreditRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "credit [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$y = docCreditRole;
docCreditRole$1.default = _default$y;
var docCreditsRole$1 = {};
Object.defineProperty(docCreditsRole$1, "__esModule", {
  value: true
});
docCreditsRole$1.default = void 0;
var docCreditsRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "credits [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$x = docCreditsRole;
docCreditsRole$1.default = _default$x;
var docDedicationRole$1 = {};
Object.defineProperty(docDedicationRole$1, "__esModule", {
  value: true
});
docDedicationRole$1.default = void 0;
var docDedicationRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "dedication [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$w = docDedicationRole;
docDedicationRole$1.default = _default$w;
var docEndnoteRole$1 = {};
Object.defineProperty(docEndnoteRole$1, "__esModule", {
  value: true
});
docEndnoteRole$1.default = void 0;
var docEndnoteRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "rearnote [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: ["doc-endnotes"],
  requiredContextRole: ["doc-endnotes"],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "listitem"]]
};
var _default$v = docEndnoteRole;
docEndnoteRole$1.default = _default$v;
var docEndnotesRole$1 = {};
Object.defineProperty(docEndnotesRole$1, "__esModule", {
  value: true
});
docEndnotesRole$1.default = void 0;
var docEndnotesRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "rearnotes [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["doc-endnote"]],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$u = docEndnotesRole;
docEndnotesRole$1.default = _default$u;
var docEpigraphRole$1 = {};
Object.defineProperty(docEpigraphRole$1, "__esModule", {
  value: true
});
docEpigraphRole$1.default = void 0;
var docEpigraphRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "epigraph [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$t = docEpigraphRole;
docEpigraphRole$1.default = _default$t;
var docEpilogueRole$1 = {};
Object.defineProperty(docEpilogueRole$1, "__esModule", {
  value: true
});
docEpilogueRole$1.default = void 0;
var docEpilogueRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "epilogue [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$s = docEpilogueRole;
docEpilogueRole$1.default = _default$s;
var docErrataRole$1 = {};
Object.defineProperty(docErrataRole$1, "__esModule", {
  value: true
});
docErrataRole$1.default = void 0;
var docErrataRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "errata [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$r = docErrataRole;
docErrataRole$1.default = _default$r;
var docExampleRole$1 = {};
Object.defineProperty(docExampleRole$1, "__esModule", {
  value: true
});
docExampleRole$1.default = void 0;
var docExampleRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$q = docExampleRole;
docExampleRole$1.default = _default$q;
var docFootnoteRole$1 = {};
Object.defineProperty(docFootnoteRole$1, "__esModule", {
  value: true
});
docFootnoteRole$1.default = void 0;
var docFootnoteRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "footnote [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$p = docFootnoteRole;
docFootnoteRole$1.default = _default$p;
var docForewordRole$1 = {};
Object.defineProperty(docForewordRole$1, "__esModule", {
  value: true
});
docForewordRole$1.default = void 0;
var docForewordRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "foreword [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$o = docForewordRole;
docForewordRole$1.default = _default$o;
var docGlossaryRole$1 = {};
Object.defineProperty(docGlossaryRole$1, "__esModule", {
  value: true
});
docGlossaryRole$1.default = void 0;
var docGlossaryRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "glossary [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [["definition"], ["term"]],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$n = docGlossaryRole;
docGlossaryRole$1.default = _default$n;
var docGlossrefRole$1 = {};
Object.defineProperty(docGlossrefRole$1, "__esModule", {
  value: true
});
docGlossrefRole$1.default = void 0;
var docGlossrefRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "glossref [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "command", "link"]]
};
var _default$m = docGlossrefRole;
docGlossrefRole$1.default = _default$m;
var docIndexRole$1 = {};
Object.defineProperty(docIndexRole$1, "__esModule", {
  value: true
});
docIndexRole$1.default = void 0;
var docIndexRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "index [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
};
var _default$l = docIndexRole;
docIndexRole$1.default = _default$l;
var docIntroductionRole$1 = {};
Object.defineProperty(docIntroductionRole$1, "__esModule", {
  value: true
});
docIntroductionRole$1.default = void 0;
var docIntroductionRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "introduction [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$k = docIntroductionRole;
docIntroductionRole$1.default = _default$k;
var docNoterefRole$1 = {};
Object.defineProperty(docNoterefRole$1, "__esModule", {
  value: true
});
docNoterefRole$1.default = void 0;
var docNoterefRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "noteref [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "widget", "command", "link"]]
};
var _default$j = docNoterefRole;
docNoterefRole$1.default = _default$j;
var docNoticeRole$1 = {};
Object.defineProperty(docNoticeRole$1, "__esModule", {
  value: true
});
docNoticeRole$1.default = void 0;
var docNoticeRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "notice [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "note"]]
};
var _default$i = docNoticeRole;
docNoticeRole$1.default = _default$i;
var docPagebreakRole$1 = {};
Object.defineProperty(docPagebreakRole$1, "__esModule", {
  value: true
});
docPagebreakRole$1.default = void 0;
var docPagebreakRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "pagebreak [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "separator"]]
};
var _default$h = docPagebreakRole;
docPagebreakRole$1.default = _default$h;
var docPagelistRole$1 = {};
Object.defineProperty(docPagelistRole$1, "__esModule", {
  value: true
});
docPagelistRole$1.default = void 0;
var docPagelistRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "page-list [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
};
var _default$g = docPagelistRole;
docPagelistRole$1.default = _default$g;
var docPartRole$1 = {};
Object.defineProperty(docPartRole$1, "__esModule", {
  value: true
});
docPartRole$1.default = void 0;
var docPartRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "part [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$f = docPartRole;
docPartRole$1.default = _default$f;
var docPrefaceRole$1 = {};
Object.defineProperty(docPrefaceRole$1, "__esModule", {
  value: true
});
docPrefaceRole$1.default = void 0;
var docPrefaceRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "preface [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$e = docPrefaceRole;
docPrefaceRole$1.default = _default$e;
var docPrologueRole$1 = {};
Object.defineProperty(docPrologueRole$1, "__esModule", {
  value: true
});
docPrologueRole$1.default = void 0;
var docPrologueRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "prologue [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark"]]
};
var _default$d = docPrologueRole;
docPrologueRole$1.default = _default$d;
var docPullquoteRole$1 = {};
Object.defineProperty(docPullquoteRole$1, "__esModule", {
  value: true
});
docPullquoteRole$1.default = void 0;
var docPullquoteRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {},
  relatedConcepts: [{
    concept: {
      name: "pullquote [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["none"]]
};
var _default$c = docPullquoteRole;
docPullquoteRole$1.default = _default$c;
var docQnaRole$1 = {};
Object.defineProperty(docQnaRole$1, "__esModule", {
  value: true
});
docQnaRole$1.default = void 0;
var docQnaRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "qna [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section"]]
};
var _default$b = docQnaRole;
docQnaRole$1.default = _default$b;
var docSubtitleRole$1 = {};
Object.defineProperty(docSubtitleRole$1, "__esModule", {
  value: true
});
docSubtitleRole$1.default = void 0;
var docSubtitleRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "subtitle [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "sectionhead"]]
};
var _default$a = docSubtitleRole;
docSubtitleRole$1.default = _default$a;
var docTipRole$1 = {};
Object.defineProperty(docTipRole$1, "__esModule", {
  value: true
});
docTipRole$1.default = void 0;
var docTipRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "help [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "note"]]
};
var _default$9 = docTipRole;
docTipRole$1.default = _default$9;
var docTocRole$1 = {};
Object.defineProperty(docTocRole$1, "__esModule", {
  value: true
});
docTocRole$1.default = void 0;
var docTocRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    concept: {
      name: "toc [EPUB-SSV]"
    },
    module: "EPUB"
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
};
var _default$8 = docTocRole;
docTocRole$1.default = _default$8;
Object.defineProperty(ariaDpubRoles$1, "__esModule", {
  value: true
});
ariaDpubRoles$1.default = void 0;
var _docAbstractRole = _interopRequireDefault$5(docAbstractRole$1);
var _docAcknowledgmentsRole = _interopRequireDefault$5(docAcknowledgmentsRole$1);
var _docAfterwordRole = _interopRequireDefault$5(docAfterwordRole$1);
var _docAppendixRole = _interopRequireDefault$5(docAppendixRole$1);
var _docBacklinkRole = _interopRequireDefault$5(docBacklinkRole$1);
var _docBiblioentryRole = _interopRequireDefault$5(docBiblioentryRole$1);
var _docBibliographyRole = _interopRequireDefault$5(docBibliographyRole$1);
var _docBibliorefRole = _interopRequireDefault$5(docBibliorefRole$1);
var _docChapterRole = _interopRequireDefault$5(docChapterRole$1);
var _docColophonRole = _interopRequireDefault$5(docColophonRole$1);
var _docConclusionRole = _interopRequireDefault$5(docConclusionRole$1);
var _docCoverRole = _interopRequireDefault$5(docCoverRole$1);
var _docCreditRole = _interopRequireDefault$5(docCreditRole$1);
var _docCreditsRole = _interopRequireDefault$5(docCreditsRole$1);
var _docDedicationRole = _interopRequireDefault$5(docDedicationRole$1);
var _docEndnoteRole = _interopRequireDefault$5(docEndnoteRole$1);
var _docEndnotesRole = _interopRequireDefault$5(docEndnotesRole$1);
var _docEpigraphRole = _interopRequireDefault$5(docEpigraphRole$1);
var _docEpilogueRole = _interopRequireDefault$5(docEpilogueRole$1);
var _docErrataRole = _interopRequireDefault$5(docErrataRole$1);
var _docExampleRole = _interopRequireDefault$5(docExampleRole$1);
var _docFootnoteRole = _interopRequireDefault$5(docFootnoteRole$1);
var _docForewordRole = _interopRequireDefault$5(docForewordRole$1);
var _docGlossaryRole = _interopRequireDefault$5(docGlossaryRole$1);
var _docGlossrefRole = _interopRequireDefault$5(docGlossrefRole$1);
var _docIndexRole = _interopRequireDefault$5(docIndexRole$1);
var _docIntroductionRole = _interopRequireDefault$5(docIntroductionRole$1);
var _docNoterefRole = _interopRequireDefault$5(docNoterefRole$1);
var _docNoticeRole = _interopRequireDefault$5(docNoticeRole$1);
var _docPagebreakRole = _interopRequireDefault$5(docPagebreakRole$1);
var _docPagelistRole = _interopRequireDefault$5(docPagelistRole$1);
var _docPartRole = _interopRequireDefault$5(docPartRole$1);
var _docPrefaceRole = _interopRequireDefault$5(docPrefaceRole$1);
var _docPrologueRole = _interopRequireDefault$5(docPrologueRole$1);
var _docPullquoteRole = _interopRequireDefault$5(docPullquoteRole$1);
var _docQnaRole = _interopRequireDefault$5(docQnaRole$1);
var _docSubtitleRole = _interopRequireDefault$5(docSubtitleRole$1);
var _docTipRole = _interopRequireDefault$5(docTipRole$1);
var _docTocRole = _interopRequireDefault$5(docTocRole$1);
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var ariaDpubRoles = [["doc-abstract", _docAbstractRole.default], ["doc-acknowledgments", _docAcknowledgmentsRole.default], ["doc-afterword", _docAfterwordRole.default], ["doc-appendix", _docAppendixRole.default], ["doc-backlink", _docBacklinkRole.default], ["doc-biblioentry", _docBiblioentryRole.default], ["doc-bibliography", _docBibliographyRole.default], ["doc-biblioref", _docBibliorefRole.default], ["doc-chapter", _docChapterRole.default], ["doc-colophon", _docColophonRole.default], ["doc-conclusion", _docConclusionRole.default], ["doc-cover", _docCoverRole.default], ["doc-credit", _docCreditRole.default], ["doc-credits", _docCreditsRole.default], ["doc-dedication", _docDedicationRole.default], ["doc-endnote", _docEndnoteRole.default], ["doc-endnotes", _docEndnotesRole.default], ["doc-epigraph", _docEpigraphRole.default], ["doc-epilogue", _docEpilogueRole.default], ["doc-errata", _docErrataRole.default], ["doc-example", _docExampleRole.default], ["doc-footnote", _docFootnoteRole.default], ["doc-foreword", _docForewordRole.default], ["doc-glossary", _docGlossaryRole.default], ["doc-glossref", _docGlossrefRole.default], ["doc-index", _docIndexRole.default], ["doc-introduction", _docIntroductionRole.default], ["doc-noteref", _docNoterefRole.default], ["doc-notice", _docNoticeRole.default], ["doc-pagebreak", _docPagebreakRole.default], ["doc-pagelist", _docPagelistRole.default], ["doc-part", _docPartRole.default], ["doc-preface", _docPrefaceRole.default], ["doc-prologue", _docPrologueRole.default], ["doc-pullquote", _docPullquoteRole.default], ["doc-qna", _docQnaRole.default], ["doc-subtitle", _docSubtitleRole.default], ["doc-tip", _docTipRole.default], ["doc-toc", _docTocRole.default]];
var _default$7 = ariaDpubRoles;
ariaDpubRoles$1.default = _default$7;
var ariaGraphicsRoles$1 = {};
var graphicsDocumentRole$1 = {};
Object.defineProperty(graphicsDocumentRole$1, "__esModule", {
  value: true
});
graphicsDocumentRole$1.default = void 0;
var graphicsDocumentRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    module: "GRAPHICS",
    concept: {
      name: "graphics-object"
    }
  }, {
    module: "ARIA",
    concept: {
      name: "img"
    }
  }, {
    module: "ARIA",
    concept: {
      name: "article"
    }
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "document"]]
};
var _default$6 = graphicsDocumentRole;
graphicsDocumentRole$1.default = _default$6;
var graphicsObjectRole$1 = {};
Object.defineProperty(graphicsObjectRole$1, "__esModule", {
  value: true
});
graphicsObjectRole$1.default = void 0;
var graphicsObjectRole = {
  abstract: false,
  accessibleNameRequired: false,
  baseConcepts: [],
  childrenPresentational: false,
  nameFrom: ["author", "contents"],
  prohibitedProps: [],
  props: {
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [{
    module: "GRAPHICS",
    concept: {
      name: "graphics-document"
    }
  }, {
    module: "ARIA",
    concept: {
      name: "group"
    }
  }, {
    module: "ARIA",
    concept: {
      name: "img"
    }
  }, {
    module: "GRAPHICS",
    concept: {
      name: "graphics-symbol"
    }
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "group"]]
};
var _default$5 = graphicsObjectRole;
graphicsObjectRole$1.default = _default$5;
var graphicsSymbolRole$1 = {};
Object.defineProperty(graphicsSymbolRole$1, "__esModule", {
  value: true
});
graphicsSymbolRole$1.default = void 0;
var graphicsSymbolRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ["author"],
  prohibitedProps: [],
  props: {
    "aria-disabled": null,
    "aria-errormessage": null,
    "aria-expanded": null,
    "aria-haspopup": null,
    "aria-invalid": null
  },
  relatedConcepts: [],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [["roletype", "structure", "section", "img"]]
};
var _default$4 = graphicsSymbolRole;
graphicsSymbolRole$1.default = _default$4;
Object.defineProperty(ariaGraphicsRoles$1, "__esModule", {
  value: true
});
ariaGraphicsRoles$1.default = void 0;
var _graphicsDocumentRole = _interopRequireDefault$4(graphicsDocumentRole$1);
var _graphicsObjectRole = _interopRequireDefault$4(graphicsObjectRole$1);
var _graphicsSymbolRole = _interopRequireDefault$4(graphicsSymbolRole$1);
function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var ariaGraphicsRoles = [["graphics-document", _graphicsDocumentRole.default], ["graphics-object", _graphicsObjectRole.default], ["graphics-symbol", _graphicsSymbolRole.default]];
var _default$3 = ariaGraphicsRoles;
ariaGraphicsRoles$1.default = _default$3;
Object.defineProperty(rolesMap$1, "__esModule", {
  value: true
});
rolesMap$1.default = void 0;
var _ariaAbstractRoles = _interopRequireDefault$3(ariaAbstractRoles$1);
var _ariaLiteralRoles = _interopRequireDefault$3(ariaLiteralRoles$1);
var _ariaDpubRoles = _interopRequireDefault$3(ariaDpubRoles$1);
var _ariaGraphicsRoles = _interopRequireDefault$3(ariaGraphicsRoles$1);
var _iterationDecorator$2 = _interopRequireDefault$3(iterationDecorator$1);
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _createForOfIteratorHelper$2(o, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it2) {
    if (Array.isArray(o) || (it2 = _unsupportedIterableToArray$2(o)) || allowArrayLike) {
      if (it2) o = it2;
      var i2 = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i2 >= o.length) return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e2) {
        throw _e2;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e3) {
    didErr = true;
    err = _e3;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _slicedToArray$2(arr, i2) {
  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i2) || _unsupportedIterableToArray$2(arr, i2) || _nonIterableRest$2();
}
function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$2(o, minLen);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit$2(arr, i2) {
  var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i2 == null) return;
  var _arr = [];
  var _n2 = true;
  var _d2 = false;
  var _s2, _e2;
  try {
    for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
      _arr.push(_s2.value);
      if (i2 && _arr.length === i2) break;
    }
  } catch (err) {
    _d2 = true;
    _e2 = err;
  } finally {
    try {
      if (!_n2 && _i2["return"] != null) _i2["return"]();
    } finally {
      if (_d2) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles$2(arr) {
  if (Array.isArray(arr)) return arr;
}
var roles$1 = [].concat(_ariaAbstractRoles.default, _ariaLiteralRoles.default, _ariaDpubRoles.default, _ariaGraphicsRoles.default);
roles$1.forEach(function(_ref) {
  var _ref2 = _slicedToArray$2(_ref, 2), roleDefinition = _ref2[1];
  var _iterator = _createForOfIteratorHelper$2(roleDefinition.superClass), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var superClassIter = _step.value;
      var _iterator2 = _createForOfIteratorHelper$2(superClassIter), _step2;
      try {
        var _loop = function _loop2() {
          var superClassName = _step2.value;
          var superClassRoleTuple = roles$1.find(function(_ref3) {
            var _ref4 = _slicedToArray$2(_ref3, 1), name = _ref4[0];
            return name === superClassName;
          });
          if (superClassRoleTuple) {
            var superClassDefinition = superClassRoleTuple[1];
            for (var _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
              var prop = _Object$keys[_i2];
              if (
                // $FlowIssue Accessing the hasOwnProperty on the Object prototype is fine.
                !Object.prototype.hasOwnProperty.call(roleDefinition.props, prop)
              ) {
                Object.assign(roleDefinition.props, _defineProperty({}, prop, superClassDefinition.props[prop]));
              }
            }
          }
        };
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          _loop();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
});
var rolesMap = {
  entries: function entries3() {
    return roles$1;
  },
  forEach: function forEach3(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var _iterator3 = _createForOfIteratorHelper$2(roles$1), _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
        var _step3$value = _slicedToArray$2(_step3.value, 2), key = _step3$value[0], values6 = _step3$value[1];
        fn3.call(thisArg, values6, key, roles$1);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  },
  get: function get3(key) {
    var item = roles$1.find(function(tuple) {
      return tuple[0] === key ? true : false;
    });
    return item && item[1];
  },
  has: function has3(key) {
    return !!rolesMap.get(key);
  },
  keys: function keys3() {
    return roles$1.map(function(_ref5) {
      var _ref6 = _slicedToArray$2(_ref5, 1), key = _ref6[0];
      return key;
    });
  },
  values: function values3() {
    return roles$1.map(function(_ref7) {
      var _ref8 = _slicedToArray$2(_ref7, 2), values6 = _ref8[1];
      return values6;
    });
  }
};
var _default$2 = (0, _iterationDecorator$2.default)(rolesMap, rolesMap.entries());
rolesMap$1.default = _default$2;
var elementRoleMap$1 = {};
var lite = {};
var has4 = Object.prototype.hasOwnProperty;
function dequal(foo, bar) {
  var ctor, len;
  if (foo === bar) return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date) return foo.getTime() === bar.getTime();
    if (ctor === RegExp) return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len])) ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has4.call(foo, ctor) && ++len && !has4.call(bar, ctor)) return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}
lite.dequal = dequal;
Object.defineProperty(elementRoleMap$1, "__esModule", {
  value: true
});
elementRoleMap$1.default = void 0;
var _lite = lite;
var _iterationDecorator$1 = _interopRequireDefault$2(iterationDecorator$1);
var _rolesMap$2 = _interopRequireDefault$2(rolesMap$1);
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _slicedToArray$1(arr, i2) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i2) || _unsupportedIterableToArray$1(arr, i2) || _nonIterableRest$1();
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit$1(arr, i2) {
  var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i2 == null) return;
  var _arr = [];
  var _n2 = true;
  var _d2 = false;
  var _s2, _e2;
  try {
    for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
      _arr.push(_s2.value);
      if (i2 && _arr.length === i2) break;
    }
  } catch (err) {
    _d2 = true;
    _e2 = err;
  } finally {
    try {
      if (!_n2 && _i2["return"] != null) _i2["return"]();
    } finally {
      if (_d2) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr)) return arr;
}
function _createForOfIteratorHelper$1(o, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it2) {
    if (Array.isArray(o) || (it2 = _unsupportedIterableToArray$1(o)) || allowArrayLike) {
      if (it2) o = it2;
      var i2 = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i2 >= o.length) return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e2) {
        throw _e2;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e3) {
    didErr = true;
    err = _e3;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var elementRoles$1 = [];
var keys$1 = _rolesMap$2.default.keys();
for (var i$2 = 0; i$2 < keys$1.length; i$2++) {
  var key$1 = keys$1[i$2];
  var role$1 = _rolesMap$2.default.get(key$1);
  if (role$1) {
    var concepts$1 = [].concat(role$1.baseConcepts, role$1.relatedConcepts);
    for (var k$2 = 0; k$2 < concepts$1.length; k$2++) {
      var relation$1 = concepts$1[k$2];
      if (relation$1.module === "HTML") {
        (function() {
          var concept = relation$1.concept;
          if (concept) {
            var elementRoleRelation = elementRoles$1.find(function(relation) {
              return (0, _lite.dequal)(relation, concept);
            });
            var roles2;
            if (elementRoleRelation) {
              roles2 = elementRoleRelation[1];
            } else {
              roles2 = [];
            }
            var isUnique = true;
            for (var _i2 = 0; _i2 < roles2.length; _i2++) {
              if (roles2[_i2] === key$1) {
                isUnique = false;
                break;
              }
            }
            if (isUnique) {
              roles2.push(key$1);
            }
            elementRoles$1.push([concept, roles2]);
          }
        })();
      }
    }
  }
}
var elementRoleMap = {
  entries: function entries4() {
    return elementRoles$1;
  },
  forEach: function forEach4(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var _iterator = _createForOfIteratorHelper$1(elementRoles$1), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray$1(_step.value, 2), _key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, _key, elementRoles$1);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  },
  get: function get4(key) {
    var item = elementRoles$1.find(function(tuple) {
      return key.name === tuple[0].name && (0, _lite.dequal)(key.attributes, tuple[0].attributes);
    });
    return item && item[1];
  },
  has: function has5(key) {
    return !!elementRoleMap.get(key);
  },
  keys: function keys4() {
    return elementRoles$1.map(function(_ref) {
      var _ref2 = _slicedToArray$1(_ref, 1), key = _ref2[0];
      return key;
    });
  },
  values: function values4() {
    return elementRoles$1.map(function(_ref3) {
      var _ref4 = _slicedToArray$1(_ref3, 2), values6 = _ref4[1];
      return values6;
    });
  }
};
var _default$1 = (0, _iterationDecorator$1.default)(elementRoleMap, elementRoleMap.entries());
elementRoleMap$1.default = _default$1;
var roleElementMap$1 = {};
Object.defineProperty(roleElementMap$1, "__esModule", {
  value: true
});
roleElementMap$1.default = void 0;
var _iterationDecorator = _interopRequireDefault$1(iterationDecorator$1);
var _rolesMap$1 = _interopRequireDefault$1(rolesMap$1);
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit(arr, i2) {
  var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i2 == null) return;
  var _arr = [];
  var _n2 = true;
  var _d2 = false;
  var _s2, _e2;
  try {
    for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
      _arr.push(_s2.value);
      if (i2 && _arr.length === i2) break;
    }
  } catch (err) {
    _d2 = true;
    _e2 = err;
  } finally {
    try {
      if (!_n2 && _i2["return"] != null) _i2["return"]();
    } finally {
      if (_d2) throw _e2;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it2) {
    if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike) {
      if (it2) o = it2;
      var i2 = 0;
      var F2 = function F3() {
      };
      return { s: F2, n: function n2() {
        if (i2 >= o.length) return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e2) {
        throw _e2;
      }, f: F2 };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e3) {
    didErr = true;
    err = _e3;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var roleElement = [];
var keys5 = _rolesMap$1.default.keys();
for (var i$1 = 0; i$1 < keys5.length; i$1++) {
  var key = keys5[i$1];
  var role = _rolesMap$1.default.get(key);
  var relationConcepts = [];
  if (role) {
    var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
    for (var k$1 = 0; k$1 < concepts.length; k$1++) {
      var relation = concepts[k$1];
      if (relation.module === "HTML") {
        var concept = relation.concept;
        if (concept != null) {
          relationConcepts.push(concept);
        }
      }
    }
    if (relationConcepts.length > 0) {
      roleElement.push([key, relationConcepts]);
    }
  }
}
var roleElementMap = {
  entries: function entries5() {
    return roleElement;
  },
  forEach: function forEach5(fn3) {
    var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var _iterator = _createForOfIteratorHelper(roleElement), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _step$value = _slicedToArray(_step.value, 2), _key = _step$value[0], values6 = _step$value[1];
        fn3.call(thisArg, values6, _key, roleElement);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  },
  get: function get5(key) {
    var item = roleElement.find(function(tuple) {
      return tuple[0] === key ? true : false;
    });
    return item && item[1];
  },
  has: function has6(key) {
    return !!roleElementMap.get(key);
  },
  keys: function keys6() {
    return roleElement.map(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
      return key;
    });
  },
  values: function values5() {
    return roleElement.map(function(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2), values6 = _ref4[1];
      return values6;
    });
  }
};
var _default = (0, _iterationDecorator.default)(roleElementMap, roleElementMap.entries());
roleElementMap$1.default = _default;
Object.defineProperty(lib, "__esModule", {
  value: true
});
var roles_1 = lib.roles = roleElements_1 = lib.roleElements = elementRoles_1 = lib.elementRoles = lib.dom = lib.aria = void 0;
var _ariaPropsMap = _interopRequireDefault(ariaPropsMap$1);
var _domMap = _interopRequireDefault(domMap$1);
var _rolesMap = _interopRequireDefault(rolesMap$1);
var _elementRoleMap = _interopRequireDefault(elementRoleMap$1);
var _roleElementMap = _interopRequireDefault(roleElementMap$1);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var aria = _ariaPropsMap.default;
lib.aria = aria;
var dom = _domMap.default;
lib.dom = dom;
var roles = _rolesMap.default;
roles_1 = lib.roles = roles;
var elementRoles = _elementRoleMap.default;
var elementRoles_1 = lib.elementRoles = elementRoles;
var roleElements = _roleElementMap.default;
var roleElements_1 = lib.roleElements = roleElements;
var lzString$1 = { exports: {} };
lzString$1.exports;
(function(module2) {
  var LZString = function() {
    var f2 = String.fromCharCode;
    var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
    var baseReverseDic = {};
    function getBaseValue(alphabet, character) {
      if (!baseReverseDic[alphabet]) {
        baseReverseDic[alphabet] = {};
        for (var i2 = 0; i2 < alphabet.length; i2++) {
          baseReverseDic[alphabet][alphabet.charAt(i2)] = i2;
        }
      }
      return baseReverseDic[alphabet][character];
    }
    var LZString2 = {
      compressToBase64: function(input2) {
        if (input2 == null) return "";
        var res = LZString2._compress(input2, 6, function(a) {
          return keyStrBase64.charAt(a);
        });
        switch (res.length % 4) {
          default:
          case 0:
            return res;
          case 1:
            return res + "===";
          case 2:
            return res + "==";
          case 3:
            return res + "=";
        }
      },
      decompressFromBase64: function(input2) {
        if (input2 == null) return "";
        if (input2 == "") return null;
        return LZString2._decompress(input2.length, 32, function(index) {
          return getBaseValue(keyStrBase64, input2.charAt(index));
        });
      },
      compressToUTF16: function(input2) {
        if (input2 == null) return "";
        return LZString2._compress(input2, 15, function(a) {
          return f2(a + 32);
        }) + " ";
      },
      decompressFromUTF16: function(compressed) {
        if (compressed == null) return "";
        if (compressed == "") return null;
        return LZString2._decompress(compressed.length, 16384, function(index) {
          return compressed.charCodeAt(index) - 32;
        });
      },
      //compress into uint8array (UCS-2 big endian format)
      compressToUint8Array: function(uncompressed) {
        var compressed = LZString2.compress(uncompressed);
        var buf = new Uint8Array(compressed.length * 2);
        for (var i2 = 0, TotalLen = compressed.length; i2 < TotalLen; i2++) {
          var current_value = compressed.charCodeAt(i2);
          buf[i2 * 2] = current_value >>> 8;
          buf[i2 * 2 + 1] = current_value % 256;
        }
        return buf;
      },
      //decompress from uint8array (UCS-2 big endian format)
      decompressFromUint8Array: function(compressed) {
        if (compressed === null || compressed === void 0) {
          return LZString2.decompress(compressed);
        } else {
          var buf = new Array(compressed.length / 2);
          for (var i2 = 0, TotalLen = buf.length; i2 < TotalLen; i2++) {
            buf[i2] = compressed[i2 * 2] * 256 + compressed[i2 * 2 + 1];
          }
          var result = [];
          buf.forEach(function(c2) {
            result.push(f2(c2));
          });
          return LZString2.decompress(result.join(""));
        }
      },
      //compress into a string that is already URI encoded
      compressToEncodedURIComponent: function(input2) {
        if (input2 == null) return "";
        return LZString2._compress(input2, 6, function(a) {
          return keyStrUriSafe.charAt(a);
        });
      },
      //decompress from an output of compressToEncodedURIComponent
      decompressFromEncodedURIComponent: function(input2) {
        if (input2 == null) return "";
        if (input2 == "") return null;
        input2 = input2.replace(/ /g, "+");
        return LZString2._decompress(input2.length, 32, function(index) {
          return getBaseValue(keyStrUriSafe, input2.charAt(index));
        });
      },
      compress: function(uncompressed) {
        return LZString2._compress(uncompressed, 16, function(a) {
          return f2(a);
        });
      },
      _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
        if (uncompressed == null) return "";
        var i2, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
        for (ii = 0; ii < uncompressed.length; ii += 1) {
          context_c = uncompressed.charAt(ii);
          if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
            context_dictionary[context_c] = context_dictSize++;
            context_dictionaryToCreate[context_c] = true;
          }
          context_wc = context_w + context_c;
          if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
            context_w = context_wc;
          } else {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i2 = 0; i2 < context_numBits; i2++) {
                  context_data_val = context_data_val << 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                }
                value = context_w.charCodeAt(0);
                for (i2 = 0; i2 < 8; i2++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              } else {
                value = 1;
                for (i2 = 0; i2 < context_numBits; i2++) {
                  context_data_val = context_data_val << 1 | value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = 0;
                }
                value = context_w.charCodeAt(0);
                for (i2 = 0; i2 < 16; i2++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              delete context_dictionaryToCreate[context_w];
            } else {
              value = context_dictionary[context_w];
              for (i2 = 0; i2 < context_numBits; i2++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
            context_dictionary[context_wc] = context_dictSize++;
            context_w = String(context_c);
          }
        }
        if (context_w !== "") {
          if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
            if (context_w.charCodeAt(0) < 256) {
              for (i2 = 0; i2 < context_numBits; i2++) {
                context_data_val = context_data_val << 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
              }
              value = context_w.charCodeAt(0);
              for (i2 = 0; i2 < 8; i2++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            } else {
              value = 1;
              for (i2 = 0; i2 < context_numBits; i2++) {
                context_data_val = context_data_val << 1 | value;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = 0;
              }
              value = context_w.charCodeAt(0);
              for (i2 = 0; i2 < 16; i2++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
            delete context_dictionaryToCreate[context_w];
          } else {
            value = context_dictionary[context_w];
            for (i2 = 0; i2 < context_numBits; i2++) {
              context_data_val = context_data_val << 1 | value & 1;
              if (context_data_position == bitsPerChar - 1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
        }
        value = 2;
        for (i2 = 0; i2 < context_numBits; i2++) {
          context_data_val = context_data_val << 1 | value & 1;
          if (context_data_position == bitsPerChar - 1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }
        while (true) {
          context_data_val = context_data_val << 1;
          if (context_data_position == bitsPerChar - 1) {
            context_data.push(getCharFromInt(context_data_val));
            break;
          } else context_data_position++;
        }
        return context_data.join("");
      },
      decompress: function(compressed) {
        if (compressed == null) return "";
        if (compressed == "") return null;
        return LZString2._decompress(compressed.length, 32768, function(index) {
          return compressed.charCodeAt(index);
        });
      },
      _decompress: function(length, resetValue, getNextValue) {
        var dictionary = [], enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i2, w2, bits, resb, maxpower, power, c2, data = { val: getNextValue(0), position: resetValue, index: 1 };
        for (i2 = 0; i2 < 3; i2 += 1) {
          dictionary[i2] = i2;
        }
        bits = 0;
        maxpower = Math.pow(2, 2);
        power = 1;
        while (power != maxpower) {
          resb = data.val & data.position;
          data.position >>= 1;
          if (data.position == 0) {
            data.position = resetValue;
            data.val = getNextValue(data.index++);
          }
          bits |= (resb > 0 ? 1 : 0) * power;
          power <<= 1;
        }
        switch (bits) {
          case 0:
            bits = 0;
            maxpower = Math.pow(2, 8);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            c2 = f2(bits);
            break;
          case 1:
            bits = 0;
            maxpower = Math.pow(2, 16);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            c2 = f2(bits);
            break;
          case 2:
            return "";
        }
        dictionary[3] = c2;
        w2 = c2;
        result.push(c2);
        while (true) {
          if (data.index > length) {
            return "";
          }
          bits = 0;
          maxpower = Math.pow(2, numBits);
          power = 1;
          while (power != maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          switch (c2 = bits) {
            case 0:
              bits = 0;
              maxpower = Math.pow(2, 8);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              dictionary[dictSize++] = f2(bits);
              c2 = dictSize - 1;
              enlargeIn--;
              break;
            case 1:
              bits = 0;
              maxpower = Math.pow(2, 16);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              dictionary[dictSize++] = f2(bits);
              c2 = dictSize - 1;
              enlargeIn--;
              break;
            case 2:
              return result.join("");
          }
          if (enlargeIn == 0) {
            enlargeIn = Math.pow(2, numBits);
            numBits++;
          }
          if (dictionary[c2]) {
            entry = dictionary[c2];
          } else {
            if (c2 === dictSize) {
              entry = w2 + w2.charAt(0);
            } else {
              return null;
            }
          }
          result.push(entry);
          dictionary[dictSize++] = w2 + entry.charAt(0);
          enlargeIn--;
          w2 = entry;
          if (enlargeIn == 0) {
            enlargeIn = Math.pow(2, numBits);
            numBits++;
          }
        }
      }
    };
    return LZString2;
  }();
  if (module2 != null) {
    module2.exports = LZString;
  } else if (typeof angular !== "undefined" && angular != null) {
    angular.module("LZString", []).factory("LZString", function() {
      return LZString;
    });
  }
})(lzString$1);
var lzStringExports = lzString$1.exports;
const lzString = /* @__PURE__ */ getDefaultExportFromCjs(lzStringExports);
var define_process_env_default = {};
function escapeHTML(str) {
  return str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
const printProps = (keys7, props, config22, indentation, depth, refs, printer2) => {
  const indentationNext = indentation + config22.indent;
  const colors = config22.colors;
  return keys7.map((key) => {
    const value = props[key];
    let printed = printer2(value, config22, indentationNext, depth, refs);
    if (typeof value !== "string") {
      if (printed.indexOf("\n") !== -1) {
        printed = config22.spacingOuter + indentationNext + printed + config22.spacingOuter + indentation;
      }
      printed = "{" + printed + "}";
    }
    return config22.spacingInner + indentation + colors.prop.open + key + colors.prop.close + "=" + colors.value.open + printed + colors.value.close;
  }).join("");
};
const NodeTypeTextNode = 3;
const printChildren = (children, config22, indentation, depth, refs, printer2) => children.map((child) => {
  const printedChild = typeof child === "string" ? printText(child, config22) : printer2(child, config22, indentation, depth, refs);
  if (printedChild === "" && typeof child === "object" && child !== null && child.nodeType !== NodeTypeTextNode) {
    return "";
  }
  return config22.spacingOuter + indentation + printedChild;
}).join("");
const printText = (text, config22) => {
  const contentColor = config22.colors.content;
  return contentColor.open + escapeHTML(text) + contentColor.close;
};
const printComment = (comment, config22) => {
  const commentColor = config22.colors.comment;
  return commentColor.open + "<!--" + escapeHTML(comment) + "-->" + commentColor.close;
};
const printElement = (type3, printedProps, printedChildren, config22, indentation) => {
  const tagColor = config22.colors.tag;
  return tagColor.open + "<" + type3 + (printedProps && tagColor.close + printedProps + config22.spacingOuter + indentation + tagColor.open) + (printedChildren ? ">" + tagColor.close + printedChildren + config22.spacingOuter + indentation + tagColor.open + "</" + type3 : (printedProps && !config22.min ? "" : " ") + "/") + ">" + tagColor.close;
};
const printElementAsLeaf = (type3, config22) => {
  const tagColor = config22.colors.tag;
  return tagColor.open + "<" + type3 + tagColor.close + " …" + tagColor.open + " />" + tagColor.close;
};
const ELEMENT_NODE$1 = 1;
const TEXT_NODE$1 = 3;
const COMMENT_NODE$1 = 8;
const FRAGMENT_NODE = 11;
const ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;
const isCustomElement = (val) => {
  const {
    tagName
  } = val;
  return Boolean(typeof tagName === "string" && tagName.includes("-") || typeof val.hasAttribute === "function" && val.hasAttribute("is"));
};
const testNode = (val) => {
  const constructorName = val.constructor.name;
  const {
    nodeType
  } = val;
  return nodeType === ELEMENT_NODE$1 && (ELEMENT_REGEXP.test(constructorName) || isCustomElement(val)) || nodeType === TEXT_NODE$1 && constructorName === "Text" || nodeType === COMMENT_NODE$1 && constructorName === "Comment" || nodeType === FRAGMENT_NODE && constructorName === "DocumentFragment";
};
function nodeIsText(node) {
  return node.nodeType === TEXT_NODE$1;
}
function nodeIsComment(node) {
  return node.nodeType === COMMENT_NODE$1;
}
function nodeIsFragment(node) {
  return node.nodeType === FRAGMENT_NODE;
}
function createDOMElementFilter(filterNode) {
  return {
    test: (val) => {
      var _val$constructor2;
      return ((val == null || (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) || isCustomElement(val)) && testNode(val);
    },
    serialize: (node, config22, indentation, depth, refs, printer2) => {
      if (nodeIsText(node)) {
        return printText(node.data, config22);
      }
      if (nodeIsComment(node)) {
        return printComment(node.data, config22);
      }
      const type3 = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();
      if (++depth > config22.maxDepth) {
        return printElementAsLeaf(type3, config22);
      }
      return printElement(type3, printProps(nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {
        props[attribute.name] = attribute.value;
        return props;
      }, {}), config22, indentation + config22.indent, depth, refs, printer2), printChildren(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config22, indentation + config22.indent, depth, refs, printer2), config22, indentation);
    }
  };
}
let chalk = null;
let readFileSync = null;
let codeFrameColumns = null;
try {
  const nodeRequire = module && module.require;
  readFileSync = nodeRequire.call(module, "fs").readFileSync;
  codeFrameColumns = nodeRequire.call(module, "@babel/code-frame").codeFrameColumns;
  chalk = nodeRequire.call(module, "chalk");
} catch {
}
function getCodeFrame(frame) {
  const locationStart = frame.indexOf("(") + 1;
  const locationEnd = frame.indexOf(")");
  const frameLocation = frame.slice(locationStart, locationEnd);
  const frameLocationElements = frameLocation.split(":");
  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];
  let rawFileContents = "";
  try {
    rawFileContents = readFileSync(filename, "utf-8");
  } catch {
    return "";
  }
  const codeFrame = codeFrameColumns(rawFileContents, {
    start: {
      line,
      column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return chalk.dim(frameLocation) + "\n" + codeFrame + "\n";
}
function getUserCodeFrame() {
  if (!readFileSync || !codeFrameColumns) {
    return "";
  }
  const err = new Error();
  const firstClientCodeFrame = err.stack.split("\n").slice(1).find((frame) => !frame.includes("node_modules/"));
  return getCodeFrame(firstClientCodeFrame);
}
const TEXT_NODE = 3;
function jestFakeTimersAreEnabled() {
  if (typeof jest !== "undefined" && jest !== null) {
    return (
      // legacy timers
      setTimeout._isMockFunction === true || // modern timers
      // eslint-disable-next-line prefer-object-has-own -- not supported by our support matrix
      Object.prototype.hasOwnProperty.call(setTimeout, "clock")
    );
  }
  return false;
}
function getDocument() {
  if (typeof window === "undefined") {
    throw new Error("Could not find default container");
  }
  return window.document;
}
function getWindowFromNode(node) {
  if (node.defaultView) {
    return node.defaultView;
  } else if (node.ownerDocument && node.ownerDocument.defaultView) {
    return node.ownerDocument.defaultView;
  } else if (node.window) {
    return node.window;
  } else if (node.ownerDocument && node.ownerDocument.defaultView === null) {
    throw new Error("It looks like the window object is not available for the provided node.");
  } else if (node.then instanceof Function) {
    throw new Error("It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?");
  } else if (Array.isArray(node)) {
    throw new Error("It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?");
  } else if (typeof node.debug === "function" && typeof node.logTestingPlaygroundURL === "function") {
    throw new Error("It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?");
  } else {
    throw new Error("The given node is not an Element, the node type is: " + typeof node + ".");
  }
}
function checkContainerType(container) {
  if (!container || !(typeof container.querySelector === "function") || !(typeof container.querySelectorAll === "function")) {
    throw new TypeError("Expected container to be an Element, a Document or a DocumentFragment but got " + getTypeName(container) + ".");
  }
  function getTypeName(object) {
    if (typeof object === "object") {
      return object === null ? "null" : object.constructor.name;
    }
    return typeof object;
  }
}
const shouldHighlight = () => {
  if (typeof process === "undefined") {
    return false;
  }
  let colors;
  try {
    var _process$env;
    const colorsJSON = (_process$env = define_process_env_default) == null ? void 0 : _process$env.COLORS;
    if (colorsJSON) {
      colors = JSON.parse(colorsJSON);
    }
  } catch {
  }
  if (typeof colors === "boolean") {
    return colors;
  } else {
    return process.versions !== void 0 && process.versions.node !== void 0;
  }
};
const {
  DOMCollection
} = plugins_1;
const ELEMENT_NODE = 1;
const COMMENT_NODE = 8;
function filterCommentsAndDefaultIgnoreTagsTags(value) {
  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches(getConfig().defaultIgnore));
}
function prettyDOM(dom2, maxLength, options) {
  if (options === void 0) {
    options = {};
  }
  if (!dom2) {
    dom2 = getDocument().body;
  }
  if (typeof maxLength !== "number") {
    maxLength = typeof process !== "undefined" && typeof define_process_env_default !== "undefined" && define_process_env_default.DEBUG_PRINT_LIMIT || 7e3;
  }
  if (maxLength === 0) {
    return "";
  }
  if (dom2.documentElement) {
    dom2 = dom2.documentElement;
  }
  let domTypeName = typeof dom2;
  if (domTypeName === "object") {
    domTypeName = dom2.constructor.name;
  } else {
    dom2 = {};
  }
  if (!("outerHTML" in dom2)) {
    throw new TypeError("Expected an element or document but got " + domTypeName);
  }
  const {
    filterNode = filterCommentsAndDefaultIgnoreTagsTags,
    ...prettyFormatOptions
  } = options;
  const debugContent = format_1(dom2, {
    plugins: [createDOMElementFilter(filterNode), DOMCollection],
    printFunctionName: false,
    highlight: shouldHighlight(),
    ...prettyFormatOptions
  });
  return maxLength !== void 0 && dom2.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + "..." : debugContent;
}
const logDOM = function() {
  const userCodeFrame = getUserCodeFrame();
  if (userCodeFrame) {
    console.log(prettyDOM(...arguments) + "\n\n" + userCodeFrame);
  } else {
    console.log(prettyDOM(...arguments));
  }
};
let config = {
  testIdAttribute: "data-testid",
  asyncUtilTimeout: 1e3,
  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.
  // forcing react-testing-library to wrap all async functions would've been
  // a total nightmare (consider wrapping every findBy* query and then also
  // updating `within` so those would be wrapped too. Total nightmare).
  // so we have this config option that's really only intended for
  // react-testing-library to use. For that reason, this feature will remain
  // undocumented.
  asyncWrapper: (cb) => cb(),
  unstable_advanceTimersWrapper: (cb) => cb(),
  eventWrapper: (cb) => cb(),
  // default value for the `hidden` option in `ByRole` queries
  defaultHidden: false,
  // default value for the `ignore` option in `ByText` queries
  defaultIgnore: "script, style",
  // showOriginalStackTrace flag to show the full error stack traces for async errors
  showOriginalStackTrace: false,
  // throw errors w/ suggestions for better queries. Opt in so off by default.
  throwSuggestions: false,
  // called when getBy* queries fail. (message, container) => Error
  getElementError(message, container) {
    const prettifiedDOM = prettyDOM(container);
    const error = new Error([message, "Ignored nodes: comments, " + config.defaultIgnore + "\n" + prettifiedDOM].filter(Boolean).join("\n\n"));
    error.name = "TestingLibraryElementError";
    return error;
  },
  _disableExpensiveErrorDiagnostics: false,
  computedStyleSupportsPseudoElements: false
};
function runWithExpensiveErrorDiagnosticsDisabled(callback) {
  try {
    config._disableExpensiveErrorDiagnostics = true;
    return callback();
  } finally {
    config._disableExpensiveErrorDiagnostics = false;
  }
}
function configure(newConfig) {
  if (typeof newConfig === "function") {
    newConfig = newConfig(config);
  }
  config = {
    ...config,
    ...newConfig
  };
}
function getConfig() {
  return config;
}
const labelledNodeNames = ["button", "meter", "output", "progress", "select", "textarea", "input"];
function getTextContent(node) {
  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
    return "";
  }
  if (node.nodeType === TEXT_NODE) return node.textContent;
  return Array.from(node.childNodes).map((childNode) => getTextContent(childNode)).join("");
}
function getLabelContent(element) {
  let textContent;
  if (element.tagName.toLowerCase() === "label") {
    textContent = getTextContent(element);
  } else {
    textContent = element.value || element.textContent;
  }
  return textContent;
}
function getRealLabels(element) {
  if (element.labels !== void 0) {
    var _labels;
    return (_labels = element.labels) != null ? _labels : [];
  }
  if (!isLabelable(element)) return [];
  const labels = element.ownerDocument.querySelectorAll("label");
  return Array.from(labels).filter((label) => label.control === element);
}
function isLabelable(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === "INPUT" && element.getAttribute("type") !== "hidden";
}
function getLabels(container, element, _temp) {
  let {
    selector = "*"
  } = _temp === void 0 ? {} : _temp;
  const ariaLabelledBy = element.getAttribute("aria-labelledby");
  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(" ") : [];
  return labelsId.length ? labelsId.map((labelId) => {
    const labellingElement = container.querySelector('[id="' + labelId + '"]');
    return labellingElement ? {
      content: getLabelContent(labellingElement),
      formControl: null
    } : {
      content: "",
      formControl: null
    };
  }) : Array.from(getRealLabels(element)).map((label) => {
    const textToMatch = getLabelContent(label);
    const formControlSelector = "button, input, meter, output, progress, select, textarea";
    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter((formControlElement) => formControlElement.matches(selector))[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
function assertNotNullOrUndefined(matcher) {
  if (matcher === null || matcher === void 0) {
    throw new Error(
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`
      "It looks like " + matcher + " was passed instead of a matcher. Did you do something like getByText(" + matcher + ")?"
    );
  }
}
function fuzzyMatches(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined(matcher);
  const normalizedText = normalizer(textToMatch);
  if (typeof matcher === "string" || typeof matcher === "number") {
    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());
  } else if (typeof matcher === "function") {
    return matcher(normalizedText, node);
  } else {
    return matchRegExp(matcher, normalizedText);
  }
}
function matches(textToMatch, node, matcher, normalizer) {
  if (typeof textToMatch !== "string") {
    return false;
  }
  assertNotNullOrUndefined(matcher);
  const normalizedText = normalizer(textToMatch);
  if (matcher instanceof Function) {
    return matcher(normalizedText, node);
  } else if (matcher instanceof RegExp) {
    return matchRegExp(matcher, normalizedText);
  } else {
    return normalizedText === String(matcher);
  }
}
function getDefaultNormalizer(_temp) {
  let {
    trim = true,
    collapseWhitespace = true
  } = _temp === void 0 ? {} : _temp;
  return (text) => {
    let normalizedText = text;
    normalizedText = trim ? normalizedText.trim() : normalizedText;
    normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, " ") : normalizedText;
    return normalizedText;
  };
}
function makeNormalizer(_ref) {
  let {
    trim,
    collapseWhitespace,
    normalizer
  } = _ref;
  if (!normalizer) {
    return getDefaultNormalizer({
      trim,
      collapseWhitespace
    });
  }
  if (typeof trim !== "undefined" || typeof collapseWhitespace !== "undefined") {
    throw new Error('trim and collapseWhitespace are not supported with a normalizer. If you want to use the default trim and collapseWhitespace logic in your normalizer, use "getDefaultNormalizer({trim, collapseWhitespace})" and compose that into your normalizer');
  }
  return normalizer;
}
function matchRegExp(matcher, text) {
  const match = matcher.test(text);
  if (matcher.global && matcher.lastIndex !== 0) {
    console.warn("To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.");
    matcher.lastIndex = 0;
  }
  return match;
}
function getNodeText(node) {
  if (node.matches("input[type=submit], input[type=button], input[type=reset]")) {
    return node.value;
  }
  return Array.from(node.childNodes).filter((child) => child.nodeType === TEXT_NODE && Boolean(child.textContent)).map((c2) => c2.textContent).join("");
}
const elementRoleList = buildElementRoleList(elementRoles_1);
function isSubtreeInaccessible(element) {
  if (element.hidden === true) {
    return true;
  }
  if (element.getAttribute("aria-hidden") === "true") {
    return true;
  }
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).display === "none") {
    return true;
  }
  return false;
}
function isInaccessible(element, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible
  } = options;
  const window2 = element.ownerDocument.defaultView;
  if (window2.getComputedStyle(element).visibility === "hidden") {
    return true;
  }
  let currentElement = element;
  while (currentElement) {
    if (isSubtreeInaccessibleImpl(currentElement)) {
      return true;
    }
    currentElement = currentElement.parentElement;
  }
  return false;
}
function getImplicitAriaRoles(currentNode) {
  for (const {
    match,
    roles: roles2
  } of elementRoleList) {
    if (match(currentNode)) {
      return [...roles2];
    }
  }
  return [];
}
function buildElementRoleList(elementRolesMap) {
  function makeElementSelector(_ref) {
    let {
      name,
      attributes
    } = _ref;
    return "" + name + attributes.map((_ref2) => {
      let {
        name: attributeName,
        value,
        constraints = []
      } = _ref2;
      const shouldNotExist = constraints.indexOf("undefined") !== -1;
      const shouldBeNonEmpty = constraints.indexOf("set") !== -1;
      const hasExplicitValue = typeof value !== "undefined";
      if (hasExplicitValue) {
        return "[" + attributeName + '="' + value + '"]';
      } else if (shouldNotExist) {
        return ":not([" + attributeName + "])";
      } else if (shouldBeNonEmpty) {
        return "[" + attributeName + "]:not([" + attributeName + '=""])';
      }
      return "[" + attributeName + "]";
    }).join("");
  }
  function getSelectorSpecificity(_ref3) {
    let {
      attributes = []
    } = _ref3;
    return attributes.length;
  }
  function bySelectorSpecificity(_ref4, _ref5) {
    let {
      specificity: leftSpecificity
    } = _ref4;
    let {
      specificity: rightSpecificity
    } = _ref5;
    return rightSpecificity - leftSpecificity;
  }
  function match(element) {
    let {
      attributes = []
    } = element;
    const typeTextIndex = attributes.findIndex((attribute) => attribute.value && attribute.name === "type" && attribute.value === "text");
    if (typeTextIndex >= 0) {
      attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)];
    }
    const selector = makeElementSelector({
      ...element,
      attributes
    });
    return (node) => {
      if (typeTextIndex >= 0 && node.type !== "text") {
        return false;
      }
      return node.matches(selector);
    };
  }
  let result = [];
  for (const [element, roles2] of elementRolesMap.entries()) {
    result = [...result, {
      match: match(element),
      roles: Array.from(roles2),
      specificity: getSelectorSpecificity(element)
    }];
  }
  return result.sort(bySelectorSpecificity);
}
function getRoles(container, _temp) {
  let {
    hidden = false
  } = _temp === void 0 ? {} : _temp;
  function flattenDOM(node) {
    return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];
  }
  return flattenDOM(container).filter((element) => {
    return hidden === false ? isInaccessible(element) === false : true;
  }).reduce((acc, node) => {
    let roles2 = [];
    if (node.hasAttribute("role")) {
      roles2 = node.getAttribute("role").split(" ").slice(0, 1);
    } else {
      roles2 = getImplicitAriaRoles(node);
    }
    return roles2.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? {
      ...rolesAcc,
      [role]: [...rolesAcc[role], node]
    } : {
      ...rolesAcc,
      [role]: [node]
    }, acc);
  }, {});
}
function prettyRoles(dom2, _ref6) {
  let {
    hidden,
    includeDescription
  } = _ref6;
  const roles2 = getRoles(dom2, {
    hidden
  });
  return Object.entries(roles2).filter((_ref7) => {
    let [role] = _ref7;
    return role !== "generic";
  }).map((_ref8) => {
    let [role, elements] = _ref8;
    const delimiterBar = "-".repeat(50);
    const elementsString = elements.map((el) => {
      const nameString = 'Name "' + computeAccessibleName(el, {
        computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
      }) + '":\n';
      const domString = prettyDOM(el.cloneNode(false));
      if (includeDescription) {
        const descriptionString = 'Description "' + computeAccessibleDescription(el, {
          computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
        }) + '":\n';
        return "" + nameString + descriptionString + domString;
      }
      return "" + nameString + domString;
    }).join("\n\n");
    return role + ":\n\n" + elementsString + "\n\n" + delimiterBar;
  }).join("\n");
}
function computeAriaSelected(element) {
  if (element.tagName === "OPTION") {
    return element.selected;
  }
  return checkBooleanAttribute(element, "aria-selected");
}
function computeAriaBusy(element) {
  return element.getAttribute("aria-busy") === "true";
}
function computeAriaChecked(element) {
  if ("indeterminate" in element && element.indeterminate) {
    return void 0;
  }
  if ("checked" in element) {
    return element.checked;
  }
  return checkBooleanAttribute(element, "aria-checked");
}
function computeAriaPressed(element) {
  return checkBooleanAttribute(element, "aria-pressed");
}
function computeAriaCurrent(element) {
  var _ref9, _checkBooleanAttribut;
  return (_ref9 = (_checkBooleanAttribut = checkBooleanAttribute(element, "aria-current")) != null ? _checkBooleanAttribut : element.getAttribute("aria-current")) != null ? _ref9 : false;
}
function computeAriaExpanded(element) {
  return checkBooleanAttribute(element, "aria-expanded");
}
function checkBooleanAttribute(element, attribute) {
  const attributeValue = element.getAttribute(attribute);
  if (attributeValue === "true") {
    return true;
  }
  if (attributeValue === "false") {
    return false;
  }
  return void 0;
}
function computeHeadingLevel(element) {
  const implicitHeadingLevels = {
    H1: 1,
    H2: 2,
    H3: 3,
    H4: 4,
    H5: 5,
    H6: 6
  };
  const ariaLevelAttribute = element.getAttribute("aria-level") && Number(element.getAttribute("aria-level"));
  return ariaLevelAttribute || implicitHeadingLevels[element.tagName];
}
function computeAriaValueNow(element) {
  const valueNow = element.getAttribute("aria-valuenow");
  return valueNow === null ? void 0 : +valueNow;
}
function computeAriaValueMax(element) {
  const valueMax = element.getAttribute("aria-valuemax");
  return valueMax === null ? void 0 : +valueMax;
}
function computeAriaValueMin(element) {
  const valueMin = element.getAttribute("aria-valuemin");
  return valueMin === null ? void 0 : +valueMin;
}
function computeAriaValueText(element) {
  const valueText = element.getAttribute("aria-valuetext");
  return valueText === null ? void 0 : valueText;
}
const normalize = getDefaultNormalizer();
function escapeRegExp(string2) {
  return string2.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
}
function getRegExpMatcher(string2) {
  return new RegExp(escapeRegExp(string2.toLowerCase()), "i");
}
function makeSuggestion(queryName, element, content, _ref) {
  let {
    variant,
    name
  } = _ref;
  let warning = "";
  const queryOptions = {};
  const queryArgs = [["Role", "TestId"].includes(queryName) ? content : getRegExpMatcher(content)];
  if (name) {
    queryOptions.name = getRegExpMatcher(name);
  }
  if (queryName === "Role" && isInaccessible(element)) {
    queryOptions.hidden = true;
    warning = "Element is inaccessible. This means that the element and all its children are invisible to screen readers.\n    If you are using the aria-hidden prop, make sure this is the right choice for your case.\n    ";
  }
  if (Object.keys(queryOptions).length > 0) {
    queryArgs.push(queryOptions);
  }
  const queryMethod = variant + "By" + queryName;
  return {
    queryName,
    queryMethod,
    queryArgs,
    variant,
    warning,
    toString() {
      if (warning) {
        console.warn(warning);
      }
      let [text, options] = queryArgs;
      text = typeof text === "string" ? "'" + text + "'" : text;
      options = options ? ", { " + Object.entries(options).map((_ref2) => {
        let [k2, v2] = _ref2;
        return k2 + ": " + v2;
      }).join(", ") + " }" : "";
      return queryMethod + "(" + text + options + ")";
    }
  };
}
function canSuggest(currentMethod, requestedMethod, data) {
  return data && !requestedMethod;
}
function getSuggestedQuery(element, variant, method) {
  var _element$getAttribute, _getImplicitAriaRoles;
  if (variant === void 0) {
    variant = "get";
  }
  if (element.matches(getConfig().defaultIgnore)) {
    return void 0;
  }
  const role = (_element$getAttribute = element.getAttribute("role")) != null ? _element$getAttribute : (_getImplicitAriaRoles = getImplicitAriaRoles(element)) == null ? void 0 : _getImplicitAriaRoles[0];
  if (role !== "generic" && canSuggest("Role", method, role)) {
    return makeSuggestion("Role", element, role, {
      variant,
      name: computeAccessibleName(element, {
        computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
      })
    });
  }
  const labelText = getLabels(document, element).map((label) => label.content).join(" ");
  if (canSuggest("LabelText", method, labelText)) {
    return makeSuggestion("LabelText", element, labelText, {
      variant
    });
  }
  const placeholderText = element.getAttribute("placeholder");
  if (canSuggest("PlaceholderText", method, placeholderText)) {
    return makeSuggestion("PlaceholderText", element, placeholderText, {
      variant
    });
  }
  const textContent = normalize(getNodeText(element));
  if (canSuggest("Text", method, textContent)) {
    return makeSuggestion("Text", element, textContent, {
      variant
    });
  }
  if (canSuggest("DisplayValue", method, element.value)) {
    return makeSuggestion("DisplayValue", element, normalize(element.value), {
      variant
    });
  }
  const alt = element.getAttribute("alt");
  if (canSuggest("AltText", method, alt)) {
    return makeSuggestion("AltText", element, alt, {
      variant
    });
  }
  const title = element.getAttribute("title");
  if (canSuggest("Title", method, title)) {
    return makeSuggestion("Title", element, title, {
      variant
    });
  }
  const testId = element.getAttribute(getConfig().testIdAttribute);
  if (canSuggest("TestId", method, testId)) {
    return makeSuggestion("TestId", element, testId, {
      variant
    });
  }
  return void 0;
}
function copyStackTrace(target, source) {
  target.stack = source.stack.replace(source.message, target.message);
}
function waitFor(callback, _ref) {
  let {
    container = getDocument(),
    timeout = getConfig().asyncUtilTimeout,
    showOriginalStackTrace = getConfig().showOriginalStackTrace,
    stackTraceError,
    interval = 50,
    onTimeout = (error) => {
      Object.defineProperty(error, "message", {
        value: getConfig().getElementError(error.message, container).message
      });
      return error;
    },
    mutationObserverOptions = {
      subtree: true,
      childList: true,
      attributes: true,
      characterData: true
    }
  } = _ref;
  if (typeof callback !== "function") {
    throw new TypeError("Received `callback` arg must be a function");
  }
  return new Promise(async (resolve, reject) => {
    let lastError, intervalId, observer;
    let finished = false;
    let promiseStatus = "idle";
    const overallTimeoutTimer = setTimeout(handleTimeout, timeout);
    const usingJestFakeTimers = jestFakeTimersAreEnabled();
    if (usingJestFakeTimers) {
      const {
        unstable_advanceTimersWrapper: advanceTimersWrapper
      } = getConfig();
      checkCallback();
      while (!finished) {
        if (!jestFakeTimersAreEnabled()) {
          const error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
          if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);
          reject(error);
          return;
        }
        await advanceTimersWrapper(async () => {
          jest.advanceTimersByTime(interval);
        });
        if (finished) {
          break;
        }
        checkCallback();
      }
    } else {
      try {
        checkContainerType(container);
      } catch (e2) {
        reject(e2);
        return;
      }
      intervalId = setInterval(checkRealTimersCallback, interval);
      const {
        MutationObserver
      } = getWindowFromNode(container);
      observer = new MutationObserver(checkRealTimersCallback);
      observer.observe(container, mutationObserverOptions);
      checkCallback();
    }
    function onDone(error, result) {
      finished = true;
      clearTimeout(overallTimeoutTimer);
      if (!usingJestFakeTimers) {
        clearInterval(intervalId);
        observer.disconnect();
      }
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    }
    function checkRealTimersCallback() {
      if (jestFakeTimersAreEnabled()) {
        const error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
        if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);
        return reject(error);
      } else {
        return checkCallback();
      }
    }
    function checkCallback() {
      if (promiseStatus === "pending") return;
      try {
        const result = runWithExpensiveErrorDiagnosticsDisabled(callback);
        if (typeof (result == null ? void 0 : result.then) === "function") {
          promiseStatus = "pending";
          result.then((resolvedValue) => {
            promiseStatus = "resolved";
            onDone(null, resolvedValue);
          }, (rejectedValue) => {
            promiseStatus = "rejected";
            lastError = rejectedValue;
          });
        } else {
          onDone(null, result);
        }
      } catch (error) {
        lastError = error;
      }
    }
    function handleTimeout() {
      let error;
      if (lastError) {
        error = lastError;
        if (!showOriginalStackTrace && error.name === "TestingLibraryElementError") {
          copyStackTrace(error, stackTraceError);
        }
      } else {
        error = new Error("Timed out in waitFor.");
        if (!showOriginalStackTrace) {
          copyStackTrace(error, stackTraceError);
        }
      }
      onDone(onTimeout(error), null);
    }
  });
}
function waitForWrapper(callback, options) {
  const stackTraceError = new Error("STACK_TRACE_MESSAGE");
  return getConfig().asyncWrapper(() => waitFor(callback, {
    stackTraceError,
    ...options
  }));
}
function getElementError(message, container) {
  return getConfig().getElementError(message, container);
}
function getMultipleElementsFoundError(message, container) {
  return getElementError(message + "\n\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).", container);
}
function queryAllByAttribute(attribute, container, text, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  const matcher = exact ? matches : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("[" + attribute + "]")).filter((node) => matcher(node.getAttribute(attribute), node, text, matchNormalizer));
}
function makeSingleQuery(allQuery, getMultipleError2) {
  return function(container) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    const els = allQuery(container, ...args);
    if (els.length > 1) {
      const elementStrings = els.map((element) => getElementError(null, element).message).join("\n\n");
      throw getMultipleElementsFoundError(getMultipleError2(container, ...args) + "\n\nHere are the matching elements:\n\n" + elementStrings, container);
    }
    return els[0] || null;
  };
}
function getSuggestionError(suggestion, container) {
  return getConfig().getElementError("A better query is available, try this:\n" + suggestion.toString() + "\n", container);
}
function makeGetAllQuery(allQuery, getMissingError2) {
  return function(container) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    const els = allQuery(container, ...args);
    if (!els.length) {
      throw getConfig().getElementError(getMissingError2(container, ...args), container);
    }
    return els;
  };
}
function makeFindQuery(getter) {
  return (container, text, options, waitForOptions) => {
    return waitForWrapper(() => {
      return getter(container, text, options);
    }, {
      container,
      ...waitForOptions
    });
  };
}
const wrapSingleQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  const element = query(container, ...args);
  const [{
    suggest = getConfig().throwSuggestions
  } = {}] = args.slice(-1);
  if (element && suggest) {
    const suggestion = getSuggestedQuery(element, variant);
    if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) {
      throw getSuggestionError(suggestion.toString(), container);
    }
  }
  return element;
};
const wrapAllByQueryWithSuggestion = (query, queryAllByName, variant) => function(container) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  const els = query(container, ...args);
  const [{
    suggest = getConfig().throwSuggestions
  } = {}] = args.slice(-1);
  if (els.length && suggest) {
    const uniqueSuggestionMessages = [...new Set(els.map((element) => {
      var _getSuggestedQuery;
      return (_getSuggestedQuery = getSuggestedQuery(element, variant)) == null ? void 0 : _getSuggestedQuery.toString();
    }))];
    if (
      // only want to suggest if all the els have the same suggestion.
      uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO: Can this be null at runtime?
        getSuggestedQuery(els[0], variant).queryName
      )
    ) {
      throw getSuggestionError(uniqueSuggestionMessages[0], container);
    }
  }
  return els;
};
function buildQueries(queryAllBy, getMultipleError2, getMissingError2) {
  const queryBy = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy, getMultipleError2), queryAllBy.name, "query");
  const getAllBy = makeGetAllQuery(queryAllBy, getMissingError2);
  const getBy = makeSingleQuery(getAllBy, getMultipleError2);
  const getByWithSuggestions = wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "get");
  const getAllWithSuggestions = wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name.replace("query", "get"), "getAll");
  const findAllBy = makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name, "findAll"));
  const findBy = makeFindQuery(wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, "find"));
  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];
}
function queryAllLabels(container) {
  return Array.from(container.querySelectorAll("label,input")).map((node) => {
    return {
      node,
      textToMatch: getLabelContent(node)
    };
  }).filter((_ref) => {
    let {
      textToMatch
    } = _ref;
    return textToMatch !== null;
  });
}
const queryAllLabelsByText = function(container, text, _temp) {
  let {
    exact = true,
    trim,
    collapseWhitespace,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  const matcher = exact ? matches : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  const textToMatchByLabels = queryAllLabels(container);
  return textToMatchByLabels.filter((_ref2) => {
    let {
      node,
      textToMatch
    } = _ref2;
    return matcher(textToMatch, node, text, matchNormalizer);
  }).map((_ref3) => {
    let {
      node
    } = _ref3;
    return node;
  });
};
const queryAllByLabelText = function(container, text, _temp2) {
  let {
    selector = "*",
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp2 === void 0 ? {} : _temp2;
  checkContainerType(container);
  const matcher = exact ? matches : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  const matchingLabelledElements = Array.from(container.querySelectorAll("*")).filter((element) => {
    return getRealLabels(element).length || element.hasAttribute("aria-labelledby");
  }).reduce((labelledElements, labelledElement) => {
    const labelList = getLabels(container, labelledElement, {
      selector
    });
    labelList.filter((label) => Boolean(label.formControl)).forEach((label) => {
      if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) {
        labelledElements.push(label.formControl);
      }
    });
    const labelsValue = labelList.filter((label) => Boolean(label.content)).map((label) => label.content);
    if (matcher(labelsValue.join(" "), labelledElement, text, matchNormalizer)) {
      labelledElements.push(labelledElement);
    }
    if (labelsValue.length > 1) {
      labelsValue.forEach((labelValue, index) => {
        if (matcher(labelValue, labelledElement, text, matchNormalizer)) {
          labelledElements.push(labelledElement);
        }
        const labelsFiltered = [...labelsValue];
        labelsFiltered.splice(index, 1);
        if (labelsFiltered.length > 1) {
          if (matcher(labelsFiltered.join(" "), labelledElement, text, matchNormalizer)) {
            labelledElements.push(labelledElement);
          }
        }
      });
    }
    return labelledElements;
  }, []).concat(queryAllByAttribute("aria-label", container, text, {
    exact,
    normalizer: matchNormalizer
  }));
  return Array.from(new Set(matchingLabelledElements)).filter((element) => element.matches(selector));
};
const getAllByLabelText = function(container, text) {
  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    rest[_key - 2] = arguments[_key];
  }
  const els = queryAllByLabelText(container, text, ...rest);
  if (!els.length) {
    const labels = queryAllLabelsByText(container, text, ...rest);
    if (labels.length) {
      const tagNames = labels.map((label) => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter((tagName) => !!tagName);
      if (tagNames.length) {
        throw getConfig().getElementError(tagNames.map((tagName) => "Found a label with the text of: " + text + ", however the element associated with this label (<" + tagName + " />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <" + tagName + " />, you can use aria-label or aria-labelledby instead.").join("\n\n"), container);
      } else {
        throw getConfig().getElementError("Found a label with the text of: " + text + `, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
      }
    } else {
      throw getConfig().getElementError("Unable to find a label with the text of: " + text, container);
    }
  }
  return els;
};
function getTagNameOfElementAssociatedWithLabelViaFor(container, label) {
  const htmlFor = label.getAttribute("for");
  if (!htmlFor) {
    return null;
  }
  const element = container.querySelector('[id="' + htmlFor + '"]');
  return element ? element.tagName.toLowerCase() : null;
}
const getMultipleError$7 = (c2, text) => "Found multiple elements with the text of: " + text;
const queryByLabelText = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllByLabelText, getMultipleError$7), queryAllByLabelText.name, "query");
const getByLabelText = makeSingleQuery(getAllByLabelText, getMultipleError$7);
const findAllByLabelText = makeFindQuery(wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, "findAll"));
const findByLabelText = makeFindQuery(wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, "find"));
const getAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, "getAll");
const getByLabelTextWithSuggestions = wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, "get");
const queryAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByLabelText, queryAllByLabelText.name, "queryAll");
const queryAllByPlaceholderText = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  checkContainerType(args[0]);
  return queryAllByAttribute("placeholder", ...args);
};
const getMultipleError$6 = (c2, text) => "Found multiple elements with the placeholder text of: " + text;
const getMissingError$6 = (c2, text) => "Unable to find an element with the placeholder text of: " + text;
const queryAllByPlaceholderTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByPlaceholderText, queryAllByPlaceholderText.name, "queryAll");
const [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = buildQueries(queryAllByPlaceholderText, getMultipleError$6, getMissingError$6);
const queryAllByText = function(container, text, _temp) {
  let {
    selector = "*",
    exact = true,
    collapseWhitespace,
    trim,
    ignore = getConfig().defaultIgnore,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  const matcher = exact ? matches : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  let baseArray = [];
  if (typeof container.matches === "function" && container.matches(selector)) {
    baseArray = [container];
  }
  return [...baseArray, ...Array.from(container.querySelectorAll(selector))].filter((node) => !ignore || !node.matches(ignore)).filter((node) => matcher(getNodeText(node), node, text, matchNormalizer));
};
const getMultipleError$5 = (c2, text) => "Found multiple elements with the text: " + text;
const getMissingError$5 = function(c2, text, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    collapseWhitespace,
    trim,
    normalizer,
    selector
  } = options;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  const normalizedText = matchNormalizer(text.toString());
  const isNormalizedDifferent = normalizedText !== text.toString();
  const isCustomSelector = (selector != null ? selector : "*") !== "*";
  return "Unable to find an element with the text: " + (isNormalizedDifferent ? normalizedText + " (normalized from '" + text + "')" : text) + (isCustomSelector ? ", which matches selector '" + selector + "'" : "") + ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.";
};
const queryAllByTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByText, queryAllByText.name, "queryAll");
const [queryByText, getAllByText, getByText, findAllByText, findByText] = buildQueries(queryAllByText, getMultipleError$5, getMissingError$5);
const queryAllByDisplayValue = function(container, value, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  const matcher = exact ? matches : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("input,textarea,select")).filter((node) => {
    if (node.tagName === "SELECT") {
      const selectedOptions = Array.from(node.options).filter((option) => option.selected);
      return selectedOptions.some((optionNode) => matcher(getNodeText(optionNode), optionNode, value, matchNormalizer));
    } else {
      return matcher(node.value, node, value, matchNormalizer);
    }
  });
};
const getMultipleError$4 = (c2, value) => "Found multiple elements with the display value: " + value + ".";
const getMissingError$4 = (c2, value) => "Unable to find an element with the display value: " + value + ".";
const queryAllByDisplayValueWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByDisplayValue, queryAllByDisplayValue.name, "queryAll");
const [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = buildQueries(queryAllByDisplayValue, getMultipleError$4, getMissingError$4);
const VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
const queryAllByAltText = function(container, alt, options) {
  if (options === void 0) {
    options = {};
  }
  checkContainerType(container);
  return queryAllByAttribute("alt", container, alt, options).filter((node) => VALID_TAG_REGEXP.test(node.tagName));
};
const getMultipleError$3 = (c2, alt) => "Found multiple elements with the alt text: " + alt;
const getMissingError$3 = (c2, alt) => "Unable to find an element with the alt text: " + alt;
const queryAllByAltTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByAltText, queryAllByAltText.name, "queryAll");
const [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = buildQueries(queryAllByAltText, getMultipleError$3, getMissingError$3);
const isSvgTitle = (node) => {
  var _node$parentElement;
  return node.tagName.toLowerCase() === "title" && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === "svg";
};
const queryAllByTitle = function(container, text, _temp) {
  let {
    exact = true,
    collapseWhitespace,
    trim,
    normalizer
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  const matcher = exact ? matches : fuzzyMatches;
  const matchNormalizer = makeNormalizer({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll("[title], svg > title")).filter((node) => matcher(node.getAttribute("title"), node, text, matchNormalizer) || isSvgTitle(node) && matcher(getNodeText(node), node, text, matchNormalizer));
};
const getMultipleError$2 = (c2, title) => "Found multiple elements with the title: " + title + ".";
const getMissingError$2 = (c2, title) => "Unable to find an element with the title: " + title + ".";
const queryAllByTitleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTitle, queryAllByTitle.name, "queryAll");
const [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = buildQueries(queryAllByTitle, getMultipleError$2, getMissingError$2);
const queryAllByRole = function(container, role, _temp) {
  let {
    hidden = getConfig().defaultHidden,
    name,
    description,
    queryFallbacks = false,
    selected,
    busy,
    checked,
    pressed,
    current,
    level,
    expanded,
    value: {
      now: valueNow,
      min: valueMin,
      max: valueMax,
      text: valueText
    } = {}
  } = _temp === void 0 ? {} : _temp;
  checkContainerType(container);
  if (selected !== void 0) {
    var _allRoles$get;
    if (((_allRoles$get = roles_1.get(role)) == null ? void 0 : _allRoles$get.props["aria-selected"]) === void 0) {
      throw new Error('"aria-selected" is not supported on role "' + role + '".');
    }
  }
  if (busy !== void 0) {
    var _allRoles$get2;
    if (((_allRoles$get2 = roles_1.get(role)) == null ? void 0 : _allRoles$get2.props["aria-busy"]) === void 0) {
      throw new Error('"aria-busy" is not supported on role "' + role + '".');
    }
  }
  if (checked !== void 0) {
    var _allRoles$get3;
    if (((_allRoles$get3 = roles_1.get(role)) == null ? void 0 : _allRoles$get3.props["aria-checked"]) === void 0) {
      throw new Error('"aria-checked" is not supported on role "' + role + '".');
    }
  }
  if (pressed !== void 0) {
    var _allRoles$get4;
    if (((_allRoles$get4 = roles_1.get(role)) == null ? void 0 : _allRoles$get4.props["aria-pressed"]) === void 0) {
      throw new Error('"aria-pressed" is not supported on role "' + role + '".');
    }
  }
  if (current !== void 0) {
    var _allRoles$get5;
    if (((_allRoles$get5 = roles_1.get(role)) == null ? void 0 : _allRoles$get5.props["aria-current"]) === void 0) {
      throw new Error('"aria-current" is not supported on role "' + role + '".');
    }
  }
  if (level !== void 0) {
    if (role !== "heading") {
      throw new Error('Role "' + role + '" cannot have "level" property.');
    }
  }
  if (valueNow !== void 0) {
    var _allRoles$get6;
    if (((_allRoles$get6 = roles_1.get(role)) == null ? void 0 : _allRoles$get6.props["aria-valuenow"]) === void 0) {
      throw new Error('"aria-valuenow" is not supported on role "' + role + '".');
    }
  }
  if (valueMax !== void 0) {
    var _allRoles$get7;
    if (((_allRoles$get7 = roles_1.get(role)) == null ? void 0 : _allRoles$get7.props["aria-valuemax"]) === void 0) {
      throw new Error('"aria-valuemax" is not supported on role "' + role + '".');
    }
  }
  if (valueMin !== void 0) {
    var _allRoles$get8;
    if (((_allRoles$get8 = roles_1.get(role)) == null ? void 0 : _allRoles$get8.props["aria-valuemin"]) === void 0) {
      throw new Error('"aria-valuemin" is not supported on role "' + role + '".');
    }
  }
  if (valueText !== void 0) {
    var _allRoles$get9;
    if (((_allRoles$get9 = roles_1.get(role)) == null ? void 0 : _allRoles$get9.props["aria-valuetext"]) === void 0) {
      throw new Error('"aria-valuetext" is not supported on role "' + role + '".');
    }
  }
  if (expanded !== void 0) {
    var _allRoles$get10;
    if (((_allRoles$get10 = roles_1.get(role)) == null ? void 0 : _allRoles$get10.props["aria-expanded"]) === void 0) {
      throw new Error('"aria-expanded" is not supported on role "' + role + '".');
    }
  }
  const subtreeIsInaccessibleCache = /* @__PURE__ */ new WeakMap();
  function cachedIsSubtreeInaccessible(element) {
    if (!subtreeIsInaccessibleCache.has(element)) {
      subtreeIsInaccessibleCache.set(element, isSubtreeInaccessible(element));
    }
    return subtreeIsInaccessibleCache.get(element);
  }
  return Array.from(container.querySelectorAll(
    // Only query elements that can be matched by the following filters
    makeRoleSelector(role)
  )).filter((node) => {
    const isRoleSpecifiedExplicitly = node.hasAttribute("role");
    if (isRoleSpecifiedExplicitly) {
      const roleValue = node.getAttribute("role");
      if (queryFallbacks) {
        return roleValue.split(" ").filter(Boolean).some((roleAttributeToken) => roleAttributeToken === role);
      }
      const [firstRoleAttributeToken] = roleValue.split(" ");
      return firstRoleAttributeToken === role;
    }
    const implicitRoles = getImplicitAriaRoles(node);
    return implicitRoles.some((implicitRole) => {
      return implicitRole === role;
    });
  }).filter((element) => {
    if (selected !== void 0) {
      return selected === computeAriaSelected(element);
    }
    if (busy !== void 0) {
      return busy === computeAriaBusy(element);
    }
    if (checked !== void 0) {
      return checked === computeAriaChecked(element);
    }
    if (pressed !== void 0) {
      return pressed === computeAriaPressed(element);
    }
    if (current !== void 0) {
      return current === computeAriaCurrent(element);
    }
    if (expanded !== void 0) {
      return expanded === computeAriaExpanded(element);
    }
    if (level !== void 0) {
      return level === computeHeadingLevel(element);
    }
    if (valueNow !== void 0 || valueMax !== void 0 || valueMin !== void 0 || valueText !== void 0) {
      let valueMatches = true;
      if (valueNow !== void 0) {
        valueMatches && (valueMatches = valueNow === computeAriaValueNow(element));
      }
      if (valueMax !== void 0) {
        valueMatches && (valueMatches = valueMax === computeAriaValueMax(element));
      }
      if (valueMin !== void 0) {
        valueMatches && (valueMatches = valueMin === computeAriaValueMin(element));
      }
      if (valueText !== void 0) {
        var _computeAriaValueText;
        valueMatches && (valueMatches = matches((_computeAriaValueText = computeAriaValueText(element)) != null ? _computeAriaValueText : null, element, valueText, (text) => text));
      }
      return valueMatches;
    }
    return true;
  }).filter((element) => {
    if (name === void 0) {
      return true;
    }
    return matches(computeAccessibleName(element, {
      computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
    }), element, name, (text) => text);
  }).filter((element) => {
    if (description === void 0) {
      return true;
    }
    return matches(computeAccessibleDescription(element, {
      computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements
    }), element, description, (text) => text);
  }).filter((element) => {
    return hidden === false ? isInaccessible(element, {
      isSubtreeInaccessible: cachedIsSubtreeInaccessible
    }) === false : true;
  });
};
function makeRoleSelector(role) {
  var _roleElements$get;
  const explicitRoleSelector = '*[role~="' + role + '"]';
  const roleRelations = (_roleElements$get = roleElements_1.get(role)) != null ? _roleElements$get : /* @__PURE__ */ new Set();
  const implicitRoleSelectors = new Set(Array.from(roleRelations).map((_ref) => {
    let {
      name
    } = _ref;
    return name;
  }));
  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(",");
}
const getNameHint = (name) => {
  let nameHint = "";
  if (name === void 0) {
    nameHint = "";
  } else if (typeof name === "string") {
    nameHint = ' and name "' + name + '"';
  } else {
    nameHint = " and name `" + name + "`";
  }
  return nameHint;
};
const getMultipleError$1 = function(c2, role, _temp2) {
  let {
    name
  } = _temp2 === void 0 ? {} : _temp2;
  return 'Found multiple elements with the role "' + role + '"' + getNameHint(name);
};
const getMissingError$1 = function(container, role, _temp3) {
  let {
    hidden = getConfig().defaultHidden,
    name,
    description
  } = _temp3 === void 0 ? {} : _temp3;
  if (getConfig()._disableExpensiveErrorDiagnostics) {
    return 'Unable to find role="' + role + '"' + getNameHint(name);
  }
  let roles2 = "";
  Array.from(container.children).forEach((childElement) => {
    roles2 += prettyRoles(childElement, {
      hidden,
      includeDescription: description !== void 0
    });
  });
  let roleMessage;
  if (roles2.length === 0) {
    if (hidden === false) {
      roleMessage = "There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole";
    } else {
      roleMessage = "There are no available roles.";
    }
  } else {
    roleMessage = ("\nHere are the " + (hidden === false ? "accessible" : "available") + " roles:\n\n  " + roles2.replace(/\n/g, "\n  ").replace(/\n\s\s\n/g, "\n\n") + "\n").trim();
  }
  let nameHint = "";
  if (name === void 0) {
    nameHint = "";
  } else if (typeof name === "string") {
    nameHint = ' and name "' + name + '"';
  } else {
    nameHint = " and name `" + name + "`";
  }
  let descriptionHint = "";
  if (description === void 0) {
    descriptionHint = "";
  } else if (typeof description === "string") {
    descriptionHint = ' and description "' + description + '"';
  } else {
    descriptionHint = " and description `" + description + "`";
  }
  return ("\nUnable to find an " + (hidden === false ? "accessible " : "") + 'element with the role "' + role + '"' + nameHint + descriptionHint + "\n\n" + roleMessage).trim();
};
const queryAllByRoleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByRole, queryAllByRole.name, "queryAll");
const [queryByRole, getAllByRole, getByRole, findAllByRole, findByRole] = buildQueries(queryAllByRole, getMultipleError$1, getMissingError$1);
const getTestIdAttribute = () => getConfig().testIdAttribute;
const queryAllByTestId = function() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  checkContainerType(args[0]);
  return queryAllByAttribute(getTestIdAttribute(), ...args);
};
const getMultipleError = (c2, id) => "Found multiple elements by: [" + getTestIdAttribute() + '="' + id + '"]';
const getMissingError = (c2, id) => "Unable to find an element by: [" + getTestIdAttribute() + '="' + id + '"]';
const queryAllByTestIdWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTestId, queryAllByTestId.name, "queryAll");
const [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = buildQueries(queryAllByTestId, getMultipleError, getMissingError);
var queries = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  queryAllByLabelText: queryAllByLabelTextWithSuggestions,
  queryByLabelText,
  getAllByLabelText: getAllByLabelTextWithSuggestions,
  getByLabelText: getByLabelTextWithSuggestions,
  findAllByLabelText,
  findByLabelText,
  queryByPlaceholderText,
  queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions,
  getByPlaceholderText,
  getAllByPlaceholderText,
  findAllByPlaceholderText,
  findByPlaceholderText,
  queryByText,
  queryAllByText: queryAllByTextWithSuggestions,
  getByText,
  getAllByText,
  findAllByText,
  findByText,
  queryByDisplayValue,
  queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions,
  getByDisplayValue,
  getAllByDisplayValue,
  findAllByDisplayValue,
  findByDisplayValue,
  queryByAltText,
  queryAllByAltText: queryAllByAltTextWithSuggestions,
  getByAltText,
  getAllByAltText,
  findAllByAltText,
  findByAltText,
  queryByTitle,
  queryAllByTitle: queryAllByTitleWithSuggestions,
  getByTitle,
  getAllByTitle,
  findAllByTitle,
  findByTitle,
  queryByRole,
  queryAllByRole: queryAllByRoleWithSuggestions,
  getAllByRole,
  getByRole,
  findAllByRole,
  findByRole,
  queryByTestId,
  queryAllByTestId: queryAllByTestIdWithSuggestions,
  getByTestId,
  getAllByTestId,
  findAllByTestId,
  findByTestId
});
function getQueriesForElement(element, queries$12, initialValue2) {
  if (queries$12 === void 0) {
    queries$12 = queries;
  }
  if (initialValue2 === void 0) {
    initialValue2 = {};
  }
  return Object.keys(queries$12).reduce((helpers, key) => {
    const fn3 = queries$12[key];
    helpers[key] = fn3.bind(null, element);
    return helpers;
  }, initialValue2);
}
const eventMap = {
  // Clipboard Events
  copy: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  cut: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  paste: {
    EventType: "ClipboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Composition Events
  compositionEnd: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  compositionStart: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  compositionUpdate: {
    EventType: "CompositionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Keyboard Events
  keyDown: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  keyPress: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  keyUp: {
    EventType: "KeyboardEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      charCode: 0,
      composed: true
    }
  },
  // Focus Events
  focus: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  blur: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  focusIn: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  focusOut: {
    EventType: "FocusEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  // Form Events
  change: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  input: {
    EventType: "InputEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  invalid: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: true
    }
  },
  submit: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  reset: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  // Mouse Events
  click: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      button: 0,
      composed: true
    }
  },
  contextMenu: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dblClick: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  drag: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragEnd: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragEnter: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragExit: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragLeave: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  dragOver: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  dragStart: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  drop: {
    EventType: "DragEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseDown: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseEnter: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  mouseLeave: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false,
      composed: true
    }
  },
  mouseMove: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseOut: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseOver: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  mouseUp: {
    EventType: "MouseEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Selection Events
  select: {
    EventType: "Event",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // Touch Events
  touchCancel: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  touchEnd: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  touchMove: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  touchStart: {
    EventType: "TouchEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // UI Events
  resize: {
    EventType: "UIEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  scroll: {
    EventType: "UIEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Wheel Events
  wheel: {
    EventType: "WheelEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  // Media Events
  abort: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  canPlay: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  canPlayThrough: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  durationChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  emptied: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  encrypted: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  ended: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadedData: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadedMetadata: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  loadStart: {
    EventType: "ProgressEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pause: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  play: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  playing: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  progress: {
    EventType: "ProgressEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  rateChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  seeked: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  seeking: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  stalled: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  suspend: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  timeUpdate: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  volumeChange: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  waiting: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Events
  load: {
    // TODO: load events can be UIEvent or Event depending on what generated them
    // This is where this abstraction breaks down.
    // But the common targets are <img />, <script /> and window.
    // Neither of these targets receive a UIEvent
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  error: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  // Animation Events
  animationStart: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  animationEnd: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  animationIteration: {
    EventType: "AnimationEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // Transition Events
  transitionCancel: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  transitionEnd: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  transitionRun: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  transitionStart: {
    EventType: "TransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // pointer events
  pointerOver: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerEnter: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pointerDown: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerMove: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerUp: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerCancel: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  pointerOut: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true,
      composed: true
    }
  },
  pointerLeave: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  gotPointerCapture: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  lostPointerCapture: {
    EventType: "PointerEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false,
      composed: true
    }
  },
  // history events
  popState: {
    EventType: "PopStateEvent",
    defaultInit: {
      bubbles: true,
      cancelable: false
    }
  },
  // window events
  offline: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  online: {
    EventType: "Event",
    defaultInit: {
      bubbles: false,
      cancelable: false
    }
  },
  pageHide: {
    EventType: "PageTransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  },
  pageShow: {
    EventType: "PageTransitionEvent",
    defaultInit: {
      bubbles: true,
      cancelable: true
    }
  }
};
const eventAliasMap = {
  doubleClick: "dblClick"
};
Object.keys(eventMap).forEach((key) => {
  key.toLowerCase();
});
Object.keys(eventAliasMap).forEach((aliasKey) => {
});
function unindent(string2) {
  return string2.replace(/[ \t]*[\n][ \t]*/g, "\n");
}
function encode(value) {
  return lzString.compressToEncodedURIComponent(unindent(value));
}
function getPlaygroundUrl(markup2) {
  return "https://testing-playground.com/#markup=" + encode(markup2);
}
const debug = (element, maxLength, options) => Array.isArray(element) ? element.forEach((el) => logDOM(el, maxLength, options)) : logDOM(element, maxLength, options);
const logTestingPlaygroundURL = function(element) {
  if (element === void 0) {
    element = getDocument().body;
  }
  if (!element || !("innerHTML" in element)) {
    console.log("The element you're providing isn't a valid DOM element.");
    return;
  }
  if (!element.innerHTML) {
    console.log("The provided element doesn't have any children.");
    return;
  }
  const playgroundUrl = getPlaygroundUrl(element.innerHTML);
  console.log("Open this URL in your browser\n\n" + playgroundUrl);
  return playgroundUrl;
};
const initialValue = {
  debug,
  logTestingPlaygroundURL
};
const screen = typeof document !== "undefined" && document.body ? getQueriesForElement(document.body, queries, initialValue) : Object.keys(queries).reduce((helpers, key) => {
  helpers[key] = () => {
    throw new TypeError("For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error");
  };
  return helpers;
}, initialValue);
var ge = Object.defineProperty;
var Re = (e2, t) => {
  for (var l2 in t) ge(e2, l2, { get: t[l2], enumerable: true });
};
var S = {};
Re(S, { findAllByShadowAltText: () => te, findAllByShadowDisplayValue: () => J, findAllByShadowLabelText: () => D, findAllByShadowPlaceholderText: () => N, findAllByShadowRole: () => b, findAllByShadowTestId: () => he, findAllByShadowText: () => U, findAllByShadowTitle: () => re, findByShadowAltText: () => oe, findByShadowDisplayValue: () => K, findByShadowLabelText: () => I, findByShadowPlaceholderText: () => C, findByShadowRole: () => q, findByShadowTestId: () => ie, findByShadowText: () => k, findByShadowTitle: () => de, getAllByShadowAltText: () => v, getAllByShadowDisplayValue: () => z, getAllByShadowLabelText: () => _, getAllByShadowPlaceholderText: () => V, getAllByShadowRole: () => R, getAllByShadowTestId: () => se, getAllByShadowText: () => $, getAllByShadowTitle: () => le, getByShadowAltText: () => ee, getByShadowDisplayValue: () => Y, getByShadowLabelText: () => O, getByShadowPlaceholderText: () => F, getByShadowRole: () => H, getByShadowTestId: () => Te, getByShadowText: () => W, getByShadowTitle: () => ne, queryAllByShadowAltText: () => A, queryAllByShadowDisplayValue: () => x, queryAllByShadowLabelText: () => p, queryAllByShadowPlaceholderText: () => B, queryAllByShadowRole: () => c, queryAllByShadowTestId: () => E, queryAllByShadowText: () => f, queryAllByShadowTitle: () => M, queryByShadowAltText: () => Z, queryByShadowDisplayValue: () => X, queryByShadowLabelText: () => Q, queryByShadowPlaceholderText: () => j, queryByShadowRole: () => g, queryByShadowTestId: () => ye, queryByShadowText: () => G, queryByShadowTitle: () => ae });
be();
function He() {
  qe();
}
function Se() {
  HTMLSlotElement.prototype.querySelectorAll = HTMLElement.prototype.querySelectorAll;
}
function d(e2) {
  He();
  try {
    let t = e2();
    return typeof t == "object" && "finally" in t && typeof t.finally == "function" && t.finally(() => Se()), t;
  } finally {
    Se();
  }
}
function be() {
  if (typeof ShadowRoot > "u") throw "Your environment does not support shadow roots.";
  ShadowRoot.prototype.matches == null && Object.defineProperties(ShadowRoot.prototype, { matches: { get() {
    return function(e2) {
      return e2.trim() === "*" ? true : Boolean(this.querySelector(e2));
    };
  } } }), ShadowRoot.prototype.outerHTML == null && Object.defineProperties(ShadowRoot.prototype, { outerHTML: { get() {
    return this.innerHTML;
  } } });
}
function qe() {
  HTMLSlotElement.prototype.querySelectorAll = function(e2) {
    let t = HTMLElement.prototype.querySelectorAll, l2 = [];
    return this.assignedElements({ flatten: true }).forEach((a) => {
      let o = a, n2 = document.createElement("div");
      n2.appendChild(o.cloneNode(false)), n2.querySelector(e2) && l2.push(o), l2 = l2.concat(Array.from(o.querySelectorAll(e2)));
    }), l2.length == 0 && (l2 = Array.from(t.call(this, e2))), [...new Set(l2)];
  };
}
function s(e2, t = { shallow: false }) {
  return pe(e2, "*", t);
}
function pe(e2, t, l2 = { shallow: false }, a = [], o = []) {
  return e2 instanceof Document && (e2 = document.documentElement), a = [e2], o.push(e2), e2 instanceof HTMLElement && e2.shadowRoot != null && e2.shadowRoot.mode !== "closed" && (o.push(e2.shadowRoot), a.push(e2.shadowRoot)), a.forEach((n2) => {
    n2.querySelectorAll(t).forEach((r2) => {
      if (r2.shadowRoot == null || r2.shadowRoot.mode === "closed") {
        o.push(r2);
        return;
      }
      if (o.push(r2.shadowRoot), l2.shallow === true) {
        r2.shadowRoot.querySelectorAll(t).forEach((y2) => {
          o.push(y2);
        });
        return;
      }
      r2.shadowRoot.querySelectorAll(t).forEach((y2) => {
        o.push(y2), a.push(y2);
      }), pe(r2.shadowRoot, t, l2, a, o);
    });
  }), [...new Set(o)];
}
function i(e2) {
  return e2.map((t) => (...l2) => {
    let [a, o, n2, ...r2] = l2;
    return n2 == null && (n2 = {}), n2.suggest = false, t(a, o, n2, ...r2);
  });
}
function c(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByRoleWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var Ce = (e2, t) => `Found multiple elements with the role of: ${t}`, Ge = (e2, t) => `Unable to find an element with the role of: ${t}`, [$e, We, Ue, ke, Xe] = i(buildQueries(c, Ce, Ge)), g = (...e2) => $e(...e2), R = (...e2) => We(...e2), H = (...e2) => Ue(...e2), b = (...e2) => ke(...e2), q = (...e2) => Xe(...e2);
function p(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByLabelTextWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var ze = (e2, t) => `Found multiple elements with the label text of: ${t}`, Ye = (e2, t) => `Unable to find an element with the label text of: ${t}`, [Je, Ke, Ze, ve, et] = i(buildQueries(p, ze, Ye)), Q = (...e2) => Je(...e2), _ = (...e2) => Ke(...e2), O = (...e2) => Ze(...e2), D = (...e2) => ve(...e2), I = (...e2) => et(...e2);
function B(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByPlaceholderTextWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var tt = (e2, t) => `Found multiple elements with the placeholder text of: ${t}`, ot = (e2, t) => `Unable to find an element with the placeholder text of: ${t}`, [at, lt, nt, rt, dt] = i(buildQueries(B, tt, ot)), j = (...e2) => at(...e2), V = (...e2) => lt(...e2), F = (...e2) => nt(...e2), N = (...e2) => rt(...e2), C = (...e2) => dt(...e2);
function f(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByTextWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var yt = (e2, t) => `Found multiple elements with the text of: ${t}`, st = (e2, t) => `Unable to find an element with the text of: ${t}`, [Tt, ht, it, ut, wt] = i(buildQueries(f, yt, st)), G = (...e2) => Tt(...e2), $ = (...e2) => ht(...e2), W = (...e2) => it(...e2), U = (...e2) => ut(...e2), k = (...e2) => wt(...e2);
function x(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByDisplayValueWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var mt = (e2, t) => `Found multiple elements with the display value of: ${t}`, St = (e2, t) => `Unable to find an element with the display value of: ${t}`, [ct, pt, Bt, ft, xt] = i(buildQueries(x, mt, St)), X = (...e2) => ct(...e2), z = (...e2) => pt(...e2), Y = (...e2) => Bt(...e2), J = (...e2) => ft(...e2), K = (...e2) => xt(...e2);
function A(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByAltTextWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var At = (e2, t) => `Found multiple elements with the alt text of: ${t}`, Mt = (e2, t) => `Unable to find an element with the alt text of: ${t}`, [Et, Lt, Pt, gt, Rt] = i(buildQueries(A, At, Mt)), Z = (...e2) => Et(...e2), v = (...e2) => Lt(...e2), ee = (...e2) => Pt(...e2), te = (...e2) => gt(...e2), oe = (...e2) => Rt(...e2);
function M(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByTitleWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var Ht = (e2, t) => `Found multiple elements with the title of: ${t}`, bt = (e2, t) => `Unable to find an element with the title of: ${t}`, [qt, Qt, _t, Ot, Dt] = i(buildQueries(M, Ht, bt)), ae = (...e2) => qt(...e2), le = (...e2) => Qt(...e2), ne = (...e2) => _t(...e2), re = (...e2) => Ot(...e2), de = (...e2) => Dt(...e2);
function E(...e2) {
  let [t, l2, a] = e2;
  return a == null && (a = {}), a.suggest = false, [...new Set(d(() => s(t, a).map((o) => queryAllByTestIdWithSuggestions(o, l2, a)).flat(1 / 0)))];
}
var It = (e2, t) => `Found multiple elements with the test id of: ${t}`, jt = (e2, t) => `Unable to find an element with the test id of: ${t}`, [Vt, Ft, Nt, Ct, Gt] = i(buildQueries(E, It, jt)), ye = (...e2) => Vt(...e2), se = (...e2) => Ft(...e2), Te = (...e2) => Nt(...e2), he = (...e2) => Ct(...e2), ie = (...e2) => Gt(...e2);
var Be = /([^\S\r\n]*[\f\n\r\t\v]+)/.source;
function Ut(e2) {
  return e2.replace(new RegExp(`${Be}.*${Be}{2,}`, "g"), "");
}
function xe(...e2) {
  let [t, l2, a] = e2, o = L((a == null ? void 0 : a.filterNode) || ue);
  return a == null && (a = {}), a.plugins == null && (a.plugins = []), a.plugins.push(o), d(() => prettyDOM(t, l2, { ...a, plugins: [o] }));
}
function Ae(e2) {
  return e2.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function ue(e2) {
  return e2.nodeType !== we && (e2.nodeType !== Ee || !e2.matches(getConfig().defaultIgnore));
}
var kt = (e2, t, l2, a, o, n2, r2) => {
  let y2 = a + l2.indent, T2 = l2.colors;
  return e2.map((u2) => {
    let m2 = t[u2], w2 = r2(m2, l2, y2, o, n2);
    return typeof m2 != "string" && (w2.indexOf(`
`) !== -1 && (w2 = l2.spacingOuter + y2 + w2 + l2.spacingOuter + a), w2 = "{" + w2 + "}"), l2.spacingInner + a + T2.prop.open + u2 + T2.prop.close + "=" + T2.value.open + w2 + T2.value.close;
  }).join("");
}, Xt = 3, zt = (e2, t, l2, a, o, n2) => Ut(e2.map((r2) => {
  let y2 = typeof r2 == "string" ? Me(r2, t) : n2(r2, t, l2, a, o);
  return y2 === "" && typeof r2 == "object" && r2 != null && r2.nodeType !== Xt ? "" : t.spacingOuter + l2 + y2;
}).join("")), Me = (e2, t) => {
  let l2 = t.colors.content;
  return l2.open + Ae(e2) + l2.close;
}, Yt = (e2, t) => {
  let l2 = t.colors.comment;
  return l2.open + "<!--" + Ae(e2) + "-->" + l2.close;
}, Jt = (e2, t, l2, a, o) => {
  let n2 = a.colors.tag;
  return n2.open + "<" + e2 + (t && n2.close + t + a.spacingOuter + o + n2.open) + (l2 ? ">" + n2.close + l2 + a.spacingOuter + o + n2.open + "</" + e2 : (t && !a.min ? "" : " ") + "/") + ">" + n2.close;
}, Kt = (e2, t) => {
  let l2 = t.colors.tag;
  return l2.open + "<" + e2 + l2.close + " …" + l2.open + " />" + l2.close;
}, Ee = 1, Le = 3, we = 8, Pe = 11, Zt = /^((HTML|SVG)\w*)?Element$/, vt = (e2) => {
  var n2;
  let t = ((n2 = e2 == null ? void 0 : e2.constructor) == null ? void 0 : n2.name) || "", { nodeType: l2, tagName: a } = e2, o = typeof a == "string" && a.includes("-") || typeof e2.hasAttribute == "function" && e2.hasAttribute("is") || e2 instanceof HTMLElement;
  return l2 === Ee && (Zt.test(t) || o) || l2 === Le && t === "Text" || l2 === we && t === "Comment" || l2 === Pe;
};
function eo(e2) {
  return e2.nodeType === Le;
}
function to(e2) {
  return e2.nodeType === we;
}
function fe(e2) {
  return e2.nodeType === Pe;
}
function L(e2) {
  function t(l2) {
    let a = Array.prototype.slice.call(l2.childNodes || l2.children);
    return "shadowRoot" in l2 && l2.shadowRoot != null && l2.shadowRoot.mode !== "closed" && a.unshift(l2.shadowRoot), a.filter(e2);
  }
  return { test: (l2) => (l2 == null ? void 0 : l2.constructor) && vt(l2), serialize: (l2, a, o, n2, r2, y2) => {
    if (eo(l2)) return Me(l2.data, a);
    if (to(l2)) return Yt(l2.data, a);
    let T2 = "DocumentFragment";
    return "tagName" in l2 && l2.tagName ? T2 = l2.tagName.toLowerCase() : l2 instanceof ShadowRoot && (T2 = "ShadowRoot"), ++n2 > a.maxDepth ? Kt(T2, a) : Jt(T2, kt(fe(l2) ? [] : Array.from(l2.attributes).map((u2) => u2.name).sort(), fe(l2) ? {} : Array.from(l2.attributes).reduce((u2, m2) => (u2[m2.name] = m2.value, u2), {}), a, o + a.indent, n2, r2, y2), zt(t(l2), a, o + a.indent, n2, r2, y2), a, o);
  } };
}
function P(...e2) {
  let [t, l2, a] = e2, o = L((a == null ? void 0 : a.filterNode) || ue);
  a == null && (a = {}), a.plugins == null && (a.plugins = []), a.plugins.push(o), d(() => logDOM(t, l2, a));
}
function me(...e2) {
  let [t, l2, a] = e2;
  Array.isArray(t) ? t.forEach((o) => P(o, l2, a)) : P(t, l2, a);
}
({ ...screen, debug: me, queryAllByShadowRole: (...e2) => c(document.documentElement, e2[0], e2[1]), queryByShadowRole: (...e2) => g(document.documentElement, e2[0], e2[1]), getAllByShadowRole: (...e2) => R(document.documentElement, e2[0], e2[1]), getByShadowRole: (...e2) => H(document.documentElement, e2[0], e2[1]), findAllByShadowRole: (...e2) => b(document.documentElement, e2[0], e2[1], e2[2]), findByShadowRole: (...e2) => q(document.documentElement, e2[0], e2[1], e2[2]), queryAllByShadowLabelText: (...e2) => p(document.documentElement, e2[0], e2[1]), queryByShadowLabelText: (...e2) => Q(document.documentElement, e2[0], e2[1]), getAllByShadowLabelText: (...e2) => _(document.documentElement, e2[0], e2[1]), getByShadowLabelText: (...e2) => O(document.documentElement, e2[0], e2[1]), findAllByShadowLabelText: (...e2) => D(document.documentElement, e2[0], e2[1], e2[2]), findByShadowLabelText: (...e2) => I(document.documentElement, e2[0], e2[1], e2[2]), queryAllByShadowPlaceholderText: (...e2) => B(document.documentElement, e2[0], e2[1]), queryByShadowPlaceholderText: (...e2) => j(document.documentElement, e2[0], e2[1]), getAllByShadowPlaceholderText: (...e2) => V(document.documentElement, e2[0], e2[1]), getByShadowPlaceholderText: (...e2) => F(document.documentElement, e2[0], e2[1]), findAllByShadowPlaceholderText: (...e2) => N(document.documentElement, e2[0], e2[1], e2[2]), findByShadowPlaceholderText: (...e2) => C(document.documentElement, e2[0], e2[1], e2[2]), queryAllByShadowText: (...e2) => f(document.documentElement, e2[0], e2[1]), queryByShadowText: (...e2) => G(document.documentElement, e2[0], e2[1]), getAllByShadowText: (...e2) => $(document.documentElement, e2[0], e2[1]), getByShadowText: (...e2) => W(document.documentElement, e2[0], e2[1]), findAllByShadowText: (...e2) => U(document.documentElement, e2[0], e2[1], e2[2]), findByShadowText: (...e2) => k(document.documentElement, e2[0], e2[1], e2[2]), queryAllByShadowDisplayValue: (...e2) => x(document.documentElement, e2[0], e2[1]), queryByShadowDisplayValue: (...e2) => X(document.documentElement, e2[0], e2[1]), getAllByShadowDisplayValue: (...e2) => z(document.documentElement, e2[0], e2[1]), getByShadowDisplayValue: (...e2) => Y(document.documentElement, e2[0], e2[1]), findAllByShadowDisplayValue: (...e2) => J(document.documentElement, e2[0], e2[1], e2[2]), findByShadowDisplayValue: (...e2) => K(document.documentElement, e2[0], e2[1], e2[2]), queryAllByShadowAltText: (...e2) => A(document.documentElement, e2[0], e2[1]), queryByShadowAltText: (...e2) => Z(document.documentElement, e2[0], e2[1]), getAllByShadowAltText: (...e2) => v(document.documentElement, e2[0], e2[1]), getByShadowAltText: (...e2) => ee(document.documentElement, e2[0], e2[1]), findAllByShadowAltText: (...e2) => te(document.documentElement, e2[0], e2[1], e2[2]), findByShadowAltText: (...e2) => oe(document.documentElement, e2[0], e2[1], e2[2]), queryAllByShadowTitle: (...e2) => M(document.documentElement, e2[0], e2[1]), queryByShadowTitle: (...e2) => ae(document.documentElement, e2[0], e2[1]), getAllByShadowTitle: (...e2) => le(document.documentElement, e2[0], e2[1]), getByShadowTitle: (...e2) => ne(document.documentElement, e2[0], e2[1]), findAllByShadowTitle: (...e2) => re(document.documentElement, e2[0], e2[1], e2[2]), findByShadowTitle: (...e2) => de(document.documentElement, e2[0], e2[1], e2[2]), queryAllByShadowTestId: (...e2) => E(document.documentElement, e2[0], e2[1]), queryByShadowTestId: (...e2) => ye(document.documentElement, e2[0], e2[1]), getAllByShadowTestId: (...e2) => se(document.documentElement, e2[0], e2[1]), getByShadowTestId: (...e2) => Te(document.documentElement, e2[0], e2[1]), findAllByShadowTestId: (...e2) => he(document.documentElement, e2[0], e2[1], e2[2]), findByShadowTestId: (...e2) => ie(document.documentElement, e2[0], e2[1], e2[2]) });
var yo = { ...queries, ...S };
function so(e2) {
  let t = getQueriesForElement(e2, yo);
  return { ...t, ...{ queryAllByShadowRole: (...o) => t.queryAllByShadowRole(...o), queryByShadowRole: (...o) => t.queryByShadowRole(...o), getAllByShadowRole: (...o) => t.getAllByShadowRole(...o), getByShadowRole: (...o) => t.getByShadowRole(...o), findAllByShadowRole: (...o) => t.findAllByShadowRole(...o), findByShadowRole: (...o) => t.findByShadowRole(...o), queryAllByShadowLabelText: (...o) => t.queryAllByShadowLabelText(...o), queryByShadowLabelText: (...o) => t.queryByShadowLabelText(...o), getAllByShadowLabelText: (...o) => t.getAllByShadowLabelText(...o), getByShadowLabelText: (...o) => t.getByShadowLabelText(...o), findAllByShadowLabelText: (...o) => t.findAllByShadowLabelText(...o), findByShadowLabelText: (...o) => t.findByShadowLabelText(...o), queryAllByShadowPlaceholderText: (...o) => t.queryAllByShadowPlaceholderText(...o), queryByShadowPlaceholderText: (...o) => t.queryByShadowPlaceholderText(...o), getAllByShadowPlaceholderText: (...o) => t.getAllByShadowPlaceholderText(...o), getByShadowPlaceholderText: (...o) => t.getByShadowPlaceholderText(...o), findAllByShadowPlaceholderText: (...o) => t.findAllByShadowPlaceholderText(...o), findByShadowPlaceholderText: (...o) => t.findByShadowPlaceholderText(...o), queryAllByShadowText: (...o) => t.queryAllByShadowText(...o), queryByShadowText: (...o) => t.queryByShadowText(...o), getAllByShadowText: (...o) => t.getAllByShadowText(...o), getByShadowText: (...o) => t.getByShadowText(...o), findAllByShadowText: (...o) => t.findAllByShadowText(...o), findByShadowText: (...o) => t.findByShadowText(...o), queryAllByShadowDisplayValue: (...o) => t.queryAllByShadowDisplayValue(...o), queryByShadowDisplayValue: (...o) => t.queryByShadowDisplayValue(...o), getAllByShadowDisplayValue: (...o) => t.getAllByShadowDisplayValue(...o), getByShadowDisplayValue: (...o) => t.getByShadowDisplayValue(...o), findAllByShadowDisplayValue: (...o) => t.findAllByShadowDisplayValue(...o), findByShadowDisplayValue: (...o) => t.findByShadowDisplayValue(...o), queryAllByShadowAltText: (...o) => t.queryAllByShadowAltText(...o), queryByShadowAltText: (...o) => t.queryByShadowAltText(...o), getAllByShadowAltText: (...o) => t.getAllByShadowAltText(...o), getByShadowAltText: (...o) => t.getByShadowAltText(...o), findAllByShadowAltText: (...o) => t.findAllByShadowAltText(...o), findByShadowAltText: (...o) => t.findByShadowAltText(...o), queryAllByShadowTitle: (...o) => t.queryAllByShadowTitle(...o), queryByShadowTitle: (...o) => t.queryByShadowTitle(...o), getAllByShadowTitle: (...o) => t.getAllByShadowTitle(...o), getByShadowTitle: (...o) => t.getByShadowTitle(...o), findAllByShadowTitle: (...o) => t.findAllByShadowTitle(...o), findByShadowTitle: (...o) => t.findByShadowTitle(...o), queryAllByShadowTestId: (...o) => t.queryAllByShadowTestId(...o), queryByShadowTestId: (...o) => t.queryByShadowTestId(...o), getAllByShadowTestId: (...o) => t.getAllByShadowTestId(...o), getByShadowTestId: (...o) => t.getByShadowTestId(...o), findAllByShadowTestId: (...o) => t.findAllByShadowTestId(...o), findByShadowTestId: (...o) => t.findByShadowTestId(...o) } };
}
configure({ getElementError(e2, t) {
  let l2 = xe(t), a = new Error([e2, `Ignored nodes: comments, ${getConfig().defaultIgnore}
${l2}`].filter(Boolean).join(`

`));
  return a.name = "ShadowDOMTestingLibraryElementError", a;
} });
const utrecht = {
  button: {
    "background-color": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<color>",
          inherits: true
        }
      },
      type: "color"
    },
    "border-color": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<color>",
          inherits: true
        }
      },
      type: "color"
    },
    "border-radius": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "borderRadius"
    },
    "border-width": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "borderWidth"
    },
    color: {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<color>",
          inherits: true
        }
      },
      type: "color"
    },
    "font-family": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "*",
          inherits: true
        },
        "nl.nldesignsystem.fallback": [
          "utrecht.document.font-family"
        ]
      },
      type: "fontFamilies"
    },
    "font-size": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "fontSizes"
    },
    "font-weight": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<number>",
          inherits: true
        }
      },
      type: "fontWeights"
    },
    "inline-size": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      }
    },
    "line-height": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "lineHeights"
    },
    "margin-block-start": {
      $extensions: {
        "nl.nldesignsystem.hidden": true,
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      }
    },
    "margin-block-end": {
      $extensions: {
        "nl.nldesignsystem.hidden": true,
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      }
    },
    "margin-inline-start": {
      $extensions: {
        "nl.nldesignsystem.hidden": true,
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      }
    },
    "margin-inline-end": {
      $extensions: {
        "nl.nldesignsystem.hidden": true,
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      }
    },
    "min-block-size": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "sizing"
    },
    "min-inline-size": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "sizing"
    },
    "padding-block-start": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "spacing"
    },
    "padding-block-end": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "spacing"
    },
    "padding-inline-start": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "spacing"
    },
    "padding-inline-end": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "<length>",
          inherits: true
        }
      },
      type: "spacing"
    },
    "text-transform": {
      $extensions: {
        "nl.nldesignsystem.css.property": {
          syntax: "inherit | uppercase",
          inherits: true
        }
      }
    },
    active: {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      }
    },
    icon: {
      gap: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          }
        },
        type: "spacing"
      },
      size: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          }
        },
        type: "sizing"
      }
    },
    disabled: {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      }
    },
    focus: {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      },
      scale: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<number>",
            inherits: true
          },
          "nl.nldesignsystem.figma.supports-token": false
        }
      }
    },
    hover: {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      },
      scale: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<number>",
            inherits: true
          },
          "nl.nldesignsystem.figma.supports-token": false
        }
      }
    },
    pressed: {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      }
    },
    "primary-action": {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      "border-width": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-width"
          ]
        }
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      },
      "font-size": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.font-size"
          ]
        },
        type: "fontSizes"
      },
      "font-weight": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<number>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.font-weight"
          ]
        },
        type: "fontWeights"
      },
      "line-height": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.line-height"
          ]
        },
        type: "lineHeights"
      },
      active: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.background-color",
              "utrecht.button.primary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.border-color",
              "utrecht.button.primary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.color",
              "utrecht.button.primary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      disabled: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.background-color",
              "utrecht.button.primary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.border-color",
              "utrecht.button.primary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.color",
              "utrecht.button.primary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      hover: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.background-color",
              "utrecht.button.primary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.border-color",
              "utrecht.button.primary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.color",
              "utrecht.button.primary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        },
        scale: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<number>",
              inherits: true
            }
          }
        }
      },
      focus: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.background-color",
              "utrecht.button.primary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.border-color",
              "utrecht.button.primary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.color",
              "utrecht.button.primary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      pressed: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.background-color",
              "utrecht.button.primary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.border-color",
              "utrecht.button.primary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.color",
              "utrecht.button.primary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      }
    },
    "secondary-action": {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      "border-width": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-width"
          ]
        }
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      },
      "font-size": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.font-size"
          ]
        },
        type: "fontSizes"
      },
      "font-weight": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<number>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.font-weight"
          ]
        },
        type: "fontWeights"
      },
      "line-height": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.line-height"
          ]
        },
        type: "lineHeights"
      },
      active: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.background-color",
              "utrecht.button.secondary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.border-color",
              "utrecht.button.secondary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.color",
              "utrecht.button.secondary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      disabled: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.background-color",
              "utrecht.button.secondary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.border-color",
              "utrecht.button.secondary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.color",
              "utrecht.button.secondary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      hover: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.background-color",
              "utrecht.button.secondary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.border-color",
              "utrecht.button.secondary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.color",
              "utrecht.button.secondary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      focus: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.background-color",
              "utrecht.button.secondary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.border-color",
              "utrecht.button.secondary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.color",
              "utrecht.button.secondary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      pressed: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.background-color",
              "utrecht.button.secondary-action.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.border-color",
              "utrecht.button.secondary-action.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.color",
              "utrecht.button.secondary-action.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      }
    },
    subtle: {
      "background-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.background-color"
          ]
        },
        type: "color"
      },
      "border-color": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-color"
          ]
        },
        type: "color"
      },
      "border-width": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.border-width"
          ]
        }
      },
      color: {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<color>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.color"
          ]
        },
        type: "color"
      },
      "font-size": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.font-size"
          ]
        },
        type: "fontSizes"
      },
      "font-weight": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<number>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.font-weight"
          ]
        },
        type: "fontWeights"
      },
      "line-height": {
        $extensions: {
          "nl.nldesignsystem.css.property": {
            syntax: "<length>",
            inherits: true
          },
          "nl.nldesignsystem.fallback": [
            "utrecht.button.line-height"
          ]
        },
        type: "lineHeights"
      },
      active: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.background-color",
              "utrecht.button.subtle.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.border-color",
              "utrecht.button.subtle.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.active.color",
              "utrecht.button.subtle.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      disabled: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.background-color",
              "utrecht.button.subtle.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.border-color",
              "utrecht.button.subtle.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.disabled.color",
              "utrecht.button.subtle.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      hover: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.background-color",
              "utrecht.button.subtle.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.border-color",
              "utrecht.button.subtle.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.hover.color",
              "utrecht.button.subtle.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      focus: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.background-color",
              "utrecht.button.subtle.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.border-color",
              "utrecht.button.subtle.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.focus.color",
              "utrecht.button.subtle.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      },
      pressed: {
        "background-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.background-color",
              "utrecht.button.subtle.background-color",
              "utrecht.button.background-color"
            ]
          },
          type: "color"
        },
        "border-color": {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.border-color",
              "utrecht.button.subtle.border-color",
              "utrecht.button.border-color"
            ]
          },
          type: "color"
        },
        color: {
          $extensions: {
            "nl.nldesignsystem.css.property": {
              syntax: "<color>",
              inherits: true
            },
            "nl.nldesignsystem.fallback": [
              "utrecht.button.pressed.color",
              "utrecht.button.subtle.color",
              "utrecht.button.color"
            ]
          },
          type: "color"
        }
      }
    }
  }
};
const tokensDefinition = {
  utrecht
};
const { useArgs } = __STORYBOOK_MODULE_PREVIEW_API__;
const LuxButton = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton$1, { ...props });
const meta = {
  title: "Web Components/Button",
  id: "web-components-button",
  component: LuxButton,
  parameters: {
    tokens,
    tokensPrefix: "lux-button",
    tokensDefinition
  },
  argTypes: {
    appearance: {
      control: {
        type: "select"
      },
      options: [void 0, "button", "primary-action-button", "secondary-action-button", "subtle-button"]
    },
    children: {
      name: "content (label)",
      description: "Button text",
      control: "text"
    },
    busy: {
      type: "boolean"
    },
    disabled: {
      type: "boolean"
    },
    expanded: {
      control: "select",
      options: [void 0, "false", "true"]
    },
    pressed: {
      control: "select",
      options: [void 0, "false", "true", "mixed"]
    },
    type: {
      control: "select",
      options: [void 0, "button", "reset", "submit"],
      table: {
        defaultValue: {
          summary: "button"
        }
      }
    },
    forceState: {
      table: {
        disable: true
      }
    }
  }
};
const Playground = {
  name: "Playground",
  args: {
    appearance: "primary-action-button",
    children: "Button",
    type: void 0,
    name: "",
    value: "",
    busy: false,
    disabled: false,
    expanded: void 0,
    pressed: void 0,
    form: void 0,
    formAction: "",
    formEnctype: "",
    formMethod: "",
    formNoValidate: false,
    popoverTarget: void 0,
    popoverTargetAction: ""
  },
  parameters: {
    docs: {
      sourceState: "shown"
    }
  },
  tags: ["!autodocs"]
};
const Primary = {
  name: "Primary",
  args: {
    appearance: "primary-action-button",
    children: "Primary Button"
  },
  parameters: {
    docs: {
      description: {
        story: 'De Primary styling zet je met `appearance="primary-action-button"`'
      }
    }
  }
};
const Secondary = {
  name: "Secondary",
  args: {
    appearance: "secondary-action-button",
    children: "Secondary Button"
  },
  parameters: {
    docs: {
      description: {
        story: 'De Secondary styling zet je met `appearance="secondary-action-button"`'
      }
    }
  }
};
const Tertiary = {
  name: "Tertiary",
  args: {
    appearance: "subtle-button",
    children: "Tertiary Button"
  },
  parameters: {
    docs: {
      description: {
        story: 'De Tertiary styling zet je met `appearance="subtle-button"`'
      }
    }
  }
};
const Active = {
  name: "Active",
  args: {
    appearance: "button",
    children: "Active Button",
    forceState: "active"
  },
  argTypes: {
    appearance: {
      table: {
        disable: true
      }
    }
  },
  play: async ({
    canvasElement
  }) => {
    const canvas = await so(canvasElement);
    const luxButton = canvas.getByShadowText("Active Button");
    await userEvent2.pointer({
      target: luxButton,
      keys: "[MouseLeft]"
    });
  },
  render: (args) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "primary-action-button", children: args.children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "secondary-action-button", children: args.children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "subtle-button", children: args.children })
  ] }),
  decorators: [(Story) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "lsb-story-grid", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Story, {}) })]
};
const Hover = {
  name: "Hover",
  args: {
    appearance: "button",
    children: "Hover Button",
    forceState: "hover"
  },
  argTypes: {
    appearance: {
      table: {
        disable: true
      }
    }
  },
  render: (args) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "primary-action-button", children: args.children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "secondary-action-button", children: args.children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "subtle-button", children: args.children })
  ] }),
  decorators: [(Story) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "lsb-story-grid", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Story, {}) })]
};
const Focus = {
  name: "Focus",
  args: {
    appearance: "button",
    children: "Focus Button",
    forceState: "focus"
  },
  argTypes: {
    appearance: {
      table: {
        disable: true
      }
    }
  },
  render: (args) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "primary-action-button", children: args.children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "secondary-action-button", children: args.children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxButton, { ...args, appearance: "subtle-button", children: args.children })
  ] }),
  decorators: [(Story) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "lsb-story-grid", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Story, {}) })]
};
const Busy = {
  name: "Busy",
  args: {
    appearance: "primary-action-button",
    children: "Busy Button",
    busy: true
  },
  parameters: {
    docs: {
      description: {
        story: "Een busy button zet je met het `busy`-attribute (`true`/`false`, default: `undefined`). Toont een `wait` cursor en `aria-busy`-attribute."
      }
    }
  }
};
const Toggle = {
  name: "Toggle",
  args: {
    appearance: "primary-action-button",
    pressed: true
  },
  render: (args) => {
    const [{
      pressed
    }, updateArgs] = useArgs();
    const onPress = () => {
      updateArgs({
        pressed: !pressed
      });
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(LuxButton, { ...args, onClick: onPress, children: [
      "Toggle Button ",
      args.pressed ? "pressed" : "not pressed"
    ] });
  },
  argTypes: {
    pressed: {
      control: "boolean"
    },
    children: {
      table: {
        disable: true
      }
    }
  },
  parameters: {
    docs: {
      description: {
        story: 'Een pressed button zet je met het `pressed`-attribute (`true`/`false`/`"mixed"`, default: `undefined`). Zet `aria-pressed`-attribute.'
      }
    }
  }
};
const WithStartIcon = {
  name: "Start Icon",
  args: {
    appearance: "primary-action-button",
    children: "Start Icon"
  },
  render: (args) => /* @__PURE__ */ jsxRuntimeExports.jsxs(LuxButton, { ...args, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxIconChevronLeft, {}),
    args.children
  ] })
};
const WithEndIcon = {
  name: "End Icon",
  args: {
    appearance: "primary-action-button",
    children: "End Icon"
  },
  render: (args) => /* @__PURE__ */ jsxRuntimeExports.jsxs(LuxButton, { ...args, children: [
    args.children,
    /* @__PURE__ */ jsxRuntimeExports.jsx(LuxIconChevronRight, {})
  ] })
};
const DesignTokens = createDesignTokensStory(meta);
Playground.parameters = {
  ...Playground.parameters,
  docs: {
    ...(_a = Playground.parameters) == null ? void 0 : _a.docs,
    source: {
      originalSource: "{\n  name: 'Playground',\n  args: {\n    appearance: 'primary-action-button',\n    children: 'Button',\n    type: undefined,\n    name: '',\n    value: '',\n    busy: false,\n    disabled: false,\n    expanded: undefined,\n    pressed: undefined,\n    form: undefined,\n    formAction: '',\n    formEnctype: '',\n    formMethod: '',\n    formNoValidate: false,\n    popoverTarget: undefined,\n    popoverTargetAction: ''\n  },\n  parameters: {\n    docs: {\n      sourceState: 'shown'\n    }\n  },\n  tags: ['!autodocs']\n}",
      ...(_c = (_b = Playground.parameters) == null ? void 0 : _b.docs) == null ? void 0 : _c.source
    }
  }
};
Primary.parameters = {
  ...Primary.parameters,
  docs: {
    ...(_d = Primary.parameters) == null ? void 0 : _d.docs,
    source: {
      originalSource: "{\n  name: 'Primary',\n  args: {\n    appearance: 'primary-action-button',\n    children: 'Primary Button'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'De Primary styling zet je met `appearance=\"primary-action-button\"`'\n      }\n    }\n  }\n}",
      ...(_f = (_e = Primary.parameters) == null ? void 0 : _e.docs) == null ? void 0 : _f.source
    }
  }
};
Secondary.parameters = {
  ...Secondary.parameters,
  docs: {
    ...(_g = Secondary.parameters) == null ? void 0 : _g.docs,
    source: {
      originalSource: "{\n  name: 'Secondary',\n  args: {\n    appearance: 'secondary-action-button',\n    children: 'Secondary Button'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'De Secondary styling zet je met `appearance=\"secondary-action-button\"`'\n      }\n    }\n  }\n}",
      ...(_i = (_h = Secondary.parameters) == null ? void 0 : _h.docs) == null ? void 0 : _i.source
    }
  }
};
Tertiary.parameters = {
  ...Tertiary.parameters,
  docs: {
    ...(_j = Tertiary.parameters) == null ? void 0 : _j.docs,
    source: {
      originalSource: "{\n  name: 'Tertiary',\n  args: {\n    appearance: 'subtle-button',\n    children: 'Tertiary Button'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'De Tertiary styling zet je met `appearance=\"subtle-button\"`'\n      }\n    }\n  }\n}",
      ...(_l = (_k = Tertiary.parameters) == null ? void 0 : _k.docs) == null ? void 0 : _l.source
    }
  }
};
Active.parameters = {
  ...Active.parameters,
  docs: {
    ...(_m = Active.parameters) == null ? void 0 : _m.docs,
    source: {
      originalSource: `{
  name: 'Active',
  args: {
    appearance: 'button',
    children: 'Active Button',
    forceState: 'active'
  },
  argTypes: {
    appearance: {
      table: {
        disable: true
      }
    }
  },
  play: async ({
    canvasElement
  }) => {
    const canvas = await within(canvasElement);
    const luxButton = canvas.getByShadowText('Active Button');
    await userEvent.pointer({
      target: luxButton,
      keys: '[MouseLeft]'
    });
  },
  render: args => <>
      <LuxButton {...args} appearance="primary-action-button">
        {args.children}
      </LuxButton>
      <LuxButton {...args} appearance="secondary-action-button">
        {args.children}
      </LuxButton>
      <LuxButton {...args} appearance="subtle-button">
        {args.children}
      </LuxButton>
    </>,
  decorators: [Story => <div className="lsb-story-grid">
        <Story />
      </div>]
}`,
      ...(_o = (_n = Active.parameters) == null ? void 0 : _n.docs) == null ? void 0 : _o.source
    }
  }
};
Hover.parameters = {
  ...Hover.parameters,
  docs: {
    ...(_p = Hover.parameters) == null ? void 0 : _p.docs,
    source: {
      originalSource: `{
  name: 'Hover',
  args: {
    appearance: 'button',
    children: 'Hover Button',
    forceState: 'hover'
  },
  argTypes: {
    appearance: {
      table: {
        disable: true
      }
    }
  },
  render: args => <>
      <LuxButton {...args} appearance="primary-action-button">
        {args.children}
      </LuxButton>
      <LuxButton {...args} appearance="secondary-action-button">
        {args.children}
      </LuxButton>
      <LuxButton {...args} appearance="subtle-button">
        {args.children}
      </LuxButton>
    </>,
  decorators: [Story => <div className="lsb-story-grid">
        <Story />
      </div>]
}`,
      ...(_r = (_q = Hover.parameters) == null ? void 0 : _q.docs) == null ? void 0 : _r.source
    }
  }
};
Focus.parameters = {
  ...Focus.parameters,
  docs: {
    ...(_s = Focus.parameters) == null ? void 0 : _s.docs,
    source: {
      originalSource: `{
  name: 'Focus',
  args: {
    appearance: 'button',
    children: 'Focus Button',
    forceState: 'focus'
  },
  argTypes: {
    appearance: {
      table: {
        disable: true
      }
    }
  },
  render: args => <>
      <LuxButton {...args} appearance="primary-action-button">
        {args.children}
      </LuxButton>
      <LuxButton {...args} appearance="secondary-action-button">
        {args.children}
      </LuxButton>
      <LuxButton {...args} appearance="subtle-button">
        {args.children}
      </LuxButton>
    </>,
  decorators: [Story => <div className="lsb-story-grid">
        <Story />
      </div>]
}`,
      ...(_u = (_t2 = Focus.parameters) == null ? void 0 : _t2.docs) == null ? void 0 : _u.source
    }
  }
};
Busy.parameters = {
  ...Busy.parameters,
  docs: {
    ...(_v = Busy.parameters) == null ? void 0 : _v.docs,
    source: {
      originalSource: "{\n  name: 'Busy',\n  args: {\n    appearance: 'primary-action-button',\n    children: 'Busy Button',\n    busy: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Een busy button zet je met het `busy`-attribute (`true`/`false`, default: `undefined`). Toont een `wait` cursor en `aria-busy`-attribute.'\n      }\n    }\n  }\n}",
      ...(_x = (_w = Busy.parameters) == null ? void 0 : _w.docs) == null ? void 0 : _x.source
    }
  }
};
Toggle.parameters = {
  ...Toggle.parameters,
  docs: {
    ...(_y = Toggle.parameters) == null ? void 0 : _y.docs,
    source: {
      originalSource: "{\n  name: 'Toggle',\n  args: {\n    appearance: 'primary-action-button',\n    pressed: true\n  },\n  render: (args: any) => {\n    const [{\n      pressed\n    }, updateArgs] = useArgs();\n    const onPress = () => {\n      updateArgs({\n        pressed: !pressed\n      });\n    };\n    return <LuxButton {...args} onClick={onPress}>\n        Toggle Button {args.pressed ? 'pressed' : 'not pressed'}\n      </LuxButton>;\n  },\n  argTypes: {\n    pressed: {\n      control: 'boolean'\n    },\n    children: {\n      table: {\n        disable: true\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Een pressed button zet je met het `pressed`-attribute (`true`/`false`/`\"mixed\"`, default: `undefined`). Zet `aria-pressed`-attribute.'\n      }\n    }\n  }\n}",
      ...(_A = (_z = Toggle.parameters) == null ? void 0 : _z.docs) == null ? void 0 : _A.source
    }
  }
};
WithStartIcon.parameters = {
  ...WithStartIcon.parameters,
  docs: {
    ...(_B = WithStartIcon.parameters) == null ? void 0 : _B.docs,
    source: {
      originalSource: "{\n  name: 'Start Icon',\n  args: {\n    appearance: 'primary-action-button',\n    children: 'Start Icon'\n  },\n  render: args => <LuxButton {...args}>\n      <IconChevronLeft />\n      {args.children}\n    </LuxButton>\n}",
      ...(_D = (_C = WithStartIcon.parameters) == null ? void 0 : _C.docs) == null ? void 0 : _D.source
    }
  }
};
WithEndIcon.parameters = {
  ...WithEndIcon.parameters,
  docs: {
    ...(_E = WithEndIcon.parameters) == null ? void 0 : _E.docs,
    source: {
      originalSource: "{\n  name: 'End Icon',\n  args: {\n    appearance: 'primary-action-button',\n    children: 'End Icon'\n  },\n  render: args => <LuxButton {...args}>\n      {args.children}\n      <IconChevronRight />\n    </LuxButton>\n}",
      ...(_G = (_F = WithEndIcon.parameters) == null ? void 0 : _F.docs) == null ? void 0 : _G.source
    }
  }
};
DesignTokens.parameters = {
  ...DesignTokens.parameters,
  docs: {
    ...(_H = DesignTokens.parameters) == null ? void 0 : _H.docs,
    source: {
      originalSource: "createDesignTokensStory(meta)",
      ...(_J = (_I = DesignTokens.parameters) == null ? void 0 : _I.docs) == null ? void 0 : _J.source
    }
  }
};
const __namedExportsOrder = ["Playground", "Primary", "Secondary", "Tertiary", "Active", "Hover", "Focus", "Busy", "Toggle", "WithStartIcon", "WithEndIcon", "DesignTokens"];
const ButtonStories = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Active,
  Busy,
  DesignTokens,
  Focus,
  Hover,
  Playground,
  Primary,
  Secondary,
  Tertiary,
  Toggle,
  WithEndIcon,
  WithStartIcon,
  __namedExportsOrder,
  default: meta
}, Symbol.toStringTag, { value: "Module" }));
export {
  Active as A,
  ButtonStories as B,
  Focus as F,
  Hover as H,
  Playground as P,
  Secondary as S,
  Tertiary as T,
  WithStartIcon as W,
  Primary as a,
  Busy as b,
  Toggle as c,
  WithEndIcon as d
};
